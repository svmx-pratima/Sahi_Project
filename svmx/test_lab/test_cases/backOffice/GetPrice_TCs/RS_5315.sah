//Tests are to be written here [Bhupendra Singh Chouhan]
//==============

var $RS_5315 = _testcase("$RS_5315","Get Price on WO: Calculation based on labor pricing defined in SCon when Activity type(Activity ID=Calibration/Installation).");
$RS_5315.start();
_setSpeed($g_stepSpeed);

/**
* Login to the Sandbox Org
*/

$bo_act_login.login($g_url, $bac_un, $bac_pwd);

//Pre - Condition Test Data
var $productFamily = ["--None--","GeneralSolution","AdvSolution","Accessory", "Storage"];
var $productCode = "";
var $seperator = "/";

/**
* Create Account, Contact, Product and Installed Product
*/
var $accountName = $bo_act_accounts.createAccount();
var $contactName = $bo_act_contacts.createContact($accountName);
var $productName = $bo_act_products.createProduct($productCode, $productFamily[0]);
var $productName1 = $bo_act_products.createProduct($productCode, $productFamily[0]);
var $IBName = $bo_act_installedProduct.createInstalledProduct($productName, $accountName, $contactName);

/**
* Create two Activity Master 
*/
var $activityType = ["--None--","Calibration","Cleanup","Installation","Repair","Service"];
var $unit = ["--None--","Per Hour","Flat Rate"];

var $activityID = $bo_act_activityMaster.createActivityMasterUsingProduct($activityType[1], $productName);
var $activityID1 = $bo_act_activityMaster.createActivityMasterUsingProduct($activityType[3], $productName1);

/**
* Create SLA Terms
*/
var $slaName = $bo_act_slaTerms.createSlaTerms("Default");
$bo_act_slaTerms.addInitialResponseToSLA($slaName,"WorkOrder","Field Service","Medium","Created Date","5","10","SLA");
//$bo_act_slaTerms.addOnsiteResponseToSLA($slaName,"WorkOrder","Field Service","Medium","Created Date","10","15","SLA");

//validation of SLA creation
_assertExists(_span($slaName));

/**
* Create Service Contract(With child lines) and Activate it
*/
var $pastYear = 2;  // Start Date for Service Contract
var $futureYear = 2;  // End Date for Service Contract

//Creation of Service Contracts
var $serviceConractName = $bo_act_serviceMaintenanceContracts.createServiceMaintenanceContract($accountName, $slaName, $futureYear, $pastYear);

//Activating Created Service Contract
$bo_act_serviceMaintenanceContracts.activateServiceContract($serviceConractName);

//Add Covered Product to Service Contract 

var $pastYear = 3;  			// Start Date 'TODAY's' Date - 3 YEARS
var $futureYear = 3;			// End Date 'TODAY's' Date + 3 YEARS

$bo_act_serviceMaintenanceContracts.AddCoveredProducToServiceContract($serviceConractName, $IBName, $slaName, $pastYear, $futureYear);

//Add Entitled Contact to Service Contract 

$bo_act_serviceMaintenanceContracts.addEntitledContactsToServiceContract($serviceConractName, $contactName);
_setSpeed(300);
//Add Labor Pricing To Service Contract using Unit as Per Hours and Activity Type as Calibration
var $RoundingType = "Actuals";
var $minimumLaborMins = 30;
var $regularRate = 500;
$bo_act_serviceMaintenanceContracts.addLaborPricingToServiceContract($serviceConractName, $RoundingType, $unit[1], $minimumLaborMins,$regularRate, $activityType[1]);


//Add Labor Pricing To Service Contract using Unit as Flat Rate and Activity Type as Installation
var $minimumLaborMins1 = 60;
var $regularRate1 = 800;
$bo_act_serviceMaintenanceContracts.addSecondLaborPricingToServiceContract($serviceConractName, $RoundingType, $unit[2], $minimumLaborMins1,$regularRate1, $activityType[3]);
_setSpeed($g_stepSpeed);

/**
* Create Case record
*/
var $caseStatus = "New";
var $casePriority = "Medium";
var $caseOrigin = "Phone";
var $caseNumber = $bo_act_Cases.createCase($caseStatus, $casePriority, $caseOrigin);

/**
* Create SFM Wizard for WO with two Steps 1st-Check Entitlement and 2nd- Manage Work Order Lines - Usage(TDM016)
*/
var $wizardTitleName = $bo_act_common.generateRandomName("SFWTitle");
var $wizardIDName = $bo_act_common.generateRandomName("SFWId");
var $fieldActnType = "Others";
var $actnName = "Check Entitlement WO";

$bo_act_navigation.navigateToSfmWizard();
$bo_act_SFW.createWizardGeneralInfo("Work Order", $wizardTitleName, $wizardIDName);
$bo_act_SFW.createWizardStep("SFM", "Manage Work Order Lines - Usage", "Interactive");
$bo_act_SFW.addCustomActionToWizard($fieldActnType, $actnName);
$bo_act_SFW.quickSaveSFWizard();

//Navigate to IB and Create WO from IB
var $WONumber = $bo_act_installedProduct.createWOFromIB($IBName);

//Edit The Above created WO for few fields
$bo_act_workOrders.editWorkOrder($WONumber);

//Edit WO for Case 
var $object = _textbox("/\\*Case|^Case/");
var $objectValue = $caseNumber;
$bo_act_workOrders.updateTextBoxFields($object, $objectValue);

//Edit WO for Priority
var $object = _select(0,_rightOf(_label("/\\*Priority|^Priority/")));
var $objectValue = "Medium";
$bo_act_workOrders.updateDropDownFields($object, $objectValue);

//Edit WO for Billing Type
var $object = _select(0,_rightOf(_label("Billing Type")));
var $objectValue = "Paid";
$bo_act_workOrders.updateDropDownFields($object, $objectValue);
$bo_act_workOrders.saveWorkOrder();     		// Save the Edited WO

/**
*Perform Interactive Entitlement on WO using Service Contract
*/
$bo_act_interactiveEntitlement_WO.performInteractiveEntitlementWO_UsingScon($WONumber, $serviceConractName);
var $actual_EntitlementType = _getText(_div(0,_rightOf(_cell("/Entitlement Type/"))));
var $ServiceContract_actual = _getText(_link(0,_rightOf(_cell("Service Contract"))));
_assertEqual($actual_EntitlementType,"INTERACTIVE","Actual and expected Entitlement Type are not same");
_assertEqual($ServiceContract_actual,$serviceConractName,"Actual and expected Service Conract are not same");

//validation of Entitlement Parameters On Case

if(_isVisible(_image("Checked",_rightOf(_cell("/Is Entitlement Performed/"))))){
	_logOutput("Entitlement is Performed Successfully = PASS");
	}else{
	_fail("Entitlement is Not Performed = Failed");
	}

/**
*Invoke TDMo16 SFM for Get Price Calculation when IB is Covered under Scon
*/

$bo_act_getPrice.navigateToSFMDeliveryPageFor_TDM016($WONumber);
_setSpeed(300);
//Add Labor Line to Above invoke TDM016 SFM
var $searchValue = $productName;
var $startHrs = "04";
var $endHrs = "08";
$bo_act_getPrice.addLaborLineToSFMDelivery($searchValue, $activityType[1], $startHrs, $endHrs);
$bo_act_getPrice.calculateGetPrice();
$bo_pg_getPrice.btn_quickSave;

//Validation of Get Price for Labor lines
$bo_act_getPrice.editLaborLineToSFMDelivery($searchValue);
_wait(2000);
_setStrictVisibilityCheck(true);
var $LaborLinePricePerUnitActual = _getText(_textbox(0,_rightOf(_label("/Line Price Per Unit/"))));
var $LaborCoveredActual = _getText(_textbox(0,_rightOf(_label("/Covered %/"))));
var $LaborBillableQtyActual = _getText(_textbox(0,_rightOf(_label("/Billable Qty/"))));
var $LaborBillableLinePriceActual = _getText(_textbox(0,_rightOf(_label("/Billable Line Price/"))));
_setStrictVisibilityCheck(false);
var $LaborBillableQtyExpected = 8-4; // $startHrs = "04" And $endHrs = "08";
var $LaborBillableLinePriceExpected = $LaborBillableQtyExpected*$regularRate;


_assertEqual($LaborLinePricePerUnitActual,$regularRate,"Actual and expected Labor Line Price Per Unit are not same");
_assertEqual($LaborBillableQtyActual,$LaborBillableQtyExpected,"Actual and expected Billable Qty are not same");
_assertEqual($LaborBillableLinePriceActual,$LaborBillableLinePriceExpected,"Actual and expected Billable Line Price are not same");
_assertEqual($LaborCoveredActual,"0","Actual and expected labor Covered % are not same");

$bo_act_getPrice.closeEditedWOLineToSFMDelivery();

//Add Second Labor Line to Above invoke TDM016 SFM
var $searchValue1 = $productName1;
var $activityType1 = $activityType[3];
var $lineQty1 = "3";
$bo_act_getPrice.addSecondLaborLineUsingLintQtyToSFMDelivery($searchValue1, $activityType1, $lineQty1);
$bo_act_getPrice.calculateGetPrice();
$bo_pg_getPrice.btn_quickSave;

//Validation of Get Price for 2nd Labor lines
$bo_act_getPrice.editLaborLineToSFMDelivery($searchValue1);
_wait(2000);
_setStrictVisibilityCheck(true);
var $LaborLinePricePerUnitActual1 = _getText(_textbox(0,_rightOf(_label("/Line Price Per Unit/"))));
var $LaborCoveredActual1 = _getText(_textbox(0,_rightOf(_label("/Covered %/"))));
var $LaborBillableQtyActual1 = _getText(_textbox(0,_rightOf(_label("/Billable Qty/"))));
var $LaborBillableLinePriceActual1 = _getText(_textbox(0,_rightOf(_label("/Billable Line Price/"))));
_setStrictVisibilityCheck(false);

_assertEqual($LaborLinePricePerUnitActual1,$regularRate1,"Actual and expected Labor Line Price Per Unit are not same");
_assertEqual($LaborBillableQtyActual1,"1","Actual and expected Billable Qty are not same");
_assertEqual($LaborBillableLinePriceActual1,$regularRate1,"Actual and expected Billable Line Price are not same");
_assertEqual($LaborCoveredActual1,"0","Actual and expected labor Covered % are not same");

$bo_act_getPrice.closeEditedWOLineToSFMDelivery();

$bo_act_getPrice.saveSFMDelivery();
_setSpeed($g_stepSpeed);
//Delete SFM Wizard 
$bo_act_SFW.deleteSFMWizard("Work Order", $wizardIDName);

/**
*Clean up function
*/

$bo_act_common.deleteCase($bac_un, $bac_pwd,$caseNumber);
$bo_act_common.deleteAccount($bac_un, $bac_pwd, $accountName);
$bo_act_common.deleteContact($bac_un, $bac_pwd, $contactName);
$bo_act_common.deleteIB($bac_un, $bac_pwd, $orgnamespace,$IBName);
$bo_act_common.deleteProduct($bac_un, $bac_pwd,$productName);
$bo_act_common.deleteProduct($bac_un, $bac_pwd,$productName1);
$bo_act_common.deleteWorkOrder($bac_un, $bac_pwd, $orgnamespace,$WONumber);
$bo_act_common.deleteSLA($bac_un, $bac_pwd, $orgnamespace, $slaName);
$bo_act_common.deleteSCON($bac_un, $bac_pwd, $orgnamespace,$serviceConractName);

//var $datacreated = [$WONumber,$caseNumber,$IBName,$productName,$productName1,$contactName,$accountName,$slaName,$serviceConractName];
//for (var i = 0; i < $datacreated.length; i++) {
//$bo_act_common.cleanUpfunction($datacreated[i]);
//}

// Delete the Activity ID's Created 
/*$bo_act_activityMaster.deleteActivityMaster($activityID);
$bo_act_activityMaster.deleteActivityMaster($activityID1);*/

$bo_act_login.logOut(); 

$RS_5315.end();
