//Tests are to be written here [Bhupendra Singh Chouhan]
//==============

//Pre - Condition Test Data

var $RS_6348 = _testcase("$RS_6348","Auto Entitlement-Case:- Auto Entitlement using Service Contract with Counters");
$RS_6348.start();
_setSpeed($g_stepSpeed);
/**
* Login to the Sandbox Org
*/

$bo_act_login.login($g_url, $bac_un, $bac_pwd);

/**
 * Configure the Global Profile SET001
 * Global Setting SET001 - Enable Auto Entitlement For Work Order is set to True for Auto Entitlement process to trigger 
 * (This is a Global Setting and is available under Module "Entitlement Verification" and Submodule "Auto-Entitlement - Work Order") 
 */
var $Module = "Entitlement Verification";
var $SubModule = "Auto-Entitlement-Case";
var $Setting = "SET001";
var $value = true;
$bo_act_configurationProfiles.editGlobalProfileForBooleanSettings($Module, $SubModule, $Setting, $value);

/**
 * Create Auto Entitlement Rules for Case
 */

var $CaseField = "Case Origin";
var $Operator = "Equals";
var $Value = "Email";
var $pIB = "No";
var $topIB = "No";
var	$WarnOrSCON = "Service Contracts";
var $Act = "Yes";
var $Cont = "No";
var $Loc = "No";
var $searchedUsing = "Counters";
var $slaCov = "Yes";
//Navigate to Auto Entitlement Rules - Case Rule1
$autoEntRuleName = $bo_act_autoEntitlementRule_Case.createAutoEntRule_CaseWithAllFields($CaseField,$Operator,$Value,$pIB,$topIB,$WarnOrSCON,$Act,$Cont,$Loc,$searchedUsing,$slaCov);
_assertExists(_span($autoEntRuleName));

//Changing the Rule Sequence
$bo_act_autoEntitlementRule_WO.changingAutoEntitlementRule_SequenceTop($autoEntRuleName);

/**
 * Create Account, Contact,Product and Installed Product
 */

var $productFamily = ["--None--","GeneralSolution","AdvSolution","Accessory", "Storage"];
var $productCode = "";

var $accountName = $bo_act_accounts.createAccount();
var $contactName = $bo_act_contacts.createContact($accountName);
var $productName = $bo_act_products.createProduct($productCode, $productFamily[0]);
var $IBName = $bo_act_installedProduct.createInstalledProduct($productName, $accountName, $contactName);

//Create Counter Rule
var $prodField = "Active";
var $operator = "Equals";
var $value = true;
var $counterName = "AutoEnt_CN";
var $type = "Increasing";
var $growsOrReducedBy = 5;
var $min = 10;
var $max = 100;
$counterRuleName = $bo_act_counterRule.createCunterRule($prodField, $operator, $value, $counterName, $type, $growsOrReducedBy, $min, $max);

//Changing the Rule Sequence
$bo_act_counterRule.changingCounterRule_SequenceTop($counterRuleName);

/**
 * Create SLA Terms
 */
var $slaName = $bo_act_slaTerms.createSlaTerms("Default");
$bo_act_slaTerms.addInitialResponseToSLA($slaName,"Case","All","High","Created Date","5","10","SLA");

//validation of SLA creation
_assertExists(_span($slaName));

/**
 * Create Service Contract(With child lines) and Activate it
 */
var $pastYear = 2;  // Start Date for Service Contract
var $futureYear = 2;  // End Date for Service Contract

// Creation of Service Contracts
var $serviceConractName = $bo_act_serviceMaintenanceContracts.createServiceMaintenanceContract($accountName,$slaName,$futureYear,$pastYear);

//Activating Created Service Contract
$bo_act_serviceMaintenanceContracts.activateServiceContract($serviceConractName);

// Add Covered Product to Service Contract 

var $pastYear = 3;  			// Start Date 'TODAY's' Date - 3 YEARS
var $futureYear = 3;			// End Date 'TODAY's' Date + 3 YEARS

$bo_act_serviceMaintenanceContracts.AddCoveredProducToServiceContract($serviceConractName, $IBName, $slaName, $pastYear, $futureYear);

//Add Entitled Contact to Service Contract 

$bo_act_serviceMaintenanceContracts.addEntitledContactsToServiceContract($serviceConractName, $contactName);


// Configure the "Coverage By Counters" on warranty Terms
$bo_act_navigation.navigateToServiceMaintenanceContractPage();
_click(_link($serviceConractName));
_wait(3000);
var $coverageStartsAt = 10;
var $countersCovered = 80;

$bo_act_warrantyTerms.createCoverageByCounters($coverageStartsAt, $countersCovered);

// update counter "Update Counters" on IB Record
$bo_act_navigation.navigateToCreatedRecordUsingGlobalSearch($IBName); 	//Navigate to Installed Product Page using global search
var $CurrentReading = 20;
$bo_act_warrantyTerms.updateCounters($CurrentReading);

//Create Support Case From IB record
var $status = "New";
var $priority = "High";
var $caseOrigin = "Email";
var $caseNumber = $bo_act_installedProduct.createSupportCaseFromIB($IBName,$status,$priority,$caseOrigin);

//Perform Auto Entitlement on Case Object Record
_click($bo_pg_Cases.btn_editCase);
if(_isChecked(_checkbox("Is Entitlement Performed"))){
	_logOutput("Auto Entitlement is Performed");
}
else{
	_click(_checkbox("Perform Auto Entitlement"));
	}
_click(_submit(" Save "));


//validation of Entitlement Parameters On Case

if(_isVisible(_image("Checked",_rightOf(_cell("/Is Entitlement Performed/"))))){
	_logOutput("Entitlement is Performed Successfully = PASS");
	}else{
	_fail("Entitlement is Not Performed = Failed");
	}

var $actual_scon = _getText(_link(0,_rightOf(_span("/Maintenance Contract/"))));
var $actual_EntitlementType = _getText(_div(0,_rightOf(_cell("/Entitlement Type/"))));
var $actual_BillingType = _getText(_div(0,_rightOf(_cell("/Billing Type/"))));
var $actual_AutoEntStatus = _getText(_div(0,_rightOf(_cell("/Auto Entitlement Status/"))));

_assertEqual($actual_scon,$serviceConractName,"Actual and Expected Service Comntract are not same");
_assertEqual($actual_AutoEntStatus,"Success","Actual and expected Auto Entitlement Status are not same");
_assertEqual($actual_EntitlementType,"AUTO","Actual and expected Entitlement Type are not same");
_assertEqual($actual_BillingType,"Contract","Actual and expected Billing Type are not same");

//Clean up function

$bo_act_autoEntitlementRule_Case.deleteAutoEntitlementRule_Case($autoEntRuleName);
$bo_act_counterRule.deleteCunterRule($counterRuleName);

$bo_act_login.logOut(); 

$RS_6348.end();