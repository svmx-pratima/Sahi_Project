//Tests are to be written here [Bhupendra Singh Chouhan]
//==============

//Pre - Condition Test Data
var $recordType = ["Depot","Depot Child","Depot Parent","Standard Location"];
var $productFamily = ["--None--","GeneralSolution","AdvSolution","Accessory", "Storage"];
var $productCode = "";

var $RS_11874 = _testcase("$RS_11874","AI - Verify the Reconcile API handling multiple fields like Product, Parent IB and Top-Level IB update on the IB record");
$RS_11874.start();
_setSpeed($g_stepSpeed);
/**
* Login to the Sandbox Org
*/

$bo_act_login.login($g_url, $bac_un, $bac_pwd);

//Added by Bhupendra Singh For APM Servicemax Integretion Testing
var $extRecID_Act1 = $bo_act_common.generateRandomName("Ext_A");
var $Account1 = $bo_act_accounts.createAccountWithExternalRecordID("APM_act_","APM Servicemax Integretion Testing Account 01",$extRecID_Act1);

//For location records
var $recordType = ["Depot","Depot Child","Depot Parent","Standard Location"];
var $extRecID_Loc1 = $bo_act_common.generateRandomName("Ext_L");
var $Location1 = $bo_act_locations.createLocationWithExternalRecordID("APM_loc_",$recordType[3],"","#07","India","Pune","560008",$extRecID_Loc1,$extRecID_Act1);

//For Products records
var $productName = $bo_act_products.createProduct($productCode, $productFamily[0]);
_click($bo_pg_products.btn_editProduct);
var $object = _textbox("External Record ID");
var $extRecID_Pro = $bo_act_common.generateRandomName("Ext_Pro");
$bo_act_products.updateTextBoxFields($object, $extRecID_Pro);
$bo_act_products.saveProduct();

//For Installed Products records
var $extRecID_IB1 = $bo_act_common.generateRandomName("Ext_IB");
var $IBName1 = $bo_act_installedProduct.createIBWithExternalRecordID("APM_IB_", $productName, $extRecID_IB1, $extRecID_Act1, $extRecID_Loc1, "", "", "Jaipur");
var $extRecID_IB2 = $bo_act_common.generateRandomName("Ext_IB");
var $IBName2 = $bo_act_installedProduct.createIBWithExternalRecordID("APM_IB_", $productName, $extRecID_IB2, $extRecID_Act1, $extRecID_Loc1, "", "", "Jaipur");
var $extRecID_IB3 = $bo_act_common.generateRandomName("Ext_IB");
var $IBName3 = $bo_act_installedProduct.createIBWithExternalRecordID("APM_IB_", $productName, $extRecID_IB3, $extRecID_Act1, $extRecID_Loc1, $extRecID_IB1, $extRecID_IB2, "Udaipur");
_click($bo_pg_products.btn_editProduct);
_setValue(_textbox("Product (External)"), $extRecID_Pro);
$bo_act_products.saveProduct();

// For POST Request 
var d = new Date(),
month = '' + (d.getMonth() + 1),
day = '' + (d.getDate()),
year = d.getFullYear();

if (month.length < 2) month = '0' + month;
if (day.length < 2) day = '0' + day;

var $new_dateworkorder =  [year, month, day].join('-');
_logOutput($new_dateworkorder);

var $CurrentDateTime = $new_dateworkorder+"T00:00:00Z";
var $POSTscript = "/services/apexrest/SVMXC/svmx/rest/IG/1.0/reconcile/";
var $requestBody = "{ "+"\""+"ReconcileDate"+"\""+": "+ "\""+$CurrentDateTime+"\"" +" } ";

var $Workbenchurl = "https://workbench.developerforce.com/login.php";

$bo_act_login.loginToWorkBench($Workbenchurl,"Sandbox", $bac_un, $bac_pwd);
$bo_act_login.runRESTExplorerInWB_ForPOST($POSTscript, $requestBody);
var $rawResponse = _getText(_paragraph("codeViewPort"));
_logOutput($rawResponse);
var $number =$rawResponse.split("\"JobId\":");
_logOutput($number[1]);
var $job_id = $number[1].split("\"");
_logOutput($job_id[1]);

// Verify the Status of the Job submitted
var $numb =$rawResponse.split("\"Status\":");
_logOutput($numb[1]);
var $job_Status = $numb[1].split("\"");
_logOutput($job_Status[1]);
_assertEqual("In-Progress",$job_Status[1],"Actual and Expected Job Status are not same" );


//For GET Request 
var $GETScript = "/services/apexrest/SVMXC/svmx/rest/IG/1.0/reconcile/getStatus/"+$job_id[1]+"/";
_logOutput($GETScript);
$bo_act_login.runRESTExplorerInWB_ForGet($GETScript);

var $rawResponseGet = _getText(_paragraph("codeViewPort"));
_logOutput($rawResponseGet);

//Job status for Installed Product Objects
var $getData = $rawResponseGet.split("\"Status\":");
_logOutput($getData[3]);
var $jobStatus_IB = $getData[3].split("\"");
_logOutput($jobStatus_IB[1]);
_assertEqual("Completed",$jobStatus_IB[1],"Actual and Expected Job Status for IB are not same" );

//Job status for Site Objects
_logOutput($getData[2]);
var $jobStatus_Site = $getData[2].split("\"");
_logOutput($jobStatus_Site[1]);
_assertEqual("Completed",$jobStatus_Site[1],"Actual and Expected Job Status for Site are not same" );

// Over All Job status for Reconciled Objects
_logOutput($getData[1]);
var $jobStatus_ReconciledObjects = $getData[1].split("\"");
_logOutput($jobStatus_ReconciledObjects[1]);
_assertEqual("Completed",$jobStatus_ReconciledObjects[1],"Actual and Expected Job Status for overall job are not same" );

$bo_act_login.login($g_url, $bac_un, $bac_pwd);

//Verify the Each Location records are updated with the Account values based on the external record ID mapping
$bo_act_installedProduct.openInstalledProductRecord($IBName3);
var $Actual_acct1 = _getText(_link("/APM_act_/",_rightOf(_cell("/Account/"))));
var $Actual_loc1 = _getText(_link("/APM_loc/",_rightOf(_cell("/Location/"))));
var $Actual_ParentIB = _getText(_link("/APM_IB/",_rightOf(_cell("/Parent/"))));
var $Actual_TopLevelIB = _getText(_link("/APM_IB/",_rightOf(_cell("/Top-Level/"))));
var $Actual_productIB = _getText(_link("/pro/",_rightOf(_cell("/Product/"))));

_assertEqual($Account1,$Actual_acct1,"Actual and Expected Account On IB record are not same");
_assertEqual($Location1,$Actual_loc1,"Actual and Expected Location On IB record are not same");
_assertEqual($IBName1,$Actual_ParentIB,"Actual and Expected Parent IB On IB record are not same");
_assertEqual($IBName2,$Actual_TopLevelIB,"Actual and Expected Top-Level IB On IB record are not same");
_assertEqual($productName,$Actual_productIB,"Actual and Expected Product On IB record are not same");
_click($bo_pg_installedProducts.btn_delete);
_wait(3000);


//Clean up function for Account
$bo_act_accounts.deleteAccount($Account1);

$bo_act_login.logOut(); 

$RS_11874.end();