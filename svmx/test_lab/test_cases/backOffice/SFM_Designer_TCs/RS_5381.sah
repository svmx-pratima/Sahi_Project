
var $RS_5381 = _testcase("RS_5381", "When there are 3 fields included for sorting (use picklist, Date, Number)");
$RS_5381.start();
_setSpeed($g_stepSpeed);

	var $sfmToBeCloned="manage work order lines - Usage";
	var $sfmName=$bo_act_common.generateRandomName("5381SFM");
	//change  the name of $sfmTemplateSaveAsName before execution to avoid any duplication.
	var $sfmTemplateSaveAsName=$bo_act_common.generateRandomName("5381Temp");

	var $objName="Work Order";
	var $wizardname=$bo_act_common.generateRandomName("5381SFW");
	var $wizardID=$wizardname;
	var $executionMode="Interactive";
	var $fieldActnType="SFM";
	var $actnName=$sfmName;
	var $stndSFMName=$sfmName;

	var $subTypeWO="Order Status";
	var $subTypePart="Date Received";
	var $subTypeActivityType="Activity Type";
	var $subTypeExpenses="Billable Qty";
	var $subTypeTravel="Consumed From Location";
	var $grtDate="11/11/2017";
	var $midDate="10/11/2017";
	var $lowDate="09/11/2017";
	var $billQty1="9";
	var $activityName1="Calibration";
	var $billQty2="2";
	var $activityName2="Installation";
	var $billQty3="5";
	var $activityName3="Cleanup";
	var $wizardButtonName=$sfmName;	
	
$bo_act_login.login($g_url, $bac_un, $bac_pwd);
//*****Navgate to SFm Designer and create clone of Manage WO Line Usage Services transaction********
$bo_act_navigation.navigateToSfmTransactionDesigner();
$bo_act_manageWOLineUsageForSorting.createManageWorkOrderLineUsageForSorting($sfmToBeCloned, $sfmName,$subTypeWO,$subTypePart,$subTypeActivityType,$subTypeExpenses,$subTypeTravel,$sfmTemplateSaveAsName);
$bo_act_manageWOLineUsageForSorting.sorting();

//****************** Create Locations for Travel lines **************************
var $recordType = ["Depot","Depot Child","Depot Parent","Standard Location"];
var $loc1 = $bo_act_locations.createLocationWithSpecificPrefix("Europe",$recordType[3],"","#007","India","560008");
var $loc2 = $bo_act_locations.createLocationWithSpecificPrefix("Autodromo",$recordType[3],"","#008","India","560009");
var $loc3 = $bo_act_locations.createLocationWithSpecificPrefix("Berlin",$recordType[3],"","#009","India","560010");

//*******Nagigate to SFM Wizard and Create Wizard and Add Above Transaction to it**********
$bo_act_navigation.navigateToSfmWizard();
$bo_act_SFW.createWizardGeneralInfo($objName,$wizardname,$wizardID);
$bo_act_SFW.createWizardStep($fieldActnType,$actnName,$executionMode);

//******Launch the SFM in delivery for WO object**************

$bo_act_sfmVerifyWorkOrder.verifyWizardOnWOObj($stndSFMName);
$bo_act_sfmVerifyWorkOrder.clkOnWizard($wizardButtonName);

//Fill the details of Work Line Usage in delivery and click Save
$bo_act_manageWOLineUsageForSorting.addPartLineInDelivery($grtDate,$midDate,$lowDate);
$bo_act_manageWOLineUsageForSorting.addExpensesLineInDelivery($billQty1,$activityName1,$billQty2,$activityName2,$billQty3,$activityName3,$loc1,$loc2,$loc3); // Modified By Bhupendra Singh
//$bo_act_manageWOLineUsageForSorting.addExpensesLineInDelivery($billQty1,$activityName1,$billQty2,$activityName2,$billQty3,$activityName3);
_click($bo_pg_manageWOLineUsageForSorting.btn_Save);

_log("The Manag Workorder Line Usage saved successfully");
$bo_act_sfmVerifyWorkOrder.clkOnWizard($wizardButtonName);
//Getting the value displayed under 1st 2nd and 3rd row of Part(Date Received) section and verify if it is sorted
_assertEqual($grtDate,_getText($bo_pg_manageWOLineUsageForSorting.txt_get1stLineValueOfPart),"Date are not matching So Sorting is not Working");
_assertEqual($midDate,_getText($bo_pg_manageWOLineUsageForSorting.txt_get2ndLineValueOfPart),"Date are not matching So Sorting is not Working");
_assertEqual($lowDate,_getText($bo_pg_manageWOLineUsageForSorting.txt_get3rdLineValueOfPart),"Date are not matching So Sorting is not Working");

//Getting the value displayed under 1st 2nd and 3rd row of Expenses(Activity Type) section and verify if it is sorted

_assertEqual( $activityName1,_getText($bo_pg_manageWOLineUsageForSorting.txt_get1stLineValueOfExpenses),"Expected Activity Type is not displaying");
_assertEqual ($activityName3,_getText($bo_pg_manageWOLineUsageForSorting.txt_get2ndLineValueOfExpenses),"Expected Activity Type is not displaying");
_assertEqual( $activityName2,_getText($bo_pg_manageWOLineUsageForSorting.txt_get3rdLineValueOfExpenses),"Expected Activity Type is not displaying");
//Fetch the billable Qty displayed under 1st,2nd and 3rd row and verify if sorted
var $actualbillQty1=Math.round(_getText($bo_pg_manageWOLineUsageForSorting.txt_getBillQty1));
var $actualbillQty2=Math.round(_getText($bo_pg_manageWOLineUsageForSorting.txt_getBillQty2));
var $actualbillQty3=Math.round(_getText($bo_pg_manageWOLineUsageForSorting.txt_getBillQty3));
_assertEqual( "9",$actualbillQty1,"Expected Billable is not displaying");
_assertEqual( "5",$actualbillQty2,"Expected Billable is not displaying");
_assertEqual( "2",$actualbillQty3,"Expected Billable is not displaying");
//Getting the value displayed under 1st 2nd and 3rd row of Travel(From Location) section and verify if it is sorted
_click($bo_pg_manageWOLineUsageForSorting.tab_travel);
_setStrictVisibilityCheck(true);
_assertEqual($loc2, _getText($bo_pg_manageWOLineUsageForSorting.txt_get1stLineValueOfTravel),"Expected From Location is not displaying");
_assertEqual($loc3, _getText($bo_pg_manageWOLineUsageForSorting.txt_get2ndLineValueOfTravel),"Expected From Location is not displaying");
_assertEqual($loc1, _getText($bo_pg_manageWOLineUsageForSorting.txt_get3rdLineValueOfTravel),"Expected From Location is not displaying");

//*****************Deleteing testdata************
$bo_act_navigation.navigateToSfmWizard();
_setSelected($bo_pg_sfmWizard.sel_objPrevMaintPlan,$objName	);
$bo_act_SFW.deleteWizard($wizardname);	
$bo_act_navigation.navigateToSfmTransactionDesigner();
$bo_act_SFM.deleteSFM($sfmName);
_setSpeed($g_stepSpeed);
$RS_5381.end();
