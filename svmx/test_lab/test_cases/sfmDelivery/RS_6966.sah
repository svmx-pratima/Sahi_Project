var $RS_6966 = _testcase("RS_6966","Field and Value maps for Source to Target Child SFM process");
$RS_6966.start();
//Variables used
var $objectName = "Work Order";
var $childObject = "Work Detail";
var $processName = "RS_6966";
var $process_to_clone = "Create Usage Lines from Estimates";
var $sfmTemplate = "SVMXSTD: Manage WO Usage Lines";
var $isCustom = false;
var $ctr = 0;
var $i = 0;
var $fieldsAbsentInPage = [];
var $lineType = "Parts";
var $initialChildFields = ["Line Type","Record Type ID","Line Number"];
var $initalChildContainers = [$lineType,$lineType,$lineType];
var $initialChildValues = [$lineType,"Usage/Consumption"];
var $productName = "Chrome";
var $additonalFields = ["Is Billable","Line Qty","Use Price From Pricebook/Contract","Date Received","Activity Type","Include in Quote","Start Date and Time","Billable Line Price"];
var $containerName = [$lineType,$lineType,$lineType,$lineType,$lineType,$lineType,$lineType,$lineType];
var $fieldsToMap = ["Is Billable","Line Qty","Use Price From Pricebook/Contract","Line Type","Date Received","Activity Type","Include in Quote","Start Date and Time","Billable Line Price"];
var $pageLayoutForProfile = "SVMX Work Details Estimate - Admin";
//Appending current timestamp to process name to make it unique.
var $timeStamp = $bo_act_navigation.getCurrentTimeStamp();
$processName = $processName + "_" + $timeStamp;
var $pageLayoutName = $processName + "pg";
var $mapName = $processName + "mp";
var $tempFields = ["Age"];
var $currentWizardName = $sfmd_wizardName[4];

//**************************************************************************************
//Login and switch to classic
$bo_act_login.login($g_url,$sfmdUsn,$sfmdPwd);

_wait(15000);

//Create work order
var $wo_number = $sfm_act_common.createWoInClassic();
var $sourceWlNumber = $sfm_act_common.createWorkDetail($lineType, "Estimate");
//Find missing fields in Work Order Page Layout and them to the layout
for($i=0;$i<$fieldsToMap.length;$i++){
	if(!$sfm_act_common.findIfFieldPresentInPageLayout($fieldsToMap[$i])){
		$fieldsAbsentInPage.push($fieldsToMap[$i]);
	}	
}
_log($fieldsAbsentInPage);

if($fieldsAbsentInPage.length > 0){
	$sfm_act_common.navigateToObjectsInClassic($childObject);
	$sfm_act_common.addFieldsToLightningPageLayout($objectName,$pageLayoutForProfile,$fieldsAbsentInPage);
}

//Enter values for Source child in order to verify field mapping at target child
var $textLabels = ["Billable Line Price","Date Received"];
var $textValues = ["6600","4/21/2018"];
var $pickListLabels = ["Activity Type"];
var $pickListValues = ["Calibration"];
var $textAreaLabels = [];
var $textAreaValues = [];
var $checkBoxLabels = ["Include in Quote"];
var $checkBoxValues = ["true"];
var $dateTimeLabels = ["Start Date and Time"];
var $dateTimeDateValues = ["4/11/2018"];
var $timeValues = ["3:30 PM"];
var $emailLabels = [];
var $emailValues = [];
var $multiPickLabels = [];
var $multiPickValues = [];
var $urlLabels = [];
var $urlValues = [];
var $telephoneLabels = [];
var $telephoneValues = [];
var $lookUpLabels = [];
var $lookUpValues = [];


$sfm_act_common.globalSearchOnce($sourceWlNumber);
$sfm_act_common.editWorkOrder($textLabels, $textValues, $pickListLabels, $pickListValues, $textAreaLabels, $textAreaValues, $checkBoxLabels, $checkBoxValues, $dateTimeLabels, $dateTimeDateValues, $timeValues,$emailLabels,$emailValues,$multiPickLabels,$multiPickValues,$urlLabels,$urlValues,$telephoneLabels,$telephoneValues,$lookUpLabels,$lookUpValues);

$sfm_act_common.logoutInClassic();
//Login and switch to lightning
$bo_act_login.login($g_url,$sfmdUsn,$sfmdPwd);

_wait(15000);

//**************************************************************************************************

//Navigate to servicemax setup and setup required process.
//Create new process from scratch
_setSpeed(3000);
$bo_act_navigation.navigateToSfmTransactionDesigner();
$sfm_act_SFM.selectSFM($process_to_clone,$isCustom);
_click($bo_pg_sfmTransactionAndDesigner.btn_clone);
_wait(2000);
_wait(60000, _isVisible($bo_pg_sfmTransactionAndDesigner.txt_name));
_setValue($bo_pg_sfmTransactionAndDesigner.txt_name, $processName);
_setValue($bo_pg_sfmTransactionAndDesigner.txt_sfmTransactionId,"");
_setValue($bo_pg_sfmTransactionAndDesigner.txt_sfmTransactionId,$processName);

_click($bo_pg_sfmTransactionAndDesigner.btn_screenDesigner);
_wait(6000);
_setSelected($bo_pg_sfmTransactionAndDesigner.sel_sfmTemplate,$sfmTemplate);
_wait(6000);
_click($bo_pg_sfmTransactionAndDesigner.btn_newPageLayout);
_click($bo_pg_sfmTransactionAndDesigner.txt_firstChildSection); 
_setValue($bo_pg_sfmTransactionAndDesigner.txt_sectionName,$lineType);
$bo_act_navigation.designHeaderScreen($pageLayoutName,$tempFields);
_wait(2000);
$bo_act_navigation.designChildScreen($pageLayoutName, $initialChildFields, $initalChildContainers);
_click(_f("main").s_richtext($lineType));
_click($bo_pg_sfmTransactionAndDesigner.chkbx_allowNew);
_click($bo_pg_sfmTransactionAndDesigner.chkbx_allowDelete);
_click($bo_pg_sfmTransactionAndDesigner.btn_savePage);
_click($bo_pg_sfmTransactionAndDesigner.btn_quickSave1);

//This process is cloned from a standard process and hence standard maps are used.

//Add the custom process to SFM wizard.
$sfm_act_wizards.addToWizard("Work Order",$currentWizardName,"SFM",$processName);

//Navigate to created work order and launch the process
$sfm_act_common.globalSearchOnce($wo_number);
//Launch the process in SFM Delivery
$sfm_act_common.launchSFMProcessInClassic($processName);
_wait(10000);

$sfm_act_SFM.addChildLine($lineType,$productName,[],[], [], [],[],[],[],[],[],[],[],[],[]);
$sfm_act_common.saveClassicSfmProcess();
_wait(14000,_isVisible($sfm_pg_wo.label_wo));
$sfm_act_common.sortRelatedList("Work Details", "Line Number", "Ascending");
//Get the line number of existing child line and verify value map for new records in child line
$sfm_act_common.navigateToLatestWorkDetail();
var $targetLineNumber = _getText(_heading2("/WL-/"));
_log("Work detail created as Target child is "+$targetLineNumber);

//Verify values for Target line created
var $textLabels = ["Line Qty"];
var $textValues = ["1.0000"];
var $pickListLabels = ["Line Type"];
var $pickListValues = [$lineType];
var $checkBoxLabels = ["Is Billable","Use Price From Pricebook/Contract"];
var $checkBoxValues = [true,true];
var $res1 = $sfm_act_common.verifyValues($textLabels, $textValues, $pickListLabels, $pickListValues, [], [], $checkBoxLabels, $checkBoxValues, [], [], [],[],[],[],[],[],[],[],[],[],[]);
var $recType = $sfm_act_common.getRecordType();
if($recType === "Usage/Consumption"){
	var $res2 = true;
}
else {
	var $res2 = false;
}
if($res1 && $res2){
	var $res = true;
}
_assertTrue($res);
if($res){
	_log("PASS: Value map for new records in Child has values as per value mapping in a source -> target child only process (fields not present in screen");
}
else {
	_log("FAIL:Value map for new records in Child does not have values as per value mapping in a source -> target child only process (fields not present in screen");
}


//Verify field map for existing records

$sfm_act_common.globalSearchOnce($sourceWlNumber);
var $textLabels = ["Billable Line Price","Date Received"];
var $textValues = ["6,600.000","4/21/2018"];
var $pickListLabels = ["Activity Type"];
var $pickListValues = ["Calibration"];
var $textAreaLabels = [];
var $textAreaValues = [];
var $checkBoxLabels = ["Include in Quote"];
var $checkBoxValues = ["true"];
var $dateTimeLabels = ["Start Date and Time"];
var $dateTimeDateValues = ["4/11/2018"];
var $timeValues = ["3:30 PM"];
var $emailLabels = [];
var $emailValues = [];
var $multiPickLabels = [];
var $multiPickValues = [];
var $urlLabels = [];
var $urlValues = [];
var $telephoneLabels = [];
var $telephoneValues = [];
var $lookUpLabels = [];
var $lookUpValues = [];
var $res1 = $sfm_act_common.verifyValues($textLabels, $textValues, $pickListLabels, $pickListValues, $textAreaLabels, $textAreaValues, $checkBoxLabels, $checkBoxValues, $dateTimeLabels, $dateTimeDateValues, $timeValues, $emailLabels, $emailValues, $lookUpLabels, $lookUpValues, $multiPickLabels, $multiPickValues, $urlLabels, $urlValues, $telephoneLabels, $telephoneValues);
var $recType = $sfm_act_common.getRecordType();
if($recType === "Estimate"){
	var $res2 = true;
}
else {
	var $res2 = false;
}
if($res1 && $res2){
	var $res = true;
}
else {
	var $res = false;
}
_assertTrue($res);
if($res){
	_log("PASS: Field map for existing records in Child has values as per value mapping in a source ) -> target child only process (fields not present in screen");
}
else {
	_log("FAIL:Field map for new records in Child does not have values as per value mapping in a source -> target child only process (fields not present in screen");
}

//Adding the respective fields in the Screen Designer tab.
$sfm_act_common.globalSearchOnce($wo_number);
$sfm_act_common.launchSFMProcessInClassic($processName);
$sfm_act_common.openSfmProcess($processName);
_click($bo_pg_sfmTransactionAndDesigner.btn_screenDesigner);
_wait(5000);
$bo_act_navigation.designChildScreen($pageLayoutName,$additonalFields,$containerName);
_wait(2000);
_click($bo_pg_sfmTransactionAndDesigner.btn_quickSave1);
_wait(2000);
_closeWindow();
_selectWindow();
$sfm_act_common.clearSvmxCache();
$sfm_act_SFM.addChildLine($lineType,$productName,[],[], [], [],[],[],[],[],[],[],[],[],[]);
//Verify value map in delivery for the newly added child line item
$textLabels =["Line Qty","Line Type","Record Type"];
$textValues = ["1",$lineType,"Usage/Consumption"];
$checkBoxLabels = ["Is Billable","Use Price From Pricebook"];
$checkBoxValues = [true,true];
$sfm_act_SFM.openLatestExtEdit();
$res = $sfm_act_common.verifyValuesInDelivery($textLabels, $textValues, [], [], [], [], $checkBoxLabels, $checkBoxValues, [], []);
$sfm_act_common.saveClassicSfmProcess();
_wait(14000,_isVisible($sfm_pg_wo.label_wo));
_assertTrue($res);
if($res){
	_log("PASS: Value map for new records in Child has values as per value mapping in a source ) -> target child only process (fields not present in screen");
}
else {
	_log("FAIL:Value map for new records in Child does not have values as per value mapping in a source -> target child only process (fields not present in screen");
}
$sfm_act_common.navigateToLatestWorkDetail();
var $targetLineNumber = _getText(_heading2("/WL-/"));
_log("Work detail created as Target child is "+$targetLineNumber);
//Verify value map for the new child record
$textLabels =["Line Qty"];
$textValues = ["1.0000"];
$pickListLabels =["Line Type"];
$pickListValues = [$lineType];
$checkBoxLabels = ["Is Billable","Use Price From Pricebook/Contract"];
$checkBoxValues = [true,true];
var $res1 = $sfm_act_common.verifyValues($textLabels, $textValues, [], [], [], [], $checkBoxLabels, $checkBoxValues, [], [], [],[],[],[],[],[],[],[],[],[],[]);
var $recType = $sfm_act_common.getRecordType();
if($recType === "Usage/Consumption"){
	var $res2 = true;
}
else {
	var $res2 = false;
}
if($res1 && $res2){
	var $res = true;
}
else{
	var $res = false;
}
_assertTrue($res);
if($res){
	_log("PASS: Value map for new records in Child has values as per value mapping in a source -> target child only process (fields not present in screen");
}
else {
	_log("FAIL:Value map for new records in Child does not have values as per value mapping in a source -> target child only process (fields not present in screen");
}

//Verify field map for existing child records
$sfm_act_common.globalSearchOnce($sourceWlNumber);
var $textLabels = ["Billable Line Price","Date Received"];
var $textValues = ["6,600.000","4/21/2018"];
var $pickListLabels = ["Activity Type"];
var $pickListValues = ["Calibration"];
var $textAreaLabels = [];
var $textAreaValues = [];
var $checkBoxLabels = ["Include in Quote"];
var $checkBoxValues = ["true"];
var $dateTimeLabels = ["Start Date and Time"];
var $dateTimeDateValues = ["4/11/2018"];
var $timeValues = ["3:30 PM"];
var $emailLabels = [];
var $emailValues = [];
var $multiPickLabels = [];
var $multiPickValues = [];
var $urlLabels = [];
var $urlValues = [];
var $telephoneLabels = [];
var $telephoneValues = [];
var $lookUpLabels = [];
var $lookUpValues = [];
var $res1 = $sfm_act_common.verifyValues($textLabels, $textValues, $pickListLabels, $pickListValues, $textAreaLabels, $textAreaValues, $checkBoxLabels, $checkBoxValues, $dateTimeLabels, $dateTimeDateValues, $timeValues, $emailLabels, $emailValues, $lookUpLabels, $lookUpValues, $multiPickLabels, $multiPickValues, $urlLabels, $urlValues, $telephoneLabels, $telephoneValues);
var $recType = $sfm_act_common.getRecordType();
if($recType === "Estimate"){
	var $res2 = true;
}
else {
	var $res2 = false;
}
if($res1 && $res2){
	var $res = true;
}
else{
	var $res = false;
}
_assertTrue($res);
if($res){
	_log("PASS: Field map for existing records in Child has values as per value mapping in a source ) -> target child only process (fields not present in screen");
}
else {
	_log("FAIL:Field map for new records in Child does not have values as per value mapping in a source -> target child only process (fields not present in screen");
}
_setSpeed($g_stepSpeed);
$RS_6966.end();