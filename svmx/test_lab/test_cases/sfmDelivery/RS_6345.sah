var $rs_6345 = _testcase("RS_6345","Verify Error type on Child when simple expressions is configured - Source to Target Save");
$rs_6345.start();
var $sfmNameToBeCloned = "Create Usage Lines from Estimates";
var $sfmName = $bo_act_common.generateRandomName("RS_6345_");
var $isCustom = false;
var $sfmTemplate = "SVMXSTD: Create Usage from Estimates";
var $sfmTemplateSaveAsName = $sfmName;
var $containerName = ["Parts","Expenses","Travel"];
var $fieldName=["Activity Type","Activity Type","Activity Type"];
var $targetObject ="Work Detail (Work Order)";
var $rulename =$sfmName;
var $ruleDescription ="Activity Type should not be Cleanup";

var $fieldArray = ["Activity Type"];
var $conditionArray = ["Equals"];
var $operandArray =["Value"];
var $valueArray =["Cleanup"];
var $advExpr= "";
var $messageType = "Error";
var $wizardObject ="Work Order";

//Create WO through REST API
var $woNumber = $sfm_act_createCustomWizard.createBlankWoFromRest($sfmdUsn, $sfmdPwd, $sfmClientId, $sfmConsumerSecret, $sfmOrgInstance);

//login
_setSpeed($g_stepSpeed);
$bo_act_login.login($g_url, $sfmdUsn, $sfmdPwd); 


//clone Source to Target Child Process
$sfm_act_SFM.cloneTDM016($sfmNameToBeCloned,$sfmName,$isCustom, $sfmTemplateSaveAsName,$sfmTemplate,$fieldName, $containerName);
$sfm_act_SFM.partsNotMandatory();

//create Data validation rule
$sfm_pg_dvr.newRule($targetObject, $rulename, $ruleDescription, $fieldArray, $conditionArray, $operandArray, $valueArray, $advExpr, $messageType);
_click($sfm_pg_sfmDesigner.btn_saveSFM); 

//add the process to wizard
$sfm_act_wizards.addToWizard($wizardObject, $sfmd_wizardName[0], $sfmd_wizardType[1], $sfmName);  

//Navigate to the WO for validation
$bo_act_navigation.navigateToCreatedRecordUsingGlobalSearch($woNumber);

$sfm_act_createCustomWizard.clickWizardBtn($sfmName);

//Validate that the DVR is triggering or not when condition is met
_click($sfm_pg_sfmDesigner.btn_deliveryPartsTab);
_click($sfm_pg_sfmDesigner.btn_deliveryAddRowParts);
_click($sfm_pg_sfmDesigner.btn_deliveryExtendedEdit);
_setValue($sfm_pg_sfmDesigner.txt_eeLineQty,"5");
_setValue($sfm_pg_sfmDesigner.txt_eeActivityType,"Cleanup");
_click($sfm_pg_sfmDesigner.btn_eeUpdate);
_wait(2000);

_click($sfm_pg_sfmDesigner.btn_deliverySave);
_assertExists(_div("Parts: "+$ruleDescription),"DVR Confirmation for child line is not working");

//Validate for DVR when condition is not met
_click($sfm_pg_sfmDesigner.btn_deliveryPartsTab);
_click($sfm_pg_sfmDesigner.btn_deliveryExtendedEdit);
_setValue($sfm_pg_sfmDesigner.txt_eeActivityType,"Calibration");
_click($sfm_pg_sfmDesigner.btn_eeUpdate);
_wait(2000);	
_click($sfm_pg_sfmDesigner.btn_deliverySave);
_assertNotVisible(_div("Parts: "+$ruleDescription), "DVR Confirmation for child line is triggered when not supposed to be");
if(_exists($sfm_pg_sfmDesigner.txt_priceAlert)){
	_click($sfm_pg_sfmDesigner.btn_priceAlertOk);
}
$rs_6345.end();