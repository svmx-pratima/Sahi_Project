var $RS_10316 = _testcase("RS_10316","Verify Dependent picklist's values when Controlling picklist is present in SFM process for header");
$RS_10316.start();

//Variables used
var $objectName = "Work Order";
var $wo_picklist = "Order Status";
var $processName = "RS_10316";
var $process_to_clone = "Manage Work Order Lines - Usage";
var $dependentPicklist = "Order Type";
var $ctrl_unique_values = ["Open","Closed"];
var $ctrl_picklist_values = ["Open","Open","Closed"];
var $dep_picklist_values = ["Depot Repair","Field Service","Field Service"];
var $ctr = 0;
var $fields_array = [];
$fields_array.push($wo_picklist);
$fields_array.push($dependentPicklist);
var $currentWizardName = $sfmd_wizardName[2];
var $success_message = "Work Order was saved.";

//Appending current timestamp to process name to make it unique.
var $timeStamp = $sfm_act_common.getCurrentTimeStamp();
$processName = $processName + "_" + $timeStamp;
var $pageLayoutName = $processName + "pg";
//Required when we set up a specific salesforce domain. Do not erase.
////var $myDomain = "/lightning/";
//**************************************************************************************
//Login and switch to lightning
//$bo_act_login.login($g_url,$bac_un,$bac_pwd);
$bo_act_login.login($g_url,$sfmdUsn,$sfmdPwd);

_wait(15000);

//Navigate to Object manager and navigate to work order object.
$sfm_act_common.navigateToObjectsInClassic($objectName);
_click(_link($wo_picklist));

//Delete existing dependencies and create new one.
if(_isVisible(_tableHeader($dependentPicklist,_under(_div("/Field Dependencies/"))))){
	_click(_link("Del",_leftOf(_tableHeader($dependentPicklist,_under(_div("/Field Dependencies/"))))));
}
_click($sfm_pg_commonSfdc.btn_new_field_dependency);
_setSelected($sfm_pg_commonSfdc.picklist_controller, $wo_picklist);
_setSelected($sfm_pg_commonSfdc.picklist_dependent, $dependentPicklist);
_click($sfm_pg_commonSfdc.btn_continue);
for(var $i=0;$i<$ctrl_picklist_values.length;$i++){
	$sfm_act_common.addDependentControllingPicklistValues($wo_picklist,$ctrl_picklist_values[$i],$dep_picklist_values[$i]);
}

_expectConfirm($sfm_pg_commonSfdc.btn_save_dep_picklist);
_click($sfm_pg_commonSfdc.btn_save_dep_picklist);
_selectDomain();



//Navigate to servicemax setup and setup required process.
    _setSpeed(3000);
	$bo_act_navigation.navigateToSfmTransactionDesigner();
	//_selectDomain();
	$sfm_act_SFM.selectSFM($process_to_clone,false);
	_click($bo_pg_sfmTransactionAndDesigner.btn_clone);
	_wait(60000, _isVisible($bo_pg_sfmTransactionAndDesigner.txt_name));
	_setValue($bo_pg_sfmTransactionAndDesigner.txt_name,$processName);
	_setValue($bo_pg_sfmTransactionAndDesigner.txt_sfmTransactionId,"");
	_setValue($bo_pg_sfmTransactionAndDesigner.txt_sfmTransactionId,$processName);
	_click($bo_pg_sfmTransactionAndDesigner.btn_finalQuickSave);
	_click($bo_pg_sfmTransactionAndDesigner.btn_proceed_anyways);
	_click($bo_pg_sfmTransactionAndDesigner.btn_qualifyingCriteriaAndFieldMapping);
	//Edit existing Qualification criteria to support closed work orders as per test case.
	//No separate function written as this is a one time setup.
	_click($bo_pg_sfmTransactionAndDesigner.btn_newLineForQc);
	_setSelected(_f("main").s_combobox("fieldCombo[1]"), "Order Status");
	_setSelected(_f("main").s_combobox("valuesCombo[1]"), "Closed");
	_setValue($bo_pg_sfmTransactionAndDesigner.txt_sfmSavePageLayoutAsId, "1 OR 2");
	_setValue($bo_pg_sfmTransactionAndDesigner.txt_saveExprAs, $processName);;
	_setValue($bo_pg_sfmTransactionAndDesigner.txt_inputIdAs, $processName);
	_click($bo_pg_sfmTransactionAndDesigner.btn_saveAsExpr);
	_wait(5000);
	_assertVisible($bo_pg_sfmTransactionAndDesigner.label_exprSaved);
	_click($bo_pg_sfmTransactionAndDesigner.btn_quickSave1);
	if(_condition(_isVisible($bo_pg_sfmTransactionAndDesigner.btn_proceed_anyways))){
		_click($bo_pg_sfmTransactionAndDesigner.btn_proceed_anyways);
	}
	_assertVisible($bo_pg_sfmTransactionAndDesigner.label_sfmTxnSaved);
	_click($bo_pg_sfmTransactionAndDesigner.btn_screenDesigner);
	_click($bo_pg_sfmTransactionAndDesigner.btn_newPageLayout);
	$bo_act_navigation.designHeaderScreen($pageLayoutName, $fields_array);
	_click($bo_pg_sfmTransactionAndDesigner.btn_finalQuickSave);
	$sfm_act_wizards.addToWizard($objectName,$currentWizardName,"SFM",$processName);
	_selectDomain();
	//test from here.
	var $wo_number = $sfm_act_common.createWoInClassic()
	_selectDomain();
	//Launch SFM delivery

	$sfm_act_common.globalSearchOnce($wo_number);
	$sfm_act_common.launchSFMProcessInClassic($processName);
	for($z=0;$z<$ctrl_unique_values.length;$z++){
			var $actual_list = [];
			//Verify the count of values first
			_wait(4000);
			_click(_div("/svmx-trigger/",_near(_label("/"+$wo_picklist+"/"))));
			_click(_listItem($ctrl_unique_values[$z]));
        _wait(1000);
        _click(_div("/svmx-trigger/",_near(_label("/"+$dependentPicklist+"/"))));
		var $no_of_values = _collect("_listItem", "/.*/", _under(_div("/"+$dependentPicklist+"/")));
		
		for($ctr = 1;$ctr < $no_of_values.length;$ctr++ ){
			$actual_list.push(_getText($no_of_values[$ctr]));
		}
		_log("Actual values "+$actual_list);
		var $expected_list = [];
		//Verify the values one by one.

		 var $i = 0;var $j = 0;
		 for ($j=0;$j<$ctrl_picklist_values.length;$j++) {
		 	if($ctrl_picklist_values[$j] === $ctrl_unique_values[$z]) {
		 		$i = $i+1;
		 		$expected_list.push($dep_picklist_values[$j]);
		 	}
		 }
		 _log("Expected values "+$expected_list);
		if(_assertEqualArrays($expected_list, $actual_list)){
			_log("PASS: RS_10316 - Dependent picklist values for header when controlling picklist is present - verified ");
		}
		else {
			_log("FAIL: RS_10316 - Dependent picklist values for header when controlling picklist is present - not verified");
		}
	}
		$sfm_act_common.saveClassicSfmProcess();
	
		
		_wait(4000);
		$sfm_act_common.logoutInClassic();
		_setSpeed($g_stepSpeed);		
$RS_10316.end();