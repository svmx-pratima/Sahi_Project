
/** 
 * <div>
 *   <h3>_jvOrVButton</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrVButton(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_button</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_button" Label=null
 *  Name="VButton_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Label, Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrVButton in the UI and 2nd jvOrVButton with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrVButton("VButton_name")
 * //Index
 * _jvOrVButton(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrVButton(, _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrVButton(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrVButton("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Label (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _click <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_click(_jvOrVButton());
 * _click(_jvOrVButton("/bigfont/[1]", _rightOf(_span("Name"))));</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrVButton("VButton_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrVButton("VButton_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrVButton($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrLWLabel</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrLWLabel(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_label</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_label" Name="LWLabel_name"
 *  Text=null
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Text, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrLWLabel in the UI and 2nd jvOrLWLabel with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrLWLabel("LWLabel_name")
 * //Index
 * _jvOrLWLabel(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrLWLabel("LWLabel_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrLWLabel(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrLWLabel("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Text (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setValue <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setValue(_jvOrLWLabel("LWLabel_name"), null);
 * _setValue(_jvOrLWLabel("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrLWLabel("LWLabel_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrLWLabel("LWLabel_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrLWLabel($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrMultiLineLabel</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrMultiLineLabel(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_label</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_label" Name="MultiLineLabel_name"
 *  Text=null
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Text, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrMultiLineLabel in the UI and 2nd jvOrMultiLineLabel with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrMultiLineLabel("MultiLineLabel_name")
 * //Index
 * _jvOrMultiLineLabel(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrMultiLineLabel("MultiLineLabel_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrMultiLineLabel(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrMultiLineLabel("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Text (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setValue <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setValue(_jvOrMultiLineLabel("MultiLineLabel_name"), null);
 * _setValue(_jvOrMultiLineLabel("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrMultiLineLabel("MultiLineLabel_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrMultiLineLabel("MultiLineLabel_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrMultiLineLabel($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrVTextField</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrVTextField(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_text</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_text" Name="VTextField_name"
 *  Text=null
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Text, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrVTextField in the UI and 2nd jvOrVTextField with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrVTextField("VTextField_name")
 * //Index
 * _jvOrVTextField(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrVTextField("VTextField_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrVTextField(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrVTextField("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Text (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setValue <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setValue(_jvOrVTextField("VTextField_name"), null);
 * _setValue(_jvOrVTextField("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrVTextField("VTextField_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrVTextField("VTextField_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrVTextField($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrFLWTextArea</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrFLWTextArea(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_text</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_text" Name="FLWTextArea_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrFLWTextArea in the UI and 2nd jvOrFLWTextArea with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrFLWTextArea("FLWTextArea_name")
 * //Index
 * _jvOrFLWTextArea(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrFLWTextArea("FLWTextArea_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrFLWTextArea(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrFLWTextArea("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Text (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setValue <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setValue(_jvOrFLWTextArea("FLWTextArea_name"), null);
 * _setValue(_jvOrFLWTextArea("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrFLWTextArea("FLWTextArea_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrFLWTextArea("FLWTextArea_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrFLWTextArea($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrExtendedCheckbox</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrExtendedCheckbox(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_button</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_button" Name="ExtendedCheckbox_name"
 *  Label=null
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Label, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrExtendedCheckbox in the UI and 2nd jvOrExtendedCheckbox with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrExtendedCheckbox("ExtendedCheckbox_name")
 * //Index
 * _jvOrExtendedCheckbox(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrExtendedCheckbox("ExtendedCheckbox_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrExtendedCheckbox(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrExtendedCheckbox("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>State (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _click <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_click(_jvOrExtendedCheckbox("ExtendedCheckbox_name"));
 * _click(_jvOrExtendedCheckbox("/bigfont/[1]", _rightOf(_span("Name"))));</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrExtendedCheckbox("ExtendedCheckbox_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrExtendedCheckbox("ExtendedCheckbox_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrExtendedCheckbox($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrButton</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrButton(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_button</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_button" Label=null
 *  Name="Button_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Label, Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrButton in the UI and 2nd jvOrButton with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrButton("Button_name")
 * //Index
 * _jvOrButton(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrButton(, _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrButton(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrButton("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Label (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _click <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_click(_jvOrButton());
 * _click(_jvOrButton("/bigfont/[1]", _rightOf(_span("Name"))));</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrButton("Button_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrButton("Button_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrButton($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrLWScrollbar</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrLWScrollbar(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_scroll</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_scroll" Name="LWScrollbar_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrLWScrollbar in the UI and 2nd jvOrLWScrollbar with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrLWScrollbar("LWScrollbar_name")
 * //Index
 * _jvOrLWScrollbar(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrLWScrollbar("LWScrollbar_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrLWScrollbar(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrLWScrollbar("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Value (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setValue <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setValue(_jvOrLWScrollbar("LWScrollbar_name"), "apple");
 * _setValue(_jvOrLWScrollbar("/bigfont/[1]", _rightOf(_span("Name"))), "apple");</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrLWScrollbar("LWScrollbar_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrLWScrollbar("LWScrollbar_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrLWScrollbar($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrFormsTabPanel</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrFormsTabPanel(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: list</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="list" Name="FormsTabPanel_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrFormsTabPanel in the UI and 2nd jvOrFormsTabPanel with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrFormsTabPanel("FormsTabPanel_name")
 * //Index
 * _jvOrFormsTabPanel(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrFormsTabPanel("FormsTabPanel_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrFormsTabPanel(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrFormsTabPanel("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td> (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrFormsTabPanel("FormsTabPanel_name"), null);
 * _setSelected(_jvOrFormsTabPanel("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrFormsTabPanel("FormsTabPanel_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrFormsTabPanel("FormsTabPanel_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrFormsTabPanel($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrLWCheckbox</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrLWCheckbox(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_button</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_button" Name="LWCheckbox_name"
 *  Label=null
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Label, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrLWCheckbox in the UI and 2nd jvOrLWCheckbox with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrLWCheckbox("LWCheckbox_name")
 * //Index
 * _jvOrLWCheckbox(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrLWCheckbox("LWCheckbox_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrLWCheckbox(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrLWCheckbox("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>State (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _click <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_click(_jvOrLWCheckbox("LWCheckbox_name"));
 * _click(_jvOrLWCheckbox("/bigfont/[1]", _rightOf(_span("Name"))));</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrLWCheckbox("LWCheckbox_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrLWCheckbox("LWCheckbox_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrLWCheckbox($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrVPopList</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrVPopList(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_combo</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_combo" Name="VPopList_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrVPopList in the UI and 2nd jvOrVPopList with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrVPopList("VPopList_name")
 * //Index
 * _jvOrVPopList(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrVPopList("VPopList_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrVPopList(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrVPopList("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>SelectedItem (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrVPopList("VPopList_name"), null);
 * _setSelected(_jvOrVPopList("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrVPopList("VPopList_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrVPopList("VPopList_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrVPopList($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrToolBar</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrToolBar(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_pane</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_pane" Name="ToolBar_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrToolBar in the UI and 2nd jvOrToolBar with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrToolBar("ToolBar_name")
 * //Index
 * _jvOrToolBar(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrToolBar("ToolBar_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrToolBar(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrToolBar("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td> (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrToolBar("ToolBar_name"), null);
 * _setSelected(_jvOrToolBar("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrToolBar("ToolBar_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrToolBar("ToolBar_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrToolBar($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrLWMenuSeparator</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrLWMenuSeparator(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_button</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_button" Name="LWMenuSeparator_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrLWMenuSeparator in the UI and 2nd jvOrLWMenuSeparator with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrLWMenuSeparator("LWMenuSeparator_name")
 * //Index
 * _jvOrLWMenuSeparator(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrLWMenuSeparator("LWMenuSeparator_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrLWMenuSeparator(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrLWMenuSeparator("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td> (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _click <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_click(_jvOrLWMenuSeparator("LWMenuSeparator_name"));
 * _click(_jvOrLWMenuSeparator("/bigfont/[1]", _rightOf(_span("Name"))));</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrLWMenuSeparator("LWMenuSeparator_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrLWMenuSeparator("LWMenuSeparator_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrLWMenuSeparator($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrLWMenuItem</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrLWMenuItem(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_button</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_button" Name="LWMenuItem_name"
 *  Label=null
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Label, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrLWMenuItem in the UI and 2nd jvOrLWMenuItem with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrLWMenuItem("LWMenuItem_name")
 * //Index
 * _jvOrLWMenuItem(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrLWMenuItem("LWMenuItem_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrLWMenuItem(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrLWMenuItem("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Label (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _click <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_click(_jvOrLWMenuItem("LWMenuItem_name"));
 * _click(_jvOrLWMenuItem("/bigfont/[1]", _rightOf(_span("Name"))));</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrLWMenuItem("LWMenuItem_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrLWMenuItem("LWMenuItem_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrLWMenuItem($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrLWMenuBar</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrLWMenuBar(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_pane</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_pane" Name="LWMenuBar_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrLWMenuBar in the UI and 2nd jvOrLWMenuBar with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrLWMenuBar("LWMenuBar_name")
 * //Index
 * _jvOrLWMenuBar(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrLWMenuBar("LWMenuBar_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrLWMenuBar(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrLWMenuBar("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td> (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrLWMenuBar("LWMenuBar_name"), null);
 * _setSelected(_jvOrLWMenuBar("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrLWMenuBar("LWMenuBar_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrLWMenuBar("LWMenuBar_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrLWMenuBar($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrDrawnPanel</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrDrawnPanel(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_pane</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_pane" Name="DrawnPanel_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrDrawnPanel in the UI and 2nd jvOrDrawnPanel with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrDrawnPanel("DrawnPanel_name")
 * //Index
 * _jvOrDrawnPanel(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrDrawnPanel("DrawnPanel_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrDrawnPanel(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrDrawnPanel("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td> (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrDrawnPanel("DrawnPanel_name"), null);
 * _setSelected(_jvOrDrawnPanel("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrDrawnPanel("DrawnPanel_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrDrawnPanel("DrawnPanel_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrDrawnPanel($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrFormattedTextField</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrFormattedTextField(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_text</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_text" Name="FormattedTextField_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrFormattedTextField in the UI and 2nd jvOrFormattedTextField with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrFormattedTextField("FormattedTextField_name")
 * //Index
 * _jvOrFormattedTextField(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrFormattedTextField("FormattedTextField_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrFormattedTextField(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrFormattedTextField("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Text (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setValue <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setValue(_jvOrFormattedTextField("FormattedTextField_name"), null);
 * _setValue(_jvOrFormattedTextField("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrFormattedTextField("FormattedTextField_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrFormattedTextField("FormattedTextField_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrFormattedTextField($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrFormButton</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrFormButton(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_button</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_button" Label=null
 *  Name="FormButton_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Label, Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrFormButton in the UI and 2nd jvOrFormButton with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrFormButton("FormButton_name")
 * //Index
 * _jvOrFormButton(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrFormButton(, _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrFormButton(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrFormButton("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Label (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _click <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_click(_jvOrFormButton());
 * _click(_jvOrFormButton("/bigfont/[1]", _rightOf(_span("Name"))));</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrFormButton("FormButton_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrFormButton("FormButton_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrFormButton($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrTitleBar</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrTitleBar(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_label</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_label" Name="TitleBar_name"
 *  Text=null
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Text, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrTitleBar in the UI and 2nd jvOrTitleBar with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrTitleBar("TitleBar_name")
 * //Index
 * _jvOrTitleBar(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrTitleBar("TitleBar_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrTitleBar(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrTitleBar("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Value (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setValue <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setValue(_jvOrTitleBar("TitleBar_name"), "apple");
 * _setValue(_jvOrTitleBar("/bigfont/[1]", _rightOf(_span("Name"))), "apple");</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrTitleBar("TitleBar_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrTitleBar("TitleBar_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrTitleBar($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrEwtContainer</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrEwtContainer(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_pane</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_pane" Name="EwtContainer_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrEwtContainer in the UI and 2nd jvOrEwtContainer with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrEwtContainer("EwtContainer_name")
 * //Index
 * _jvOrEwtContainer(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrEwtContainer("EwtContainer_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrEwtContainer(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrEwtContainer("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td> (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrEwtContainer("EwtContainer_name"), null);
 * _setSelected(_jvOrEwtContainer("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrEwtContainer("EwtContainer_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrEwtContainer("EwtContainer_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrEwtContainer($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrFWindow</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrFWindow(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_pane</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_pane" Name="FWindow_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrFWindow in the UI and 2nd jvOrFWindow with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrFWindow("FWindow_name")
 * //Index
 * _jvOrFWindow(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrFWindow("FWindow_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrFWindow(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrFWindow("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td> (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrFWindow("FWindow_name"), null);
 * _setSelected(_jvOrFWindow("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrFWindow("FWindow_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrFWindow("FWindow_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrFWindow($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrButtonBar</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrButtonBar(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_pane</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_pane" Name="ButtonBar_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrButtonBar in the UI and 2nd jvOrButtonBar with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrButtonBar("ButtonBar_name")
 * //Index
 * _jvOrButtonBar(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrButtonBar("ButtonBar_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrButtonBar(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrButtonBar("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td> (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrButtonBar("ButtonBar_name"), null);
 * _setSelected(_jvOrButtonBar("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrButtonBar("ButtonBar_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrButtonBar("ButtonBar_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrButtonBar($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrPushButton</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrPushButton(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_button</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_button" Label=null
 *  Name="PushButton_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Label, Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrPushButton in the UI and 2nd jvOrPushButton with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrPushButton("PushButton_name")
 * //Index
 * _jvOrPushButton(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrPushButton(, _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrPushButton(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrPushButton("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Label (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _click <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_click(_jvOrPushButton());
 * _click(_jvOrPushButton("/bigfont/[1]", _rightOf(_span("Name"))));</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrPushButton("PushButton_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrPushButton("PushButton_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrPushButton($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrLWTextField</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrLWTextField(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_text</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_text" Name="LWTextField_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrLWTextField in the UI and 2nd jvOrLWTextField with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrLWTextField("LWTextField_name")
 * //Index
 * _jvOrLWTextField(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrLWTextField("LWTextField_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrLWTextField(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrLWTextField("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Text (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setValue <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setValue(_jvOrLWTextField("LWTextField_name"), null);
 * _setValue(_jvOrLWTextField("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrLWTextField("LWTextField_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrLWTextField("LWTextField_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrLWTextField($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrVTList</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrVTList(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: list</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="list" Name="VTList_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrVTList in the UI and 2nd jvOrVTList with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrVTList("VTList_name")
 * //Index
 * _jvOrVTList(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrVTList("VTList_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrVTList(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrVTList("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Label (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrVTList("VTList_name"), null);
 * _setSelected(_jvOrVTList("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrVTList("VTList_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrVTList("VTList_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrVTList($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrListView</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrListView(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: list</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="list" Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrListView in the UI and 2nd jvOrListView with class "shaded bigfont")<br/>
 * <pre><code>//Index
 * _jvOrListView(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrListView(5, _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrListView(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrListView("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td> (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrListView(5), null);
 * _setSelected(_jvOrListView("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrListView("ListView_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrListView("ListView_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrListView($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrExtendedFrame</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrExtendedFrame(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_pane</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_pane" Name="ExtendedFrame_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrExtendedFrame in the UI and 2nd jvOrExtendedFrame with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrExtendedFrame("ExtendedFrame_name")
 * //Index
 * _jvOrExtendedFrame(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrExtendedFrame("ExtendedFrame_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrExtendedFrame(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrExtendedFrame("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td> (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrExtendedFrame("ExtendedFrame_name"), null);
 * _setSelected(_jvOrExtendedFrame("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrExtendedFrame("ExtendedFrame_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrExtendedFrame("ExtendedFrame_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrExtendedFrame($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrLWContainer</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrLWContainer(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_pane</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_pane" Name="LWContainer_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrLWContainer in the UI and 2nd jvOrLWContainer with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrLWContainer("LWContainer_name")
 * //Index
 * _jvOrLWContainer(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrLWContainer("LWContainer_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrLWContainer(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrLWContainer("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td> (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrLWContainer("LWContainer_name"), null);
 * _setSelected(_jvOrLWContainer("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrLWContainer("LWContainer_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrLWContainer("LWContainer_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrLWContainer($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrFormDesktopContainer</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrFormDesktopContainer(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_pane</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_pane" Name="FormDesktopContainer_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrFormDesktopContainer in the UI and 2nd jvOrFormDesktopContainer with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrFormDesktopContainer("FormDesktopContainer_name")
 * //Index
 * _jvOrFormDesktopContainer(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrFormDesktopContainer("FormDesktopContainer_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrFormDesktopContainer(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrFormDesktopContainer("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td> (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrFormDesktopContainer("FormDesktopContainer_name"), null);
 * _setSelected(_jvOrFormDesktopContainer("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrFormDesktopContainer("FormDesktopContainer_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrFormDesktopContainer("FormDesktopContainer_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrFormDesktopContainer($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrImageCanvas</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrImageCanvas(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_pane</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_pane" Name="ImageCanvas_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrImageCanvas in the UI and 2nd jvOrImageCanvas with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrImageCanvas("ImageCanvas_name")
 * //Index
 * _jvOrImageCanvas(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrImageCanvas("ImageCanvas_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrImageCanvas(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrImageCanvas("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td> (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setSelected <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setSelected(_jvOrImageCanvas("ImageCanvas_name"), null);
 * _setSelected(_jvOrImageCanvas("/bigfont/[1]", _rightOf(_span("Name"))), null);</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrImageCanvas("ImageCanvas_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrImageCanvas("ImageCanvas_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrImageCanvas($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrEwtLWScrollbar</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrEwtLWScrollbar(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_scroll</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_scroll" Name="EwtLWScrollbar_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrEwtLWScrollbar in the UI and 2nd jvOrEwtLWScrollbar with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrEwtLWScrollbar("EwtLWScrollbar_name")
 * //Index
 * _jvOrEwtLWScrollbar(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrEwtLWScrollbar("EwtLWScrollbar_name", _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrEwtLWScrollbar(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrEwtLWScrollbar("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Value (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _setValue <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_setValue(_jvOrEwtLWScrollbar("EwtLWScrollbar_name"), "apple");
 * _setValue(_jvOrEwtLWScrollbar("/bigfont/[1]", _rightOf(_span("Name"))), "apple");</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrEwtLWScrollbar("EwtLWScrollbar_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrEwtLWScrollbar("EwtLWScrollbar_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrEwtLWScrollbar($identifier, $relation1, $relation2){}
/** 
 * <div>
 *   <h3>_jvOrLWDataSourceList</h3>
 * Since Sahi Pro: NA <br/>
 * Since Sahi OS: NA  <br/>
 * <br/>
 *   <table>
 *   <tr><td>API</td><td>_jvOrLWDataSourceList(identifier [, relation1 [, relation2 ...]])</td></tr>
 *   <tr><td>Tag</td><td>Tag:  of type: o_button</td></tr>
 *   <tr><td>HTML</td><td><pre><code>&lt;null type="o_button" Label=null
 *  Name="LWDataSourceList_name"
 *  Index=5
 *  &gt;</code></pre></td></tr>
 *   <tr><td>Identifiers</td><td>Label, Name, Index<br/>
 * <br/>
 * Valid Accessors and alternatives: (Assume this is the 6th jvOrLWDataSourceList in the UI and 2nd jvOrLWDataSourceList with class "shaded bigfont")<br/>
 * <pre><code>//Name
 * _jvOrLWDataSourceList("LWDataSourceList_name")
 * //Index
 * _jvOrLWDataSourceList(5)
 * // Use sahiIndex for index, className for class and sahiText for visible text attributes.</code></pre>
 * </td></tr>
 *  <tr><td>Relations</td><td>
 * Relational APIs _in, _near, _leftOf, _rightOf, _under, _above can be used.<br/>
 * <img src="../assets/images/common/relations_sample.png" style="float:right;margin:20px 10px 0px 0px;"/>
 * <br/>
 * <pre><code>// with _in
 * _jvOrLWDataSourceList(, _in(_div("Container")))
 * 
 * // index with 2 relational APIs, _rightOf and _under
 * _jvOrLWDataSourceList(0, _rightOf(_span("Name")), _under(_cell("Action")))
 * 
 * // with regular expression and relations
 * _jvOrLWDataSourceList("/bigfont/", _rightOf(_span("Name")), _under(_cell("Action")))</code></pre>
 * <br/>
 * </td></tr>
 *   <tr><td>Value</td><td>Label (this is the default attribute used in assertions etc.)</td></tr>
 *   <tr><td>Actions</td><td>
 *   Default event recorded is _click <br/>
 *   <br/>
 *   Example usage:<br/>
 * <br/>
 *   <pre><code>_click(_jvOrLWDataSourceList());
 * _click(_jvOrLWDataSourceList("/bigfont/[1]", _rightOf(_span("Name"))));</code></pre>
 * <br/>
 *   </td></tr>
 *   <tr><td>Assertions</td><td>
 *   Example assertions: <br/>
 * <br/>
 *   <pre><code>// Check if element exists
 * _assertExists(_jvOrLWDataSourceList("LWDataSourceList_id"));
 * // Check if element is visible
 * _assert(_isVisible(_jvOrLWDataSourceList("LWDataSourceList_id")));</code></pre>
 * <br/>
 *   </td></tr>
 *   </table>
 * </div>
 * <br/>
 * @param {string} $identifier index, value, name, id<br/>
 * @param {relationObj} [$domRelation] _in, _near, _under, _leftOf, _rightOf or any other relation API<br/>
 * @returns {HTMLElement} A handle to html element<br/>
 * <br/>
 **/
 function _jvOrLWDataSourceList($identifier, $relation1, $relation2){}/**
 * 
 * If <code>_setAccessorIgnoreCase(true)</code> is called, on further statements, case differences will be ignored in identifiers of Accessors.<br/>
 * <br/>
 * Given a link with text "Home", <code>_link("Home")</code> will identify the element,<br/>
 * but not <code>_link("HOME")</code> or <code>_link("home")</code>.<br/>
 * <br/>
 * If <code>_setAccessorIgnoreCase(true)</code> is called,<br/>
 * Then the same element can be identified using <code>_link("Home")</code>, <code>_link("HOME")</code> or <code>_link("home")</code><br/>
 * <br/>
 * Eg.<br/>
 * <pre><code>_assertExists(_link("Home")); // SUCCESS
 * _assertExists(_link("HOME")); // <span class='code-highlight'>FAILURE</span>
 * _assertExists(_link("/home/")); // <span class='code-highlight'>FAILURE</span>
 * 
 * <span class='code-highlight'>_setAccessorIgnoreCase(true);</span>
 * _assertExists(_link("Home")); // SUCCESS
 * _assertExists(_link("HOME")); // <span class='code-highlight'>SUCCESS</span>
 * _assertExists(_link("/home/")); // <span class='code-highlight'>SUCCESS</span>
 * 
 * <span class='code-highlight'>_setAccessorIgnoreCase(false);</span>
 * _assertExists(_link("Home")); // SUCCESS
 * _assertExists(_link("HOME")); // <span class='code-highlight'>FAILURE</span>
 * _assertExists(_link("/home/")); // <span class='code-highlight'>FAILURE</span></code></pre>
 * <info>
 * The default value of _setAccessorIgnoreCase is false. It can be forced to be true by default by adding<br/>
 * <pre><code>sahi.accessor.ignore_case=true</code></pre>
 * to <code>sahi/userdata/config/userdata.properties</code><br/>
 * </info>
 * <br/>
 * 
 * @param {boolean} $isIgnore - true or false
 * 
 */
 function _setAccessorIgnoreCase ($isIgnore){}
/**
 * 
 * Specifies the coordinates on element where the event should be fired.<br/>
 * <br/>
 * Eg. <code>_click(_xy(_button("id"), 10, 20))</code> clicks inside the button, 10px from the left and 20 pixels from the top.<br/>
 * <br/>
 * Negative values can be given to specify offset from right and bottom.<br/>
 * Eg. <code>_click(_xy(_button("id"), -5, -10))</code> clicks inside the button, 5px from the right and 10px from the bottom.<br/>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - Element within which we want to perform the mouse action
 * @param {integer} $x - x co-ordinate in pixels
 * @param {integer} $y - y co-ordinate in pixels
 * 
 */
 function _xy ($element, $x, $y){}
/**
 * 
 * _click simulates a user's click on the given element.<br/>
 * <pre><code>_click(_button("Click Me"));
 * _click(_button("Click Me"), "CTRL"); // clicks with CTRL key pressed
 * _click(_button("Click Me"), "CTRL|SHIFT"); // clicks with CTRL and SHIFT keys pressed
 * 
 * // With _xy
 * _click(_xy(_button("Click Me"),4,5)); // Click at coordinates 4,5 pixels inside the button</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element to click on
 * @param {string} $combo - Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"<br/>This argument is applicable only for Browser mode
 * 
 */
 function _click ($element, $combo){}
/**
 * 
 * _doubleClick simulates a user's click on the given element.<br/>
 * <pre><code>_doubleClick(_button("DblClick Me"));
 * _doubleClick(_button("DblClick Me"), "CTRL"); // double clicks with CTRL key pressed
 * _doubleClick(_button("DblClick Me"), "CTRL|SHIFT"); // double clicks with CTRL and SHIFT keys pressed
 * 
 * // With _xy
 * _doubleClick(_xy(_button("DblClick Me"),4,5)); // double click at coordinates 4,5 pixels inside the button</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element to double click on
 * @param {string} $combo - Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"<br/>This argument is applicable only for Browser mode
 * 
 */
 function _doubleClick ($element, $combo){}
/**
 * 
 * _rightClick simulates a user's click on the given element.<br/>
 * <pre><code>_rightClick(_button("Right Click Me"));
 * _rightClick(_button("Right Click Me"), "CTRL"); // right clicks with CTRL key pressed
 * _rightClick(_button("Right Click Me"), "CTRL|SHIFT"); // right clicks with CTRL and SHIFT keys pressed
 * 
 * // With _xy
 * _rightClick(_xy(_button("Right Click Me"),4,5)); // right click at coordinates 4,5 pixels inside the button</code></pre>
 * <warning>
 * _rightClick will not bring up the browser's context menu.<br/>
 * </warning>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element to right click on
 * @param {string} $combo - Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"<br/>This argument is applicable only for Browser mode
 * 
 */
 function _rightClick ($element, $combo){}
/**
 * 
 * _mouseDown simulates a mousedown on the given element.<br/>
 * <pre><code>_mouseDown(_button("Mouse Down"));
 * _mouseDown(_button("Mouse Down"), true); //mouseDown for a left-hand mouse
 * _mouseDown(_button("Mouse Down"), false, "CTRL"); //mouseDown with CTRL key pressed
 * _mouseDown(_button("Mouse Down"), false, "CTRL|SHIFT"); //mouseDown with CTRL and SHIFT keys pressed</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element to perform mouse down on
 * @param {boolean} $isRight - Set to true for a left-hand mouse, default false
 * @param {string} $combo - Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"<br/>This argument is applicable only for Browser mode
 * 
 */
 function _mouseDown ($element, $isRight, $combo){}
/**
 * 
 * simulates a mouseup on the given element.<br/>
 * <pre><code>_mouseup(_button("Mouse up"));
 *  _mouseup(_button("Mouse up"), true); // mouseup for a left-hand mouse
 * _mouseup(_button("Mouse up"), false, "CTRL"); // mouseup with CTRL key pressed
 * _mouseup(_button("Mouse up"), false, "CTRL|SHIFT"); // mouseup with CTRL and SHIFT keys pressed</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element to perform mouse up on
 * @param {boolean} $isRight - Set to true for a left-hand mouse, default false
 * @param {string} $combo - Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"<br/>This argument is applicable only for Browser mode
 * 
 */
 function _mouseUp ($element, $isRight, $combo){}
/**
 * 
 * _mouseOver simulates mouse hovering on the given element.<br/>
 * <pre><code>_mouseOver(_button("Click Me"));
 * _mouseOver(_button("Click Me"), "CTRL"); // mouseOver with CTRL key pressed
 * _mouseOver(_button("Click Me"), "CTRL|SHIFT"); // mouseOver with CTRL and SHIFT keys pressed</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element to perform hover over or move the mouse over.
 * @param {string} $combo - Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"<br/>This argument is applicable only for Browser mode
 * 
 */
 function _mouseOver ($element, $combo){}
/**
 * 
 * Checks the given checkbox or radio element. If already checked, this API does not do anything.<br/>
 * 
 * @param {HTML DOM/ Windows/ Java element} $checkBoxOrRadioElement - The check box or Radio element to check
 * 
 */
 function _check ($checkBoxOrRadioElement){}
/**
 * 
 * Unchecks the given checkbox. If already unchecked, this API does not do anything.<br/>
 * 
 * @param {HTML DOM/ Windows/ Java element} $checkBoxElement - The check box to uncheck
 * 
 */
 function _uncheck ($checkBoxElement){}
/**
 * 
 * Selects one or more elements in a select dropdown.<br/>
 * <pre><code>_setSelected(_select("Age"), "28"); // Selects the option visible as "28" in a select box
 * _setSelected(_select("color"), 1);  // Selects the second option in a select box
 * _setSelected(_select("color"), "red");         // Selects red in a multiselect box
 * _setSelected(_select("color"), "blue", true);  // Selects blue also in the multiselect box
 * _setSelected(_select("color"), ["red", "blue"]); // Unselects previous and selects red and blue in a multiselect box
 * _setSelected(_select("color"), [1,2,3]); // Unselects previous and selects the second, third and fourth options in a multiselect box
 * _setSelected(_select("color"), ["green", "yellow"], true); // Keeps previous options selected and selects "green" and "yellow" also</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - Select dropdown
 * @param {string|integer|array of strings|array of integers} $optionToSelect - Option's text, id or index;<br/>can also pass an array of options for multi-select
 * @param {boolean} $isMultiple - set isMultiple true for multiselect
 * 
 */
 function _setSelected ($element, $optionToSelect, $isMultiple){}
/**
 * 
 * Simulates a drag and drop action<br/>
 * <pre><code>// Drag the item and drop it in the shopping cart
 * _dragDrop(_image("item"), _byId("ShoppingCart"));
 * // Drag the item and drop it at coordinates 20,40 pixels inside shopping cart
 * _dragDrop(_image("item"), _xy(_byId("ShoppingCart"), 20, 40));</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $dragElement - HTML element to be dragged
 * @param {HTML DOM/ Windows/ Java element} $dropElement - HTML Element where the dragged element will be dropped
 * 
 */
 function _dragDrop ($dragElement, $dropElement){}
/**
 * 
 * _dragDropXY simulates a drag and drop action. It drags the element and drops it at the given x, y coordinate.<br/>
 * <pre><code>// If _image("item") is located at coordinates (50, 150)
 * 
 * // Drag the item and drop it at the coordinate (100, 300)
 * // The end result is that the element's coordinates will be at (100, 300)
 * _dragDropXY(_image("item"),  100, 300);
 * 
 * // Drag the item and drop it at the coordinate (50+100, 150+300)
 * // The end result is that the element's coordinates will be at (150, 450)
 * _dragDropXY(_image("item"),  100, 300, true);</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $dragElement -  HTML Element to be dragged
 * @param {integer} $x -  x coordinate of drop point on the page
 * @param {integer} $y -  y coordinate of drop point on the page
 * @param {boolean} $isRelative -  Specifies whether the coordinates are relative to current position of draggable element.
 * 
 */
 function _dragDropXY ($dragElement, $x, $y, $isRelative){}
/**
 * 
 * Simulates a tap event(touch event) on the HTML element<br/>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - HTML form element that needs to be tapped
 * @param {integer} $count - number of times the element needs to be tapped. Default value is 1.
 * 
 */
 function _tap ($element, $count){}
/**
 * 
 * Simulates a touch event on the HTML element<br/>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - HTML form element on which we need to fire a touch event
 * @param {integer} $count - number of times the element needs to be touched. Default value is 1.
 * 
 */
 function _touch ($element, $count){}
/**
 * 
 * Simulates a touch start event on the HTML element<br/>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - HTML form element on which we need to fire a touch start event
 * 
 */
 function _touchStart ($element){}
/**
 * 
 * Simulates a touch end event on the HTML element<br/>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - HTML form element on which we need to fire a touch end event
 * 
 */
 function _touchEnd ($element){}
/**
 * 
 * Simulates a touch cancel event on the HTML element<br/>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - HTML form element on which we need to cancel the ongoing touch event
 * 
 */
 function _touchCancel ($element){}
/**
 * 
 * Simulates a touch move event on the HTML element<br/>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - HTML form element which we need to move/drag.
 * @param {integer} $moveX - number of pixels the element needs to move in x-direction
 * @param {integer} $moveY - number of pixels the element needs to move in y-direction
 * @param {boolean} $isRelative - if true, the element will move relative to the current location of the element.if false, element will move to the position where the horizontal coordinate and vertical coordinate are 'moveX' and 'moveY'. Default value is true.
 * 
 */
 function _touchMove ($element, $moveX, $moveY, $isRelative){}
/**
 * 
 * Simulates a touch move event on the HTML element<br/>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - HTML form element on which we need to simulate swipe event.
 * @param {integer} $moveX - number of pixels the element needs to move in x-direction
 * @param {integer} $moveY - number of pixels the element needs to move in y-direction
 * @param {boolean} $isRelative - if true, the element will move relative to the current location of the element. If false, element will move to the position where clientX and clientY are moveX and moveY.
 * 
 */
 function _swipe ($element, $moveX, $moveY, $isRelative){}
/**
 * 
 * Simulates text entry into html form elements (textbox like elements and textareas)<br/>
 * The sequence of events performed are<br/>
 * Focus<br/>
 * Enter Text<br/>
 * Remove focus<br/>
 * <pre><code>// populates textbox identified as _textbox("user") with Ram
 * _setValue(_textbox("user"), "Ram");</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - HTML form element whose value is to be set
 * @param {string} $value - Value to be set
 * 
 */
 function _setValue ($element, $value){}
/**
 * 
 * Simulates pressing down a key on the given element.<br/>
 * <pre><code>_keyDown(document.body, 'a');
 * _keyDown(document.body, 98);
 * _keyDown(document.body, [13,13]);
 * _keyDown(document.body, 'a', "CTRL");</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element -  Any HTML element
 * @param {character|integer|pr_KC} $charInfo - charInfo can be:<br/><ul><li>a character (eg. 'b')</li><li>charCode of a character (eg. 98)</li><li>an array of [keyCode, charCode] (eg. [13,13] for pressing ENTER key)</li></ul>
 * @param {string} $combo - Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"
 * 
 */
 function _keyDown ($element, $charInfo, $combo){}
/**
 * 
 * Simulates releasing a key press on the given element.<br/>
 * <pre><code>_keyUp(document.body, 'a');
 * _keyUp(document.body, 98);
 * _keyUp(document.body, [13,13]);
 * _keyUp(document.body, 'a', "CTRL");</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element -  Any HTML element
 * @param {character|integer|pr_KC} $charInfo - charInfo can be:<br/><ul><li>a character (eg. 'b')</li><li>charCode of a character (eg. 98)</li><li>an array of [keyCode, charCode] (eg. [13,13] for pressing ENTER key)</li></ul>
 * @param {string} $combo - Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"
 * 
 */
 function _keyUp ($element, $charInfo, $combo){}
/**
 * 
 * Simulates pressing a key on the given element. Does keyDown and keyUp together.<br/>
 * <pre><code>_keyPress(document.body, 'a');
 * _keyPress(document.body, 98);
 * _keyPress(document.body, [13,13]);
 * _keyPress(document.body, 'a', "CTRL");</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element -  Any HTML element
 * @param {character|integer|array of integers} $charInfo - charInfo can be:<br/><ul><li>a character (eg. 'b')</li><li>charCode of a character (eg. 98)</li><li>an array of [keyCode, charCode] (eg. [13,13] for pressing ENTER key)</li></ul>
 * @param {string} $combo - Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"
 * 
 */
 function _keyPress ($element, $charInfo, $combo){}
/**
 * 
 * Types the text into the element. Different from _setValue. _type does not bring or remove focus from element.<br/>
 * <pre><code>_type(_textbox("user"), "am");</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element -  element in which the text is to be typed
 * @param {string} $text -  text to be typed
 * 
 */
 function _type ($element, $text){}
/**
 * 
 * Brings focus to given element.<br/>
 * <pre><code>_focus(_textbox("username"));</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element -  Any HTML element to focus on
 * 
 */
 function _focus ($element){}
/**
 * 
 * Similar to clicking somewhere else on the window to remove focus from given element.<br/>
 * Forces onblur events to be called.<br/>
 * Blur happens automatically during Sahi's script execution.<br/>
 * This API is rarely used explicitly. Same as _blur.<br/>
 * <pre><code>_removeFocus(_textbox("username"));</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element -  Any HTML element to remove focus from
 * 
 */
 function _removeFocus ($element){}
/**
 * 
 * Similar to clicking somewhere else on the window to remove focus from given element.<br/>
 * Forces onblur events to be called.<br/>
 * Blur happens automatically during Sahi's script execution.<br/>
 * This API is rarely used explicitly. Same as _removeFocus.<br/>
 * <pre><code>_blur(_textbox("username"));</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element -  Any HTML element to remove focus from
 * 
 */
 function _blur ($element){}
/**
 * 
 * Example:<br/>
 * <pre><code>// If the text was "abcdefghij"
 * _selectRange(_rte(1), 2, 4); // selects text cd
 * var $text = _getSelectionText(); // $text = "cd"
 * 
 * _selectRange(_rte(1), 2, 2); // places the cursor at 3rd position without any selection</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element to select on
 * @param {integer} $rangeStart - start position of selection
 * @param {integer} $rangeEnd - end position of selection
 * 
 */
 function _selectRange ($element, $rangeStart, $rangeEnd){}
/**
 * 
 * Example:<br/>
 * <pre><code>//Given a sample string
 * //This bright red apple is sweeter than that dull red apple
 * 
 * _selectTextRange(_rte(1), "red apple"); // selects the first red apple
 * _selectTextRange(_rte(1), "red apple[1]"); // selects the second red apple
 * _selectTextRange(_rte(1), "/ap.le/[1]"); // selects the second apple
 * var $text = _getSelectionText(); // $text = "apple"
 * _selectTextRange(_rte(1), "/ap.le/[1]", "before"); // moves the cursor before the second apple, with no selection
 * _selectTextRange(_rte(1), "/ap.le/[1]", "after"); // moves the cursor after the second apple, with no selection</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element to select on
 * @param {string} $searchText - text to search for and select.<br/>The text can be a pure string or a regular expression with an index
 * @param {string} $position - can be "before" or "after".<br/>if specified, the selection moves to the start or end of searchText.
 * 
 */
 function _selectTextRange ($element, $searchText, $position){}
/**
 * 
 * _navigateTo loads the given url in the top frame of the window.<br/>
 * To load in a popupWindow, use _selectWindow to select that window first.<br/>
 * <br/>
 * <pre><code>// If current page is not http://sahi.co.in/demo/
 * _navigateTo("http://sahi.co.in/demo/"); // Will navigate to this page.
 * 
 * // If current page is itself "http://sahi.co.in/demo/"
 * _navigateTo("http://sahi.co.in/demo/"); // will do nothing
 * _navigateTo("http://sahi.co.in/demo/", true); // Will force navigation to this page.
 * 
 * _selectWindow("popWin");
 * _navigateTo("http://sahi.co.in/demo/"); // loads in the popup window.</code></pre>
 * 
 * @param {string} $url - URL to navigate to. Can be relative to current page.
 * @param {boolean} $forceReload -  If the current page URL is same as url, Sahi will not reload the page by default.<br/>Set to true to force reload when urls are same.
 * 
 */
 function _navigateTo ($url, $forceReload){}
/**
 * 
 * Forces script to wait for given time or given condition to  be true, which ever comes first<br/>
 * <pre><code>_wait(1000); // Will stop execution for a second
 * 
 * // Wait till div by id "ajaxConfirm" is populated for max 5 seconds.
 * _wait(5000, _getText(_div("ajaxConfirm"))!="");
 * 
 * // Wait till button becomes visible
 * _wait(5000, _isVisible(_button("Confirm")));
 * 
 * // Wait till "Loading ..." message disappears
 * _wait(1000); // may take a second before that message appears.
 * _wait(5000, !_isVisible(_div("Loading ..."))); // wait max 5 seconds for it to disappear.</code></pre>
 * 
 * @param {integer} $timeout -  time in milliseconds to wait for
 * @param {Sahi expression} $condition -  condition to wait for.<br/>If specified, _wait will return if either the condition is met<br/>or if the time elapsed has exceeded timeout, whichever comes first.
 * 
 */
 function _wait ($timeout, $condition){}
/**
 * 
 * Types the text using native events<br/>
 * <pre><code>_focus(_textbox("user"));
 * _focusWindow();
 * _typeNative("Ram");</code></pre>
 * 
 * @param {string} $text - Text to type
 * 
 */
 function _typeNative ($text){}
/**
 * 
 * Presses the keyboard key for given keyCode<br/>
 * <a href="http://docs.oracle.com/javase/1.4.2/docs/api/java/awt/event/KeyEvent.html" target="_blank">java.awt.event.KeyEvent</a> defines keyCodes as constants which can be passed to this function.<br/>
 * Users can type even those characters which might not be present on a keyboard's primary layer (characters which can be typed without using any key combinations) but has an ASCII code associated with them.<br/>
 * <br/>
 * The user need to define the character in <code>Sahi/userdata/config/keyCode_combinations.txt</code> file in following format:<br/>
 * <br/>
 * "VK_keyCode constant":"ASCII Code"<br/>
 * Example:-<br/>
 * "VK_DOLLAR":"36"<br/>
 * <pre><code>_focusWindow();
 * _setValue(_textbox("search"), "coffee");
 * _typeKeyCodeNative(java.awt.event.KeyEvent.VK_ENTER); // Press enter key
 * _typeKeyCodeNative(java.awt.event.KeyEvent.VK_DOLLAR); // Press dollar key defined in keyCode_combinations.txt file</code></pre>
 * 
 * @param {integer} $keyCode - Key Code of keyboard key to be pressed.
 * 
 */
 function _typeKeyCodeNative ($keyCode){}
/**
 * 
 * Brings the window above all other windows.<br/>
 * It is generally needed before using other native events or before taking screen shots<br/>
 * Works only on Windows Operating Systems currently. On Mac and Linux, does nothing.<br/>
 * For popup windows, use _selectWindow first.<br/>
 * <pre><code>_focusWindow(); // bring window into focus.
 * _takeScreenShot();
 * 
 * // For popup windows, use _selectWindow first
 * _selectWindow("popWin"); // target further statements at popWin window
 * _focusWindow(); // bring popup window into focus.
 * _takeScreenShot();</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 function _focusWindow (){}
/**
 * 
 * Performs various window level actions. Current works only on Windows Operating Systems.<br/>
 * On Mac and Linux does nothing.<br/>
 * For popup windows, use _selectWindow first.<br/>
 * <pre><code>_windowAction("focus"); // focus window. Same as _focusWindw
 * _windowAction("maximize"); // mazimize window.
 * _windowAction("minimize"); // minimize window.
 * _windowAction("restore"); // restore window.
 * _windowAction("refresh"); // refresh window.
 * _windowAction("resize",500,300); // resize the window with the given width and height.
 * 
 * // maximizing a popup window
 * _selectWindow("popWin"); // first select the popWin window to target further steps on.
 * _windowAction("maximize");</code></pre>
 * To set delay for a window action API, please do the following<br/>
 * <ul>
 * <li>Search and edit the following section in <i>sahi.properties</i><code>[SAHI_INSTALL_PATH\config\sahi.properties]</code></li>
 * </ul>
 * <pre><code>window_action_api.wait_after_unique_title_set=300 // waits for 300ms after unique title set.
 * window_action_api.wait_before_title_revert=200 // waits for 200ms before unique title revert.
 * window_action_api.wait_after_unique_title_revert=500 // waits for 500ms after unique title revert.</code></pre>
 * 
 * @param {string} $action -  Action can be one of<br/><ul><li>"focus"</li><li>"maximize"</li><li>"minimize"</li><li>"restore"</li><li>"refresh"</li><li>"resize"</li></ul>
 * @param {integer} $width -  Specifies the width of the browser window while using the 'resize' option.
 * @param {integer} $height -  Specifies the height of the browser window while using the 'resize' option.
 * 
 */
 function _windowAction ($action, $width, $height){}
/**
 * 
 * Simulates a native click event on the element.<br/>
 * <warning>Before calling this API, we need to call <code>_focusWindow</code> to bring the window into focus.</warning>
 * <pre><code>_clickNative(_button("b1"));</code></pre>
 * <info>
 * This API is very useful when <a href="action-apis.html#_click">_click</a> does not help or a native click cannot be simulated by focusing on the element and generating a Space or Enter key (<a href="action-apis.html#_typeKeyCodeNative">_typeKeyCodeNative</a>(java.awt.event.KeyEvent.VK_SPACE)).<br/>
 * <br/>
 * One can use this to click on File elements to bring up the File chooser dialog, when _setFile and _setFile2 do not work.<br/>
 * </info>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element -  Element that has to be clicked.
 * @param {string} $combo -  Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"
 * @param {boolean} $isRight -  If true, the click is a right click
 * @param {boolean} $isDouble - If true, the click is a double click
 * 
 */
 function _clickNative ($element, $combo, $isRight, $isDouble){}
/**
 * 
 * Simulates a native right click event on the element.<br/>
 * <warning>Before calling this API, we need to call <code>_focusWindow</code> to bring the window into focus.</warning>
 * <pre><code>_rightClickNative(_button("b1"));</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element -  element that has to be clicked.
 * @param {string} $combo -  Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"
 * 
 */
 function _rightClickNative ($element, $combo){}
/**
 * 
 * Simulates a native double click event on the element.<br/>
 * <warning>Before calling this API, we need to call <code>_focusWindow</code> to bring the window into focus.</warning>
 * <pre><code>_doubleClickNative(_button("b1"));</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element -  element that has to be double clicked.
 * @param {string} $combo -  Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"
 * 
 */
 function _doubleClickNative ($element, $combo){}
/**
 * 
 * Simulates a click event at the point (x,y).<br/>
 * <warning>Before calling this API, we need to call <code>_focusWindow</code> to bring the window into focus.</warning>
 * <pre><code>_clickNativeXY(100, 200);
 * _clickNativeXY(150,300, "ALT"); // ALT + click</code></pre>
 * 
 * @param {integer} $x -  x coordinate of the screen position to be clicked
 * @param {integer} $y -  y coordinate of the screen position to be clicked
 * @param {string} $combo -  Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"
 * @param {boolean} $isRight -  If true, the click is a right click
 * @param {boolean} $isDouble - If true, the click is a double click
 * 
 */
 function _clickNativeXY ($x, $y, $combo, $isRight, $isDouble){}
/**
 * 
 * Simulates a native mouse over event on the element.<br/>
 * <warning>Before calling this API, we need to call <code>_focusWindow</code> to bring the window into focus.</warning>
 * <pre><code>_mouseOverNative(_button("b1"));</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element -  Element to perform hover over or move the mouse over.
 * @param {string} $combo -  Any combo key: can be "CTRL", "SHIFT", "ALT" or "META";<br/>Can also be two or more keys together like "CTRL|SHIFT"
 * 
 */
 function _mouseOverNative ($element, $combo){}
/**
 * 
 * Simulates a dragdrop event from element 1 to element 2 using native events.<br/>
 * <warning>Before calling this API, we need to call <code>_focusWindow</code> to bring the window into focus.</warning>
 * <pre><code>_dragDropNative(_div("draggable"), _div("droppable"));</code></pre>
 * <info>
 * This API is useful when <a href="action-apis.html#_dragDrop">_dragDrop</a> does not help.<br/>
 * Example: When you need to drag an element from one iframe into a drop target in another iframe, you would use _dragDropNative.<br/>
 * </info>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el -  the draggable element
 * @param {HTML DOM/ Windows/ Java element} $el2 -  the droppable element
 * 
 */
 function _dragDropNative ($el, $el2){}
/**
 * 
 * Simulates a dragdrop event from element at first set of coordinates to element at second set of coordinates, using native events.<br/>
 * <warning>Before calling this API, we need to call <code>_focusWindow</code> to bring the window into focus.</warning>
 * <pre><code>_dragDropNativeXY(100,50, 100,150);</code></pre>
 * 
 * @param {integer} $x1 -  x coordinate of the draggable element
 * @param {integer} $y1 -  y coordinate of the draggable element
 * @param {integer} $x2 -  x coordinate of the droppable element
 * @param {integer} $y2 -  y coordinate of the droppable element
 * 
 */
 function _dragDropNativeXY ($x1, $y1, $x2, $y2){}
/**
 * 
 * <pre><code>_setFile(_file("id"), "C:\\abc\\efg.jpg");
 * _setFile(_file("id"), "C:\\abc\\efg.jpg", "formSubmit.jsp");</code></pre>
 * <warning>
 * Note that _setFile works in a round about way. It is not handled at the browser level. It is handled at the proxy. <strong>So you will not see the file input box being populated with your desired filename.</strong> But when the form is submitted, the proxy will add the correct file to the request before it sends it to your web server. But if there are javascript checks before form submit to see if the filename is non-empty, then the script will not work as desired.<br/>
 * </warning>
 * <info>
 * If there are javascript validations on the file field, use _setFile2 which works in the same way, but changes the file type using javascript so that validations may pass.<br/>
 * </info>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element -  HTML Form File Element whose value needs to be set
 * @param {string} $filePath -  Path of the file to be uploaded.
 * @param {string} $actionURL -  The form action URL to which the file is submitted. This is an optional parameter.<br/>Use it in cases where the form's action URL is changed on setting the file.<br/>By default, it uses the form's current action URL.
 * 
 */
 function _setFile ($element, $filePath, $actionURL){}
/**
 * 
 * Before submitting the file, <strong>_setFile2</strong> internally changes the field's type to "text", and then set its value.<br/>
 * <code>_setFile2</code> is the same as doing the following:<br/>
 * <pre><code>// _setFile2 implementation
 * // set the file
 * _setFile(_file("file"), "scripts/demo/uploadme.txt");
 * // Change the "type" attribute of file field
 * if (_isIE()){
 *   _call(_file("file").outerHTML = _file("file").outerHTML.replace(/type=['"]?file['"]?/, "type=text"));
 * }else{
 *   _call(_file("file").type = "text");
 * }
 * // Set the value into the textbox
 * _setValue(_textbox("file"), "scripts/demo/uploadme.txt");</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element -  HTML Form File Element whose value needs to be set
 * @param {string} $filePath -  Path of the file to be uploaded.
 * @param {string} $actionURL -  The form action URL to which the file is submitted. This is an optional parameter.<br/>Use it in cases where the form's action URL is changed on setting the file.<br/>By default, it uses the form's current action URL.
 * 
 */
 function _setFile2 ($element, $filePath, $actionURL){}
/**
 * 
 * Returns the last downloaded file name.<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _lastDownloadedFileName (){}
/**
 * 
 * Renames/copies the file into specified directory for further processing.<br/>
 * 
 * @param {string} $path - File path to copy this file into. Needs to be a file path not a directory. If path is relative, it is resolved relative to userdata directory.
 * 
 */
 function _saveDownloadedAs ($path){}
/**
 * 
 * Clears out the _lastDownloadedFileName() so that further files can be downloaded and worked upon<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _clearLastDownloadedFileName (){}
/**
 * 
 * Forces Sahi to send back an HTML response after file download. Useful when file opens/downloads in a new window.<br/>
 * <br/>
 * Add<br/>
 * <pre><code>_sendHTMLResponseAfterFileDownload(true);</code></pre>
 * before the statement which triggers the download and Sahi will send back an HTML response. To turn it off, call<br/>
 * <pre><code>_sendHTMLResponseAfterFileDownload(false);</code></pre>
 * 
 * @param {boolean} $enable - true enables html response behaviour, false disables html response
 * 
 */
 function _sendHTMLResponseAfterFileDownload ($enable){}
/**
 * 
 * Adds the domain to the current script session.<br/>
 * <br/>
 * Example:<br/>
 * <pre><code>_addToSession("http://downloaddomain.com"); // Here the download url is http. Change downloaddomain.com to your domain.
 * _addToSession("https://downloaddomain.com"); // Here the download url is https. Change downloaddomain.com to your domain.</code></pre>
 * <danger>
 * NOTE: If it is a https url, it is a MUST to prefix the domain name with "https://".<br/>
 * </danger>
 * 
 * @param {string} $domain - Domain to be associated with the current script session
 * 
 */
 function _addToSession ($domain){}
/**
 * 
 * Closes the current window.<br/>
 * This will work only for popups.<br/>
 * Eg.<br/>
 * <pre><code>_popup("popWin")._closeWindow();</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 function _closeWindow (){}
/**
 * 
 * Closes the browsers in this session in the middle of a script.<br/>
 * <warning>
 * Use with caution.<br/>
 * <ol>
 * <li>This can be only used when singleSession is false in a suite.</li>
 * <li>ALWAYS follow this with <code>_openBrowser()</code>or <a href="multiple-browsers.html#_launchNewBrowser">_launchNewBrowser()</a>. Otherwise the script will hang.</li>
 * <li>If multiple browsers is opened, then first use <a href="multiple-browsers.html#_selectBrowser">_selectBrowser()</a> with browser id. Otherwise last selected browser will close.</li>
 * <li>There should not be any statement present between <code>_selectBrowser</code> and <code>_closeBrowser</code>, this will allow the browser to close properly.</li>
 * <li>A wait(5000) may be needed after closing to allow the browser to clean up properly.</li>
 * </ol>
 * </warning>
 * 
 * <tr><td>None</td></tr>
 */
 function _closeBrowser (){}
/**
 * 
 * Opens the browser in this session in the middle of a script. Used to reopen browser after _closeBrowser.<br/>
 * <warning>Use with caution.<br/>
 * <ol>
 * <li>This can be only used when singleSession is false in a suite.</li>
 * <li>Always use it after a <code>_closeBrowser()</code> command</li>
 * <li>This will not allow multiple browsers in the same session. Use <a href="multiple-browsers.html">_launchNewBrowser and _selectBrowser</a> for that</li>
 * </ol>
 * </warning>
 * 
 * <tr><td>None</td></tr>
 */
 function _openBrowser (){}
/**
 * 
 * _call is a generic API to bypass Sahi's action APIs and directly call javascript on the DOM.<br/>
 * <pre><code>// For example, a date field may bring up the calendar, but selecting the year,month etc. may be time consuming.
 * // For repeated flows, one may want to bypass this by directly setting the value of the field through javascript.
 * _call(_textbox("date").value = "25/02/1990");</code></pre>
 * 
 * @param {expression} $expression -  Any expression which needs to be evaluated on the browser<br/>Note that the expression is not quoted and is NOT a string.
 * 
 */
 function _call ($expression){}
/**
 * 
 * _eval, like _call, is a generic API to bypass Sahi's action APIs and directly call javascript on the DOM.<br/>
 * However, _eval takes a string instead of an expression.<br/>
 * <pre><code>// For example, a date field may bring up the calendar, but selecting the year,month etc. may be time consuming.
 * // For repeated flows, one may want to bypass this by directly setting the value of the field through javascript.
 * _eval("_textbox(\"date\").value = \"25/02/1990\"");</code></pre>
 * <warning>_call is recommended over _eval since _call is easier to use.</warning>
 * 
 * @param {string} $evalString -  Any string which needs to be javascript 'eval'ed on the browser
 * 
 */
 function _eval ($evalString){}
/**
 * 
 * _areHorizontallyAligned checks whether two elements are horizontally aligned or not.<br/>
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/alignment/areHorizontallyAligned.png" width="700px" title="Horizontally Aligned"/>
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/alignment/areHorizontallyAligned2.png" width="700px" title="Horizontally Aligned"/>
 * Example<br/>
 * <pre><code>_areHorizontallyAligned(_div("item1"), _div("item2")) //by default middle position will be checked
 * _areHorizontallyAligned(_div("item1"), _div("item2"), "top")
 * _areHorizontallyAligned(_div("item1"), _div("item2"), "top", 20) //gap is exact 20.
 * _areHorizontallyAligned(_div("item1"), _div("item2"), "top", [0, 20]) //gap is only positive i.e. no overlapping is allowed
 * _areHorizontallyAligned(_div("item1"), _div("item2"), "top", [0, 20], 10) //gap is only positive i.e. no overlapping is allowed and offset for the top edge is 10</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $leftElement - Left element to be checked.
 * @param {HTML DOM/ Windows/ Java element} $rightElement - Right element to be checked.
 * @param {string} $position - Position to be checked. By default position = "middle". Value of position can be either "top" or "bottom" or "both" or "middle".
 * @param {ar_i|i} $gap - Gap between right edge of left element and left edge of right element. If gap is an integer, it will take the exact value. And if gap is an array, Eg. gap = [10, 40], implies gap can range from 10 to 40. To force sahi to check for the gap between the two elements, use the gap. If nothing provided it wouldn't consider gap.
 * @param {ar_i|i} $offset -  Offset above and below within which to look for elements boundary for given position. If offset is an integer, both above and below offsets are set to this offset. rightElement may be slightly above or below leftElement. Sahi normally matches only elements whose bases match. To force it to look a little above or below while looking to the right, use the offset.
 * 
 */
 function _areHorizontallyAligned ($leftElement, $rightElement, $position, $gap, $offset){}
/**
 * 
 * _areVerticallyAligned checks whether two elements are vertically aligned or not. Returns true if two elements are vertically aligned, else false.<br/>
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/alignment/areVerticallyAligned.png" width="700px" title="Vertically Aligned"/>
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/alignment/areVerticallyAligned2.png" width="700px" title="Vertically Aligned"/>
 * Example<br/>
 * <pre><code>_areVerticallyAligned(_div("item1"), _div("item2")) //by default center position will be checked
 * _areVerticallyAligned(_div("item1"), _div("item2"), "left")
 * _areVerticallyAligned(_div("item1"), _div("item2"), "left", 20) //gap can take the values between [-20, 20]
 * _areVerticallyAligned(_div("item1"), _div("item2"), "left", [0, 20]) //gap is only positive i.e. no overlapping is allowed</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $topElement - Top element to be checked.
 * @param {HTML DOM/ Windows/ Java element} $bottomElement - Bottom element to be checked.
 * @param {string} $position - Position to be checked. By default position = "center". Value of position can be either "left" or "right" or "both" or "center".
 * @param {ar_i|i} $gap - Gap between bottom edge of top element and top edge of bottom element. If gap is an integer, it will take the exact value. And if gap is an array, Eg. gap = [0, 40], implies gap can range from 0 to 40. To force sahi to check for the gap between the two elements, use the gap. If nothing provided it wouldn't consider gap.
 * @param {ar_i|i} $offset -  Offset left and right within which to look for elements boundary for given position. If offset is an integer, both left and right offsets are set to this offset. topElement may be slightly left or right to the bottomElement.
 * 
 */
 function _areVerticallyAligned ($topElement, $bottomElement, $position, $gap, $offset){}
/**
 * 
 * _isCentered checks whether inner element is vertically or horizontally centered to the container element.<br/>
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/alignment/centered.png" width="700px" title="centered"/>
 * Example<br/>
 * <pre><code>_isCentered(_div("item1"), _div("item2"), "vertical")
 * _isCentered(_div("item1"), _div("item2"), "horizontal")</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - Inner element to be checked.
 * @param {HTML DOM/ Windows/ Java element} $containerElement - Container element to be checked.
 * @param {string} $alignment - Can be "vertical" or "horizontal".
 * 
 */
 function _isCentered ($element, $containerElement, $alignment){}
/**
 * 
 * _isVisiblyInside checks whether element1 is completely contained inside element2.<br/>
 * <danger>
 * NOTE: If any edge overlaps then it will return false.<br/>
 * </danger>
 * Example<br/>
 * <pre><code>_isVisiblyInside(_div("item1"), _div("item2")) //implies _div("item1") is inside _div("item2")</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element1 - First element to be checked.
 * @param {HTML DOM/ Windows/ Java element} $element2 - Second element to be checked.
 * 
 */
 function _isVisiblyInside ($element1, $element2){}
/**
 * 
 * _isVisiblyOutside checks whether element1 is completely outside element2 i.e one is not contained within other.<br/>
 * <danger>
 * NOTE: If any edge overlaps then it will return false.<br/>
 * </danger>
 * Example<br/>
 * <pre><code>_isVisiblyOutside(_div("item1"), _div("item2")) //implies _div("item1") is outside _div("item2")</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element1 - First element to be checked.
 * @param {HTML DOM/ Windows/ Java element} $element2 - Second element to be checked.
 * 
 */
 function _isVisiblyOutside ($element1, $element2){}
/**
 * 
 * <danger>
 * NOTE: All the spaces should be provided with respect to element2.<br/>
 * </danger>
 * _isVisiblyOn checks whether element1 is placed on top of element2. element1 may extend beyond element2 boundaries.<br/>
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/alignment/visiblyOn.png" width="800px" title="visiblyOn"/>
 * <br/>
 * Example<br/>
 * <pre><code>_isVisiblyOn(_div("item1"), _div("item2"), [0,25]); //implies _div("item1") is placed on _div("item2") where top edge of div("item1") can be upto
 * // 25 units below div("item2") top edge</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element1 - First element to be checked.
 * @param {HTML DOM/ Windows/ Java element} $element2 - Second element to be checked. Base Element.
 * @param {ar_i|i} $topSpace - Space between top edges of the two elements. If topSpace is an integer, it will take the exact value. And if topSpace = [-20, 0], implies top edge of element2 lies above top edge of element1. To force sahi to check for the topSpace between the two elements, use the topSpace. If nothing provided it wouldn't consider topSpace.
 * @param {ar_i|i} $rightSpace - Space between right edges of the two elements. If rightSpace is an integer, it will take the exact value. And if rightSpace = [0, 20], implies right edge of element2 lies to the right side of right edge of element1. To force sahi to check for the rightSpace between the two elements, use the rightSpace. If nothing provided it wouldn't consider rightSpace.
 * @param {ar_i|i} $bottomSpace - Space between bottom edges of the two elements. If bottomSpace is an integer, it will take the exact value. And if bottomSpace = [0, 20], implies bottom edge of element2 lies below bottom edge of element1. To force sahi to check for the bottomSpace between the two elements, use the bottomSpace. If nothing provided it wouldn't consider bottomSpace.
 * @param {ar_i|i} $leftSpace - Space between left edges of the two elements. If leftSpace is an integer, it will take the exact value. And if leftSpace = [0, 20], implies top edge of element2 lies to the right side of left edge of element1. To force sahi to check for the leftSpace between the two elements, use the leftSpace. If nothing provided it wouldn't consider leftSpace.
 * 
 */
 function _isVisiblyOn ($element1, $element2, $topSpace, $rightSpace, $bottomSpace, $leftSpace){}
/**
 * 
 * <danger>
 * NOTE: All the spaces should be provided with respect to element2.<br/>
 * </danger>
 * _fitsWidth checks whether element1 fits within the width of element2.<br/>
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/alignment/fitsWidth.png" width="800px" title="fitsWidth"/>
 * <br/>
 * Example<br/>
 * <pre><code>_fitsWidth(_div("item1"), _div("item2"), [0,25], [-25,0]);  //implies _div("item1") is  on _div("item2") where left edge of div("item1") can be
 * //upto 25 units right to div("item2") left edge and right edge of div("item1") can be upto 25 units left to div("item2") right edge</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element1 - First element to be checked.
 * @param {HTML DOM/ Windows/ Java element} $element2 - Second element to be checked. Base Element.
 * @param {ar_i|i} $leftSpace - Space between left edges of the two elements. If leftSpace is an integer, it will take the exact value. And if leftSpace = [0, 20], implies top edge of element2 lies to the right side of left edge of element1. If nothing provided leftSpace will be considered as 0.
 * @param {ar_i|i} $rightSpace - Space between right edges of the two elements. If rightSpace is an integer, it will take the exact value. And if rightSpace = [0, 20], implies right edge of element2 lies to the right side of right edge of element1. If nothing provided rightSpace will be considered as 0.
 * 
 */
 function _fitsWidth ($element1, $element2, $leftSpace, $rightSpace){}
/**
 * 
 * <danger>
 * NOTE: All the spaces should be provided with respect to element2.<br/>
 * </danger>
 * _fitsHeight checks whether element1 fits within the height of element2.<br/>
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/alignment/fitsHeight.png" width="800px" title="fitsHeight"/>
 * <br/>
 * Example<br/>
 * <pre><code>_fitsHeight(_div("item1"), _div("item2"), [0,25], [-25,0]);  //implies _div("item1") is  on _div("item2") where top edge of div("item1") can be
 * //upto 25 units below div("item2") top edge and bottom edge of div("item1") can be upto 25 units above div("item2") bottom edge</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element1 - First element to be checked.
 * @param {HTML DOM/ Windows/ Java element} $element2 - Second element to be checked. Base Element.
 * @param {ar_i|i} $topSpace - Space between top edges of the two elements. If topSpace is an integer, it will take the exact value. And if topSpace = [-20, 0], implies top edge of element2 lies above top edge of element1. If nothing provided topSpace will be considered as 0.
 * @param {ar_i|i} $bottomSpace - Space between bottom edges of the two elements. If bottomSpace is an integer, it will take the exact value. And if bottomSpace = [0, 20], implies bottom edge of element2 lies below bottom edge of element1. If nothing provided bottomSpace will be considered as 0.
 * 
 */
 function _fitsHeight ($element1, $element2, $topSpace, $bottomSpace){}
/**
 * 
 * Enables automatic vertical scrolling and disables horizontal scrolling for element identification. This affects all subsequent steps in the script. To turn it off, call _aDisableScrolling().<br/>
 * <br/>
 * Once _aEnableVerticalScroll has been called, an element is identified as follows.<br/>
 * <ul>
 * <li>
 * When an element is identified, if an _in clause is specified, it will be identified in that container. Else it will be identified in the topmost container.<br/>
 * </li>
 * <li>
 * If the element is visible on the page, it will be identified.<br/>
 * </li>
 * <li>
 * Else, if the container is scrollable, it will be scrolled vertically from the beginning till the element is identified. If the end has been reached, it means that the element has not been found.<br/>
 * </li>
 * <li>
 * Else, if the container is not scrollable but contains a scrollable child container, the child container will be scrolled vertically from the beginning till the element is identified. If the end has been reached, it means that the element has not been found.<br/>
 * </li>
 * </ul>
 * <pre><code>_aEnableVerticalScroll();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aEnableVerticalScroll (){}
/**
 * 
 * Enables automatic horizontal scrolling and disables vertical scrolling for element identification. This affects all subsequent steps in the script. To turn it off, call _aDisableScrolling().<br/>
 * <br/>
 * Once _aEnableHorizontalScroll has been called, an element is identified as follows.<br/>
 * <ul>
 * <li>
 * When an element is identified, if an _in clause is specified, it will be identified in that container. Else it will be identified in the topmost container.<br/>
 * </li>
 * <li>
 * If the element is visible on the page, it will be identified.<br/>
 * </li>
 * <li>
 * Else, if the container is scrollable, it will be scrolled horizontally from the beginning till the element is identified. If the end has been reached, it means that the element has not been found.<br/>
 * </li>
 * <li>
 * Else, if the container is not scrollable but contains a scrollable child container, the child container will be scrolled horizontally from the beginning till the element is identified. If the end has been reached, it means that the element has not been found.<br/>
 * </li>
 * </ul>
 * <pre><code>_aEnableHorizontalScroll();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aEnableHorizontalScroll (){}
/**
 * 
 * Disables automatic horizontal and vertical scrolling for element identification. This affects all subsequent steps in the script.<br/>
 * <br/>
 * Once _aDisableScroll has been called, an element is identified as follows.<br/>
 * <ul>
 * <li>
 * When an element is identified, if an _in clause is specified, it will be identified in that container. Else it will be identified in the topmost container.<br/>
 * </li>
 * <li>
 * If the element is visible on the page, it will be identified. Else it means that the element has not been found.<br/>
 * </li>
 * </ul>
 * <pre><code>_aDisableScroll();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aDisableScroll (){}
/**
 * 
 * Returns true if automatic vertical scrolling has been enabled by calling _aEnableVerticalScroll().<br/>
 * <pre><code>var $enabled = _aIsVerticalScrollEnabled();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aIsVerticalScrollEnabled (){}
/**
 * 
 * Returns true if automatic horizontal scrolling has been enabled by calling _aEnableHorizontalScroll().<br/>
 * <pre><code>var $enabled = _aIsHorizontalScrollEnabled();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aIsHorizontalScrollEnabled (){}
/**
 * 
 * Returns true if automatic horizontal or vertical scrolling has been enabled by calling _aEnableVerticalScroll() or _aEnableHorizontalScroll().<br/>
 * <pre><code>var $enabled = _aIsScrollEnabled();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aIsScrollEnabled (){}
/**
 * 
 * _in specifies that the element should be searched within another element.<br/>
 * <br/>
 * <pre><code>_aEditText(0, _in(_aRelativeLayout("login_layout")))</code></pre>
 * <info>
 * This has the same signature as the generic API _in.<br/>
 * </info>
 * 
 * @param {ae} $element - Android element in which the other element is located
 * 
 */
 function _in ($element){}
/**
 * 
 * Simulates text entry into Android text elements (EditText etc)<br/>
 * <pre><code>// populates EditText element identified as _aEditText("user") with Ram
 * _setValue(_aEditText("user"), "Ram");</code></pre>
 * <info>
 * This has the same signature as the generic API _setValue.<br/>
 * </info>
 * 
 * @param {ae} $element - Native Android element whose value is to be set
 * @param {string} $value - Value to be set
 * 
 */
 function _setValue ($element, $value){}
/**
 * 
 * _click simulates a user's click on the given element.<br/>
 * <pre><code>_click(_aButton("Click Me"));
 * _click(_aCheckBox("Show password"), null, {_aWaitForNewWindow:false}); // After the click, the code will not wait for a new window to appear.</code></pre>
 * <br/>
 * <info>
 * This has the same signature as the generic API _click.<br/>
 * </info>
 * <info>
 * <ul>
 * <li>
 * In most cases, clicking an element would cause a new window to appear. In such cases, pass only the element as a single parameter to _click.<br/>
 * </li>
 * <li>
 * In cases where clicking an element does not bring up a new window, the third parameter must be {_aWaitForNewWindow:false}.<br/>
 * The second parameter needs to be specified only in such cases. It should have a value of null.<br/>
 * </li>
 * <li>
 * The combo parameter exists only to make this compatible for use with the generic _click API for browsers. It should be specified only when the third parameter is specified and with a value of null.<br/>
 * </li>
 * </ul>
 * </info>
 * 
 * @param {ae} $element - Native Android element to click on
 * @param {string} $combo - NOT used
 * @param {object} $props - properties for click behaviour<br/>1. _aWaitForNewWindow, boolean, optional, if specified should be true or false<br/>Default is true. If false, the script will not wait for a new window to appear.
 * 
 */
 function _click ($element, $combo, $props){}
/**
 * 
 * Brings up the Home screen.<br/>
 * <pre><code>_aPressHome();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aPressHome (){}
/**
 * 
 * Performs a Back action.<br/>
 * <pre><code>_aPressBack();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aPressBack (){}
/**
 * 
 * Brings up the Recent Apps screen.<br/>
 * <pre><code>_aPressRecentApps();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aPressRecentApps (){}
/**
 * 
 * Brings up the Search box.<br/>
 * <pre><code>_aPressSearch();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aPressSearch (){}
/**
 * 
 * Simulates a press on the MENU button.<br/>
 * <pre><code>_aPressMenu();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aPressMenu (){}
/**
 * 
 * Simulates a press on the ENTER key.<br/>
 * <pre><code>_aPressEnter();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aPressEnter (){}
/**
 * 
 * Simulates a press on the DELETE key.<br/>
 * <pre><code>_aPressDelete();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aPressDelete (){}
/**
 * 
 * Returns true if element exists on the page.<br/>
 * <pre><code>// Using in an assertion
 * _assertTrue(_exists(_aButton("Login")));
 * // same as
 * _assertExists(_aButton("Login"));
 * 
 * // Fetching and storing value
 * var $exists = _exists(_aButton("Login"));</code></pre>
 * <info>
 * <ul>
 * <li>
 * This has the same signature as the generic API _exists. However, for native Android elements, _exists is the same as _isVisible. You can use either API.<br/>
 * </li>
 * <li>
 * When existence check is done for the element, <a href="#Implicit scroll APIs for element identification">automatic scrolling logic</a> will affect element identification.<br/>
 * </li>
 * </ul>
 * </info>
 * 
 * @param {ae} $el -  element to check
 * 
 */
 function _exists ($el){}
/**
 * 
 * Returns true if element is visible, else false.<br/>
 * <pre><code>// Using in an assertion
 * _assertTrue(_isVisible(_aButton("Login")));
 * 
 * // Fetching and storing value
 * var $visible = _isVisible(_aButton("Login"));</code></pre>
 * <info>
 * <ul>
 * <li>
 * This API differs from the browser _isVisible API in that it takes only one parameter. For native Android elements, _isVisible is the same as _exists. You can use either API.<br/>
 * </li>
 * <li>
 * When visibility check is done for the element, <a href="#Implicit scroll APIs for element identification">automatic scrolling logic</a> will affect element identification.<br/>
 * </li>
 * </ul>
 * </info>
 * 
 * @param {ae} $el -  Element to check
 * 
 */
 function _isVisible ($el){}
/**
 * 
 * Returns the value as a string<br/>
 * <info>
 * <ul>
 * <li>
 * This has the same signature as the generic API _getValue.<br/>
 * </li>
 * <li>
 * For native Android elements, _getValue and _getText are equivalent. Either API can be used.<br/>
 * </li>
 * </ul>
 * </info>
 * <br/>
 * <pre><code>// Using in an assertion
 * _assertEqual("Tyto", _getValue(_aTextView("company")));
 * 
 * // Fetching and storing value
 * var $userId = _getValue(_aTextView("userId"));</code></pre>
 * 
 * @param {ae} $element - element whose value we need
 * 
 */
 function _getValue ($element){}
/**
 * 
 * Returns the text as a string<br/>
 * <info>
 * <ul>
 * <li>
 * This has the same signature as the generic API _getText.<br/>
 * </li>
 * <li>
 * For native Android elements, _getText and _getValue are equivalent. Either API can be used.<br/>
 * </li>
 * </ul>
 * </info>
 * <br/>
 * <pre><code>// Using in an assertion
 * _assertEqual("Tyto", _getText(_aTextView("company")));
 * 
 * // Fetching and storing value
 * var $userId = _getText(_aTextView("userId"));</code></pre>
 * 
 * @param {ae} $element - element whose text we need
 * 
 */
 function _getText ($element){}
/**
 * 
 * Returns boolean true or false.<br/>
 * <pre><code>_containsText(_aTextView(1), "Setting")</code></pre>
 * <info>
 * This has the same signature as the generic API _containsText.<br/>
 * </info>
 * 
 * @param {ae} $element -  Element where we need to check if text is present
 * @param {string} $text -  Text to check for. Can also be a regular expression
 * 
 */
 function _containsText ($element, $text){}
/**
 * 
 * Returns the SDK Level of the Android device as an int, for example: 21 for Lollypop, 20 for Kitkat etc.<br/>
 * <pre><code>var $version = _aGetSdkVersion();</code></pre>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aGetSdkVersion (){}
/**
 * 
 * Returns an array of element stubs of all elements of type apiType matching the identifier within relations<br/>
 * <pre><code>// Collect all EditTexts matching any identifier, in LinearLayout "listing".
 * // Note the use of match all regular expression "/.*&#47;"
 * var $textboxes = _collect("_aEditText", "/.*&#47;", _in(_aLinearLayout("listing"));
 * // Iterate and set values on all textboxes
 * for (var $i=0; $i&lt;$textboxes.length; $i++) {
 *   _setValue($textboxes[$i], "value");
 * }</code></pre>
 * <warning>
 * This API will only collect visible elements. Hence if the elements are in a scrollable container, the end user will need to write <a href="#Explicit scroll APIs">scrolling logic</a> explicitly.<br/>
 * The user will also need to remove duplicate elements across scrolled pages explicitly.<br/>
 * </warning>
 * <info>
 * This has the same signature as the generic API _collect.<br/>
 * </info>
 * 
 * @param {string|int} $identifier -  Sahi Identifier. Can also be just an index.
 * @param {relations} $relations -  Only _in can be specified.
 * 
 */
 function _collect ($identifier, $relations){}
/**
 * 
 * Returns count of all visible elements of type apiType matching the identifier within relations<br/>
 * <pre><code>// Count all TextViews matching any identifier, in linear layout "listing".
 * // Note the use of match all regular expression "/.*&#47;"
 * var $count = _count("_aTextView", "/.*&#47;", _in(_aLinearLayout("listing")); // may return 5;</code></pre>
 * <warning>
 * This API will only return the count of visible elements.<br/>
 * </warning>
 * <info>
 * This has the same signature as the generic API _count.<br/>
 * </info>
 * 
 * @param {string|int} $identifier -  Sahi Identifier. Can also be just an index.
 * @param {relations} $relations -  Only _in can be specified.
 * 
 */
 function _count ($identifier, $relations){}
/**
 * 
 * Returns an array of element attributes of all visible elements of type apiType matching the identifier within relations<br/>
 * <br/>
 * <b>Fetching a simple attribute from multiple elements</b><br/>
 * <pre><code>// Collect the visible text attribute of all TextViews in LinearLayout "listing".
 * // Note the use of match all regular expression "/.*&#47;"
 * var $contentArr = _collectAttributes("_aTextView", "/.*&#47;", "sahiText", _in(_aLinearLayout("listing")));</code></pre>
 * <warning>
 * This API will only collect the attributes of visible elements. Hence if the elements are in a scrollable container, the end user will need to write <a href="#Explicit scroll APIs">scrolling logic</a> explicitly.<br/>
 * The user will also need to remove duplicate elements across scrolled pages explicitly.<br/>
 * </warning>
 * <info>
 * This has the same signature as the generic API _collectAttributes.<br/>
 * </info>
 * 
 * @param {string|int} $identifier -  Sahi Identifier. Can also be just an index.
 * @param {attribute|function} $attribute -  attribute or function.
 * @param {relations} $relations -  Only _in can be specified.
 * 
 */
 function _collectAttributes ($identifier, $attribute, $relations){}
/**
 * 
 * Scrolls the element's contents to the leftmost position, i.e. it scrolls horizontally to the beginning.<br/>
 * Returns true or false.<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * @param {ae} $element - element whose contents are to be scrolled
 * @param {integer} $maxSwipes - maximum swipes to attempt to scroll to the leftmost position. If not specified, the default max swipes as supported by the device will be used.
 * 
 */
 function _aScrollLeftMost ($element, $maxSwipes){}
/**
 * 
 * Scrolls the element's contents to the rightmost position, i.e. it scrolls horizontally to the end.<br/>
 * Returns true or false.<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * @param {ae} $element - element whose contents are to be scrolled
 * @param {integer} $maxSwipes - maximum swipes to attempt to scroll to the rightmost position. If not specified, the default max swipes as supported by the device will be used.
 * 
 */
 function _aScrollRightMost ($element, $maxSwipes){}
/**
 * 
 * Scrolls the element's contents one page to the left.<br/>
 * Returns false if content cannot be scrolled further, true otherwise.<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * @param {ae} $element - element whose contents are to be scrolled
 * @param {integer} $steps - maximum steps in which to scroll to the previous page. If not specified, a value of 55 will be used.
 * 
 */
 function _aScrollLeft ($element, $steps){}
/**
 * 
 * Scrolls the element's contents one page to the right.<br/>
 * Returns false if content cannot be scrolled further, true otherwise.<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * @param {ae} $element - element whose contents are to be scrolled
 * @param {integer} $steps - maximum steps in which to scroll to the next page. If not specified, a value of 55 will be used.
 * 
 */
 function _aScrollRight ($element, $steps){}
/**
 * 
 * Scrolls the element's contents to the topmost position, i.e. it scrolls vertically to the beginning.<br/>
 * Returns true or false.<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * @param {ae} $element - element whose contents are to be scrolled
 * @param {integer} $maxSwipes - maximum swipes to attempt to scroll to the topmost position. If not specified, the default max swipes as supported by the device will be used.
 * 
 */
 function _aScrollTopMost ($element, $maxSwipes){}
/**
 * 
 * Scrolls the element's contents to the bottommost position, i.e. it scrolls vertically to the end.<br/>
 * Returns true or false.<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * @param {ae} $element - element whose contents are to be scrolled
 * @param {integer} $maxSwipes - maximum swipes to attempt to scroll to the bottommost position. If not specified, the default max swipes as supported by the device will be used.
 * 
 */
 function _aScrollBottomMost ($element, $maxSwipes){}
/**
 * 
 * Scrolls the element's contents one page up.<br/>
 * Returns false if content cannot be scrolled further, true otherwise.<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * @param {ae} $element - element whose contents are to be scrolled
 * @param {integer} $steps - maximum steps in which to scroll to the previous page. If not specified, a value of 55 will be used.
 * 
 */
 function _aScrollUp ($element, $steps){}
/**
 * 
 * Scrolls the element's contents one page down.<br/>
 * Returns false if content cannot be scrolled further, true otherwise.<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * @param {ae} $element - element whose contents are to be scrolled
 * @param {integer} $steps - maximum steps in which to scroll to the next page. If not specified, a value of 55 will be used.
 * 
 */
 function _aScrollDown ($element, $steps){}
/**
 * 
 * Swipes up on the element.<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * @param {ae} $element - element to be swiped
 * @param {integer} $steps - maximum steps for the swipe to be completed in. If not specified, a value of 55 will be used.
 * 
 */
 function _aSwipeUp ($element, $steps){}
/**
 * 
 * Swipes down on the element.<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * @param {ae} $element - element to be swiped
 * @param {integer} $steps - maximum steps for the swipe to be completed in. If not specified, a value of 55 will be used.
 * 
 */
 function _aSwipeDown ($element, $steps){}
/**
 * 
 * Swipes left on the element.<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * @param {ae} $element - element to be swiped
 * @param {integer} $steps - maximum steps for the swipe to be completed in. If not specified, a value of 55 will be used.
 * 
 */
 function _aSwipeLeft ($element, $steps){}
/**
 * 
 * Swipes right on the element.<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * @param {ae} $element - element to be swiped
 * @param {integer} $steps - maximum steps for the swipe to be completed in. If not specified, a value of 55 will be used.
 * 
 */
 function _aSwipeRight ($element, $steps){}
/**
 * 
 * Forces script to wait for given time or given condition to be true, which ever comes first<br/>
 * <pre><code>_wait(1000); // Will stop execution for a second
 * 
 * // Wait till button becomes visible
 * _wait(5000, _isVisible(_aButton("Confirm")));</code></pre>
 * <info>
 * condition can only be an expression that involves an Android API like _getText, _isVisible etc. It cannot be a function written within the script.<br/>
 * </info>
 * 
 * @param {integer} $timeout -  time in milliseconds to wait for
 * @param {Sahi expression} $condition -  condition to wait for.<br/>If specified, _wait will return if either the condition is met<br/>or if the time elapsed has exceeded timeout, whichever comes first.
 * 
 */
 function _wait ($timeout, $condition){}
/**
 * 
 * <pre><code>_log("Current user is " + $user); // Will log as plain text
 * 
 * _log("Current user is " + $user, "CUSTOM1"); // Will log in a different color
 * 
 * _log("Current user is " + $user, "INFO", "tiger.png"); // Will also add tiger.png in logs.</code></pre>
 * <info>
 * If you have multiple statements to be logged one after the other, combine them as one log statement for better performance.<br/>
 * </info>
 * 
 * @param {string} $message - Message to log
 * @param {string} $logType -  Changes the color in which log statement is displayed.<br/>Can be one of <code>"INFO"</code>, <code>"SUCCESS"</code>, <code>"FAILURE"</code>,<br/><code>"CUSTOM"</code>, <code>"CUSTOM1"</code>, <code>"CUSTOM2"</code>, <code>"CUSTOM3"</code>,<br/><code>"CUSTOM4"</code>, <code>"CUSTOM5"</code>, <code>"CUSTOM6"</code><br/>Defaults to <code>"INFO"</code>
 * @param {string} $imagePath -  Path to image file which will be logged along with the message. Relative paths will be resolved relative to current script. Introduced since Sahi Pro 6.0.0
 * 
 */
 function _log ($message, $logType, $imagePath){}
/**
 * 
 * _assert will do nothing if the condition passed to it is true<br/>
 * _assert will log failures to the playback logs if the condition evaluates to false.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <info>
 * This has the same signature as the generic API _assert.<br/>
 * </info>
 * <br/>
 * 
 * @param {boolean} $condition - condition to verify
 * @param {string} $message - message to log if condition fails
 * 
 */
 function _assert ($condition, $message){}
/**
 * 
 * Same as _assert<br/>
 * <info>
 * This has the same signature as the generic API _assertTrue.<br/>
 * </info>
 * 
 * @param {boolean} $condition - condition to verify
 * @param {string} $message - message to log if condition fails
 * 
 */
 function _assertTrue ($condition, $message){}
/**
 * 
 * _assertNotTrue will do nothing if the condition evaluates to false<br/>
 * _assertNotTrue will log failures to the playback logs if the condition evaluates to true.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <info>
 * This has the same signature as the generic API _assertNotTrue.<br/>
 * </info>
 * 
 * @param {boolean} $condition - condition which is expected to evaluate to false
 * @param {string} $message - message to log if condition evaluates to true
 * 
 */
 function _assertNotTrue ($condition, $message){}
/**
 * 
 * _assertFalse will do nothing if the condition evaluates to false<br/>
 * _assertFalse will log failures to the playback logs if the condition evaluates to true.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <info>
 * This has the same signature as the generic API _assertFalse.<br/>
 * </info>
 * 
 * @param {boolean} $condition - condition which is expected to evaluate to false
 * @param {string} $message - message to log if condition evaluates to true
 * 
 */
 function _assertFalse ($condition, $message){}
/**
 * 
 * _assertNull will do nothing if the value passed is null<br/>
 * _assertNull will log failures to the playback logs if the value is not null.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <info>
 * This has the same signature as the generic API _assertNull.<br/>
 * </info>
 * 
 * @param {anything} $value - Anything to be checked for null
 * @param {string} $message - message to log if value is not null
 * 
 */
 function _assertNull ($value, $message){}
/**
 * 
 * _assertNotNull will do nothing if the value passed is not null<br/>
 * _assertNotNull will log failures to the playback logs if the value is null.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <info>
 * This has the same signature as the generic API _assertNotNull.<br/>
 * </info>
 * 
 * @param {anything} $value - Anything to be checked for not null
 * @param {string} $message - message to log if value is null
 * 
 */
 function _assertNotNull ($value, $message){}
/**
 * 
 * _assertExists will do nothing if the element exists<br/>
 * _assertExists will log failures to the playback logs if the element does not exist<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <info>
 * This has the same signature as the generic API _assertExists.<br/>
 * </info>
 * 
 * @param {ae} $element - element to be checked for existence
 * @param {string} $message - message to log if element does not exist on page
 * 
 */
 function _assertExists ($element, $message){}
/**
 * 
 * _assertVisible will do nothing if the element is visible<br/>
 * _assertVisible will log failures to the playback logs if the element is not visible<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <info>
 * This has the same signature as the generic API _assertVisible.<br/>
 * </info>
 * 
 * @param {ae} $element - element to be checked for visibility.
 * @param {string} $message - message to log if element is not visible.
 * 
 */
 function _assertVisible ($element, $message){}
/**
 * 
 * _assertNotVisible will do nothing if the element is not visible<br/>
 * _assertNotVisible will log failures to the playback logs if the element is visible<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <info>
 * This has the same signature as the generic API _assertNotVisible.<br/>
 * </info>
 * 
 * @param {ae} $element - element to be checked for not visible.
 * @param {string} $message - message to log if element is visible.
 * 
 */
 function _assertNotVisible ($element, $message){}
/**
 * 
 * _assertNotExists will do nothing if the element does not exist<br/>
 * _assertNotExists will log failures to the playback logs if the element exists<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <info>
 * This has the same signature as the generic API _assertNotExists.<br/>
 * </info>
 * 
 * @param {ae} $element - element to be checked for non existence
 * @param {string} $message - message to log if element exists on page
 * 
 */
 function _assertNotExists ($element, $message){}
/**
 * 
 * _assertEqual will do nothing if the expected and actual values match<br/>
 * _assertEqual will log failures to the playback logs if the expected and actual values are not equal<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <info>
 * This has the same signature as the generic API _assertEqual.<br/>
 * </info>
 * 
 * @param {any} $expected - Expected value.<br/>Regular expressions can also be used. (eg. "/del/")
 * @param {any} $actual - Actual value.<br/>It is mostly some attribute of an Android element.
 * @param {string} $message -  Message to be written to logs if the expected and actual values are not equal
 * 
 */
 function _assertEqual ($expected, $actual, $message){}
/**
 * 
 * _assertNotEqual will do nothing if the expected and actual values do not match<br/>
 * _assertNotEqual will log failures to the playback logs if the expected and actual values are equal<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <info>
 * This has the same signature as the generic API _assertNotEqual.<br/>
 * </info>
 * 
 * @param {any} $expected - Expected value.<br/>Regular expressions can also be used. (eg. "/del/")
 * @param {any} $actual - Actual value.<br/>It is mostly some attribute of an Android element.
 * @param {string} $message -  Message to be written to logs if the expected and actual values are equal
 * 
 */
 function _assertNotEqual ($expected, $actual, $message){}
/**
 * 
 * _assertContainsText will do nothing if the expected string/regex is part of the text content of given element<br/>
 * _assertContainsText will log failures to the playback logs if the expected string/regex is not part of the text content of given element<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <info>
 * This has the same signature as the generic API _assertContainsText.<br/>
 * </info>
 * 
 * @param {string} $expected - Expected string.<br/>Regular expressions can also be used. (eg. "/del/")
 * @param {ae} $element - Element. We check if expected is a part of the text of this element.
 * @param {string} $message -  Message to be written to logs if the expected string is not part of the text of given element
 * 
 */
 function _assertContainsText ($expected, $element, $message){}
/**
 * 
 * _assertNotContainsText will do nothing if the expected string/regex is not part of the text content of given element<br/>
 * _assertNotContainsText will log failures to the playback logs if the expected string/regex is part of the text content of given element<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <info>
 * This has the same signature as the generic API _assertNotContainsText.<br/>
 * </info>
 * 
 * @param {string} $expected - Expected string.<br/>Regular expressions can also be used. (eg. "/del/")
 * @param {ae} $element - Element. We check if expected is not a part of the text of this element.
 * @param {string} $message -  Message to be written to logs if the expected string is part of the text of given element
 * 
 */
 function _assertNotContainsText ($expected, $element, $message){}
/**
 * 
 * This API helps extract specific content from strings.<br/>
 * <br/>
 * Example<br/>
 * <pre><code>// To get value "250" from "Rs. 250"
 * _extract("Rs. 250", "/Rs. (.*)/", true); // returns "250"
 * _extract("Rs. 250", "/Rs. (.*)/"); // returns an array ["Rs. 250", "250"]
 * 
 * 
 * // Multiple groups with and without onlyGroups
 * var $str = "The traffic light changed from red to green";
 * var $pattern = "/from (.*) to (.*)/";
 * 
 * var $extracted = _extract($str, $pattern);
 * // $extracted now has the overall match "from red to green" and the individual groups "red" and "green"
 * _assertEqual(["from red to green", "red", "green"], $extracted);
 * 
 * // Setting onlyGroups=true, we do not get back the overall match.
 * var $extracted = _extract($str, $pattern, true);
 * // $extracted now has only the individual groups "red" and "green"
 * _assertEqual(["red", "green"], $extracted);</code></pre>
 * <info>
 * This has the same signature as the generic API _extract.<br/>
 * </info>
 * 
 * @param { s} $str -  String to find pattern in
 * @param { string|regular expression} $pattern -  Regular expression as native regex (/a/) or as a string ("/a/")
 * @param { b} $onlyGroups -  if true, returns only the groups matched.
 * 
 */
 function _extract ($str, $pattern, $onlyGroups){}
/**
 * 
 * Starts the Web context. Steps following this step will be directed to the hybrid content of the WebView.<br/>
 * To stop targeting hybrid content and start targeting native content, call _aStopWebContext<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * @param {string} $packageName - Package name of the app that contains the WebView that hosts the hybrid content.
 * 
 */
 function _aStartWebContext ($packageName){}
/**
 * 
 * Stops the Web context. Steps following this step will be targeted at the native elements.<br/>
 * <info>
 * This is an Android specific API.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _aStopWebContext (){}
/**
 * 
 * Starts the application based on packageName and activityName.<br/>
 * 
 * @param {string} $packageName - Package name of the application
 * @param {string} $activityName - Activity name of the application which you wanted to start.
 * 
 */
 function _startApplication ($packageName, $activityName){}
/**
 * 
 * Returns a handle to the applet object. All child elements of the applet object are accessed from this handle.<br/>
 * <br/>
 * <pre><code>_click(_applet("SwingSet2Applet").jbutton("sun_small.gif"))</code></pre>
 * <br/>
 * <info>_applet is the same as _a</info>
 * Information on usage can be found <a href="using-sahi/applet.html">here</a>
 * 
 * @param {string} $identifier -  id of applet object
 * 
 */
 function _applet ($identifier){}
/**
 * 
 * Returns a handle to the applet object. All child elements of the applet object are accessed from this handle.<br/>
 * <br/>
 * <pre><code>_click(_a("SwingSet2Applet").jbutton("sun_small.gif"))</code></pre>
 * <br/>
 * <info>_applet is the same as _a</info>
 * Information on usage can be found <a href="using-sahi/applet.html">here</a>
 * 
 * @param {string} $identifier -  id of applet object
 * 
 */
 function _a ($identifier){}
/**
 * 
 * _assert will do nothing if the condition passed to it is true<br/>
 * _assert will log failures to the playback logs if the condition evaluates to false.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * <br/>
 * 
 * @param {boolean} $condition - condition to verify
 * @param {string} $message - message to log if condition fails
 * 
 */
 function _assert ($condition, $message){}
/**
 * 
 * Same as _assert<br/>
 * 
 * @param {boolean} $condition - condition to verify
 * @param {string} $message - message to log if condition fails
 * 
 */
 function _assertTrue ($condition, $message){}
/**
 * 
 * _assertNotTrue will do nothing if the condition evaluates to false<br/>
 * _assertNotTrue will log failures to the playback logs if the condition evaluates to true.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * 
 * @param {boolean} $condition - condition which is expected to evaluate to false
 * @param {string} $message - message to log if condition evaluates to true
 * 
 */
 function _assertNotTrue ($condition, $message){}
/**
 * 
 * _assertFalse will do nothing if the condition evaluates to false<br/>
 * _assertFalse will log failures to the playback logs if the condition evaluates to true.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * 
 * @param {boolean} $condition - condition which is expected to evaluate to false
 * @param {string} $message - message to log if condition evaluates to true
 * 
 */
 function _assertFalse ($condition, $message){}
/**
 * 
 * _assertNull will do nothing if the value passed is null<br/>
 * _assertNull will log failures to the playback logs if the value is not null.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * 
 * @param {anything} $value - Anything to be checked for null
 * @param {string} $message - message to log if value is not null
 * 
 */
 function _assertNull ($value, $message){}
/**
 * 
 * _assertNotNull will do nothing if the value passed is not null<br/>
 * _assertNotNull will log failures to the playback logs if the value is null.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * 
 * @param {anything} $value - Anything to be checked for not null
 * @param {string} $message - message to log if value is null
 * 
 */
 function _assertNotNull ($value, $message){}
/**
 * 
 * _assertExists will do nothing if the element exists<br/>
 * _assertExists will log failures to the playback logs if the element does not exist<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element to be checked for existence
 * @param {string} $message - message to log if element does not exist on page
 * 
 */
 function _assertExists ($element, $message){}
/**
 * 
 * _assertVisible will do nothing if the element is visible<br/>
 * _assertVisible will log failures to the playback logs if the element is not visible<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element to be checked for visibility.
 * @param {string} $message - message to log if element is not visible.
 * 
 */
 function _assertVisible ($element, $message){}
/**
 * 
 * _assertNotVisible will do nothing if the element is not visible<br/>
 * _assertNotVisible will log failures to the playback logs if the element is visible<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element to be checked for not visible.
 * @param {string} $message - message to log if element is visible.
 * 
 */
 function _assertNotVisible ($element, $message){}
/**
 * 
 * _assertNotExists will do nothing if the element does not exist<br/>
 * _assertNotExists will log failures to the playback logs if the element exists<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element to be checked for non existence
 * @param {string} $message - message to log if element exists on page
 * 
 */
 function _assertNotExists ($element, $message){}
/**
 * 
 * _assertEqual will do nothing if the expected and actual values match<br/>
 * _assertEqual will log failures to the playback logs if the expected and actual values are not equal<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * 
 * @param {any} $expected - Expected value.<br/>This value can be any normal javascript data type or an array<br/>Regular expressions can also be used. (eg. "/del/")
 * @param {any} $actual - Actual value.<br/>This value can be any normal javascript data type or an array.<br/>It is mostly some attribute of a HTML DOM element.
 * @param {string} $message -  Message to be written to logs if the expected and actual values are not equal
 * 
 */
 function _assertEqual ($expected, $actual, $message){}
/**
 * 
 * Asserts that expected and actual arrays are equal, else logs the message.<br/>
 * <danger>DEPRECATED:<br/>
 * This is internally called by _assertEqual if expected and actual are arrays.<br/>
 * Use _assertEqual instead</danger>
 * 
 * @param {array} $expected - Expected array.
 * @param {array} $actual - Actual array.
 * @param {string} $message -  Message to be written to logs if the expected and actual values are not equal
 * 
 */
 function _assertEqualArrays ($expected, $actual, $message){}
/**
 * 
 * _assertNotEqual will do nothing if the expected and actual values do not match<br/>
 * _assertNotEqual will log failures to the playback logs if the expected and actual values are equal<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * 
 * @param {any} $expected - Expected value.<br/>This value can be any normal javascript data type or an array<br/>Regular expressions can also be used. (eg. "/del/")
 * @param {any} $actual - Actual value.<br/>This value can be any normal javascript data type or an array.<br/>It is mostly some attribute of a HTML DOM element.
 * @param {string} $message -  Message to be written to logs if the expected and actual values are equal
 * 
 */
 function _assertNotEqual ($expected, $actual, $message){}
/**
 * 
 * _assertContainsText will do nothing if the expected string/regex is part of the text content of given element<br/>
 * _assertContainsText will log failures to the playback logs if the expected string/regex is not part of the text content of given element<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * 
 * @param {string} $expected - Expected string.<br/>Regular expressions can also be used. (eg. "/del/")
 * @param {HTML DOM/ Windows/ Java element} $element - Element. We check if expected is a part of the text of this element.
 * @param {string} $message -  Message to be written to logs if the expected string is not part of the text of given element
 * 
 */
 function _assertContainsText ($expected, $element, $message){}
/**
 * 
 * _assertContainsText will do nothing if the expected string/regex is not part of the text content of given element<br/>
 * _assertContainsText will log failures to the playback logs if the expected string/regex is part of the text content of given element<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * </danger>
 * 
 * @param {string} $expected - Expected string.<br/>Regular expressions can also be used. (eg. "/del/")
 * @param {HTML DOM/ Windows/ Java element} $element - Element. We check if expected is not a part of the text of this element.
 * @param {string} $message -  Message to be written to logs if the expected string is part of the text of given element
 * 
 */
 function _assertNotContainsText ($expected, $element, $message){}
/**
 * 
 * _assertEqualImages compares two images. If the images are similar, assertion passes.<br/>
 * If the images are dissimilar, the images and the failure messasge will be displayed in logs as failure.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * Use <a href='screenshot-apis.html#_compareImages'>_compareImages</a> instead.<br/>
 * </danger>
 * <info>This api is dependent on GraphicsMagick software.<br/>
 * To configure the GraphicsMagick on the system, please refer <a href='../sahi-apis/screenshot-apis.html#Configuring GraphicsMagick'>Configuring GraphicsMagick</a>
 * </info>
 * <warning>
 * If _sahi.SKIP_ASSERT_SNAPSHOTS is specified as true, this API will be skipped.<br/>
 * </warning>
 * 
 * @param {string} $expectedImagePath - Expected image path. Relative paths will be resolved relative to current executing script.
 * @param {string} $actualImagePath - Actual image path. Relative paths will be resolved relative to current executing script.
 * @param {float} $differenceThreshold - If the difference between the two images is lesser than or equal to the differenceThreshold number, they are considered to be same.
 * @param {boolean} $displayOnSuccess - When true, the expected image, actual image and the differential image will be embedded in the playback log, if the assertion succeeds. Default is false, which means only dissimilar images will be logged. Note that these images will always be embedded in case of assertion failure.
 * @param {string} $failureMessage -  Message to be written to logs if the image comparison fails
 * 
 */
 function _assertEqualImages ($expectedImagePath, $actualImagePath, $differenceThreshold, $displayOnSuccess, $failureMessage){}
/**
 * 
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/responsive/arehorizontallyAligned.png" width="600px" title="Horizontally Aligned"/>
 * _assertHorizontallyAligned checks if two elements are horizontally aligned. If the elements are horizontally aligned, assertion passes.<br/>
 * If the elements are not horizontally aligned, the failure messasge will be displayed in logs as failure.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * Use <a href='responsive-apis.html#_areHorizontallyAligned'>_areHorizontallyAligned</a> instead.<br/>
 * </danger>
 * Example<br/>
 * <pre><code>_assertHorizontallyAligned(_div("item1"), _div("item2")) //by default middle position will be checked
 * _assertHorizontallyAligned(_div("item1"), _div("item2"), "top")
 * _assertHorizontallyAligned(_div("item1"), _div("item2"), "top", 20) //gap can take the values between [-20, 20]
 * _assertHorizontallyAligned(_div("item1"), _div("item2"), "top", [0, 20]) //gap is only positive i.e. no overlapping is allowed
 * _assertHorizontallyAligned(_div("item1"), _div("item2"), "top", [0, 20], 10) //gap is only positive i.e. no overlapping is allowed and offset for the top edge is 10</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $leftElement - Left element to be asserted.
 * @param {HTML DOM/ Windows/ Java element} $rightElement - Right element to be asserted.
 * @param {string} $position - Position to be checked. By default position = "middle". Value of position can be either "top" or "bottom" or "both" or "middle".
 * @param {integer array|integer} $gap - Gap between right edge of left element and left edge of right element. If gap is an integer, it will take the exact value. And if gap is an array, Eg. gap = [10, 40], implies gap can range from 10 to 40. To force sahi to check for the gap between the two elements, use the gap. If nothing provided it wouldn't consider gap.
 * @param {integer array|integer} $offset -  Offset above and below within which to look for elements boundary for given position. If offset is an integer, both above and below offsets are set to this offset. rightElement may be slightly above or below leftElement. Sahi normally matches only elements whose bases match. To force it to look a little above or below while looking to the right, use the offset.
 * @param {string} $message -  Message to be written to logs if the assertion fails
 * 
 */
 function _assertHorizontallyAligned ($leftElement, $rightElement, $position, $gap, $offset, $message){}
/**
 * 
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/responsive/areVerticallyAligned.png" width="600px" title="Vertically Aligned"/>
 * _assertVerticallyAligned checks if two elements are vertically aligned. If the elements are vertically aligned, assertion passes.<br/>
 * If the elements are not vertically aligned, the failure messasge will be displayed in logs as failure.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * Use <a href='responsive-apis.html#_areVerticallyAligned'>_areVerticallyAligned</a> instead.<br/>
 * </danger>
 * Example<br/>
 * <pre><code>_assertVerticallyAligned(_div("item1"), _div("item2")) //by default center position will be checked
 * _assertVerticallyAligned(_div("item1"), _div("item2"), "left")
 * _assertVerticallyAligned(_div("item1"), _div("item2"), "left", 20) //gap can take the values between [-20, 20]
 * _assertVerticallyAligned(_div("item1"), _div("item2"), "left", [0, 20]) //gap is only positive i.e. no overlapping is allowed</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $topElement - Top element to be asserted.
 * @param {HTML DOM/ Windows/ Java element} $bottomElement - Bottom element to be asserted.
 * @param {string} $position - Position to be checked. By default position = "center". Value of position can be either "left" or "right" or "both" or "center".
 * @param {integer array|integer} $gap - Gap between bottom edge of top element and top edge of bottom element. If gap is an integer, it will take the exact value. And if gap is an array, Eg. gap = [0, 40], implies gap can range from 0 to 40. To force sahi to check for the gap between the two elements, use the gap. If nothing provided it wouldn't consider gap.
 * @param {integer array|integer} $offset -  Offset left and right within which to look for elements boundary for given position. If offset is an integer, both left and right offsets are set to this offset. topElement may be slightly left or right to the bottomElement.
 * @param {string} $message -  Message to be written to logs if the assertion fails
 * 
 */
 function _assertVerticallyAligned ($topElement, $bottomElement, $position, $gap, $offset, $message){}
/**
 * 
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/responsive/isCentered.png" width="600px" title="isCentered"/>
 * _assertCentered checks if inner element is vertically or horizontally centered to the container element. If the elements are vertically or horizontally aligned, assertion passes.<br/>
 * If the elements are not vertically or horizontally aligned, the failure messasge will be displayed in logs as failure.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * Use <a href='responsive-apis.html#_isCentered'>_isCentered</a> instead.<br/>
 * </danger>
 * Example<br/>
 * <pre><code>_assertCentered(_div("item1"), _div("item2"), "vertical")
 * _assertCentered(_div("item1"), _div("item2"), "horizontal")</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - Inner element to be asserted.
 * @param {HTML DOM/ Windows/ Java element} $containerElement - Container element to be asserted.
 * @param {string} $alignment - Can be "vertical" or "horizontal".
 * @param {string} $message -  Message to be written to logs if the assertion fails
 * 
 */
 function _assertCentered ($element, $containerElement, $alignment, $message){}
/**
 * 
 * _assertVisiblyInside checks if element1 is visibly inside element2. If element1 is visibly inside element2, assertion passes.<br/>
 * If element1 is not visibly inside element2, the failure messasge will be displayed in logs as failure.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * Use <a href='responsive-apis.html#_isVisiblyInside'>_isVisiblyInside</a> instead.<br/>
 * </danger>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element1 - First element to be asserted.
 * @param {HTML DOM/ Windows/ Java element} $element2 - Second element to be asserted.
 * @param {string} $message -  Message to be written to logs if the assertion fails
 * 
 */
 function _assertVisiblyInside ($element1, $element2, $message){}
/**
 * 
 * _assertVisiblyOutside checks if element1 is visibly outside element2 i.e one is not contained within other. If element1 is visibly outside element2, assertion passes.<br/>
 * If element1 is not visibly outside element2, the failure messasge will be displayed in logs as failure.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * Use <a href='responsive-apis.html#_isVisiblyOutside'>_isVisiblyOutside</a> instead.<br/>
 * </danger>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element1 - First element to be asserted.
 * @param {HTML DOM/ Windows/ Java element} $element2 - Second element to be asserted.
 * @param {string} $message -  Message to be written to logs if the assertion fails
 * 
 */
 function _assertVisiblyOutside ($element1, $element2, $message){}
/**
 * 
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/responsive/isVisiblyOn.png" width="600px" title="isVisiblyOn"/>
 * _assertVisiblyOn checks if element1 placed on element2. element1 may extend beyond element2 boundaries. If element1 is visibly placed on element2, assertion passes.<br/>
 * If element1 is not visibly placed on element2, the failure messasge will be displayed in logs as failure.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * Use <a href='responsive-apis.html#_isVisiblyOn'>_isVisiblyOn</a> instead.<br/>
 * </danger>
 * <br/>
 * Example<br/>
 * <pre><code>_assertVisiblyOn(_div("item1"), _div("item2"), [0,25]); //implies _div("item1") is placed on _div("item2") where top edge of div("item1") can be upto
 * // 25 units below div("item2") top edge</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element1 - First element to be asserted.
 * @param {HTML DOM/ Windows/ Java element} $element2 - Second element to be asserted. Base Element.
 * @param {integer array|integer} $topSpace - Space between top edges of the two elements. If topSpace is an integer, it will take the exact value. And if topSpace = [-20, 0], implies top edge of element2 lies above top edge of element1. To force sahi to check for the topSpace between the two elements, use the topSpace. If nothing provided it wouldn't consider topSpace.
 * @param {integer array|integer} $rightSpace - Space between right edges of the two elements. If rightSpace is an integer, it will take the exact value. And if rightSpace = [0, 20], implies right edge of element2 lies to the right side of right edge of element1. To force sahi to check for the rightSpace between the two elements, use the rightSpace. If nothing provided it wouldn't consider rightSpace.
 * @param {integer array|integer} $bottomSpace - Space between bottom edges of the two elements. If bottomSpace is an integer, it will take the exact value. And if bottomSpace = [0, 20], implies bottom edge of element2 lies below bottom edge of element1. To force sahi to check for the bottomSpace between the two elements, use the bottomSpace. If nothing provided it wouldn't consider bottomSpace.
 * @param {integer array|integer} $leftSpace - Space between left edges of the two elements. If leftSpace is an integer, it will take the exact value. And if leftSpace = [0, 20], implies top edge of element2 lies to the right side of left edge of element1. To force sahi to check for the leftSpace between the two elements, use the leftSpace. If nothing provided it wouldn't consider leftSpace.
 * @param {string} $message -  Message to be written to logs if the assertion fails
 * 
 */
 function _assertVisiblyOn ($element1, $element2, $topSpace, $rightSpace, $bottomSpace, $leftSpace, $message){}
/**
 * 
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/responsive/isFitsWidth.png" width="600px" title="isFitsWidth"/>
 * _assertFitsWidth checks if element1 fits within the width of element2. If element1 fits within element2, assertion passes.<br/>
 * If element1 does not fits within element2, the failure messasge will be displayed in logs as failure.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * Use <a href='responsive-apis.html#_isFitsHeight'>_isFitsWidth</a> instead.<br/>
 * </danger>
 * <br/>
 * Example<br/>
 * <pre><code>_assertFitsWidth(_div("item1"), _div("item2"), [0,25], [-25,0]);  //implies _div("item1") is  on _div("item2") where left edge of div("item1") can be
 * //upto 25 units right to div("item2") left edge and right edge of div("item1") can be upto 25 units left to div("item2") right edge</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element1 - First element to be asserted.
 * @param {HTML DOM/ Windows/ Java element} $element2 - Second element to be asserted. Base Element.
 * @param {integer array|integer} $leftSpace - Space between left edges of the two elements. If leftSpace is an integer, it will take the exact value. And if leftSpace = [0, 20], implies top edge of element2 lies to the right side of left edge of element1. If nothing provided leftSpace will be considered as 0.
 * @param {integer array|integer} $rightSpace - Space between right edges of the two elements. If rightSpace is an integer, it will take the exact value. And if rightSpace = [0, 20], implies right edge of element2 lies to the right side of right edge of element1. If nothing provided rightSpace will be considered as 0.
 * @param {string} $message -  Message to be written to logs if the assertion fails
 * 
 */
 function _assertFitsWidth ($element1, $element2, $leftSpace, $rightSpace, $message){}
/**
 * 
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/responsive/isFitsHeight.png" width="600px" title="isFitsHeight"/>
 * _assertFitsHeight checks if element1 fits within the height of element2. If element1 fits within element2, assertion passes.<br/>
 * If element1 does not fits within element2, the failure messasge will be displayed in logs as failure.<br/>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * Use <a href='responsive-apis.html#_isFitsHeight'>_isFitsHeight</a> instead.<br/>
 * </danger>
 * <br/>
 * Example<br/>
 * <pre><code>_assertFitsHeight(_div("item1"), _div("item2"), [0,25], [-25,0]);  //implies _div("item1") is  on _div("item2") where top edge of div("item1") can be
 * //upto 25 units below div("item2") top edge and bottom edge of div("item1") can be upto 25 units above div("item2") bottom edge</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element1 - First element to be asserted.
 * @param {HTML DOM/ Windows/ Java element} $element2 - Second element to be asserted. Base Element.
 * @param {integer array|integer} $topSpace - Space between top edges of the two elements. If topSpace is an integer, it will take the exact value. And if topSpace = [-20, 0], implies top edge of element2 lies above top edge of element1. If nothing provided topSpace will be considered as 0.
 * @param {integer array|integer} $bottomSpace - Space between bottom edges of the two elements. If bottomSpace is an integer, it will take the exact value. And if bottomSpace = [0, 20], implies bottom edge of element2 lies below bottom edge of element1. If nothing provided bottomSpace will be considered as 0.
 * @param {string} $message -  Message to be written to logs if the assertion fails
 * 
 */
 function _assertFitsHeight ($element1, $element2, $topSpace, $bottomSpace, $message){}
/**
 * 
 * Iterates over the data and calls fn for each row of data.<br/>
 * preFn and postFn if specified, are called before and after fn for each row.<br/>
 * preFn and postFn are guaranteed to be called even if fn fails or returns midway.<br/>
 * <br/>
 * Example:<br/>
 * We will create a function doAdd and call it over multiple sets of data.<br/>
 * <br/>
 * <pre><code>// function to be called
 * function doAdd($first, $second, $total){
 *   _setValue(_textbox("first"), $first);
 *   _setValue(_textbox("second"), $second);
 *   _click(_button("Add"));
 *   _assertEqual($total, _textbox("total").value);
 * }
 * 
 * // data
 * var $data = [
 * [2, 3, 5],
 * [1, 2, 4],
 * [4, 3, 7]
 * ]
 * 
 * // Pass doAdd and $data to _dataDrive.
 * _dataDrive(doAdd, $data); // will call doAdd for each row
 * 
 * // Note how doAdd is passed as a function (without quotes or brackets)
 * // _dataDrive(doAdd, $data); // CORRECT
 * // _dataDrive(doAdd(), $data); // WRONG to call with brackets
 * // _dataDrive("doAdd", $data); // WRONG to use a string
 * 
 * // Call with preFn and postFn
 * function logBefore() {
 *   _log("Before");
 * }
 * function logAfter() {
 *   _log("After");
 * }
 * _dataDrive(doAdd, $data, logBefore, logAfter);</code></pre>
 * 
 * @param {function} $fn -  Javascript function to be executed repeatedly
 * @param {2D Array} $data -  Data on which fn should be called iteratively
 * @param {function} $preFn -  Javascript function to be executed at each iteration BEFORE fn
 * @param {function} $postFn -  Javascript function to be executed at each iteration AFTER fn
 * 
 */
 function _dataDrive ($fn, $data, $preFn, $postFn){}
/**
 * 
 * <pre><code>var $db = _getDB("oracle.jdbc.driver.OracleDriver",
 *           "jdbc:oracle:thin:@dbserver:1521:sid",
 *           "username", "password");</code></pre>
 * <warning>The driver class has to be present in the classpath of Sahi.<br/>
 * More info: <a href="../using-sahi/adding-jars-to-sahis-classpath.html">Adding jars to Sahi's classpath</a></warning>
 * 
 * @param {string} $driver - JDBC driver class (fully qualified name)
 * @param {string} $jdbcurl -  JDBC URL
 * @param {string} $username -  username to connect to the database
 * @param {string} $password - password to connect to the database
 * 
 */
 function _getDB ($driver, $jdbcurl, $username, $password){}
/**
 * 
 * <pre><code>var $props = new java.util.Properties();
 * $props.put("user", "scott");
 * $props.put("password", "tiger");
 * $props.put("internal_logon", "sysoper");
 * var $db = _getDB("oracle.jdbc.driver.OracleDriver", "jdbc:oracle:thin:@dbserver:1521:sid", $props);</code></pre>
 * <warning>The driver class has to be present in the classpath of Sahi.<br/>
 * More info: <a href="../using-sahi/adding-jars-to-sahis-classpath.html">Adding jars to Sahi's classpath</a></warning>
 * 
 * @param {string} $driver - JDBC driver class (fully qualified name)
 * @param {string} $jdbcurl -  JDBC URL
 * @param {Properties object} $propertiesObj -  A java.util.Properties object with relevant key values
 * 
 */
 function _getDB ($driver, $jdbcurl, $propertiesObj){}
/**
 * 
 * Returns an array of rows. Each column in an array can be accessed by index or column name.<br/>
 * <br/>
 * Example<br/>
 * <br/>
 * Given a database table "User" like<br/>
 * <table>
 * <tr><td>Id</td><td>Name</td><td>Age</td></tr>
 * <tr><td>1</td><td>Ram</td><td>18</td></tr>
 * <tr><td>2</td><td>Amir</td><td>20</td></tr>
 * </table>
 * <br/>
 * <pre><code>var $db = _getDB("..."); // look at _getDB for syntax
 * 
 * var $rs = $db.select("select Name, Age from User");
 * 
 * var $row = $rs[1]; // second row
 * 
 * // access column using index
 * var $userName = $row[0];
 * 
 * // or access column using name
 * var $userName = $row["Name"];
 * 
 * // You can also access directly from $rs without using row
 * var $userName = $rs[1]["Name"];</code></pre>
 * <info>Note the possibility of using index (<code>$rs[0][1]</code>) as well as name for column  (<code>$rs[0]["Age"]</code>).</info>
 * 
 * @param {string} $sql - sql query to execute
 * 
 */
 SahiDB.select = function($sql){}
/**
 * 
 * Returns data along with column names as the first row.<br/>
 * Helps in knowing column names when select query has been made with <code>select * ...</code><br/>
 * <br/>
 * <pre><code>var $db = _getDB("..."); // look at _getDB for syntax
 * 
 * var $rs = $db.selectWithHeader("select * from User where 1=0");
 * var $headers = $rs[0];// returns ["Name","Age"]
 * var columnName0 = $headers[0]; // "Name"
 * var columnName1 = $headers[1]; // "Age"</code></pre>
 * 
 * @param {string} $sql - sql query to execute
 * 
 */
 SahiDB.selectWithHeader = function($sql){}
/**
 * 
 * Executes a non-select query. Used for insert/update/delete queries.<br/>
 * <br/>
 * <pre><code>$db.update("delete from User where id=2");</code></pre>
 * 
 * @param {string} $sql - sql insert/update/delete query to execute
 * 
 */
 SahiDB.update = function($sql){}
/**
 * 
 * Debug messages are written in the Sahi console and not in the playback logs.<br/>
 * It is useful when correlating to messages appearing on the Sahi console.<br/>
 * <br/>
 * Example:<br/>
 * <br/>
 * <pre><code>_debug("Current count is " + $i);</code></pre>
 * 
 * @param {string} $message - Message to write to Sahi console
 * 
 */
 function _debug ($message){}
/**
 * 
 * Same as _debug, but prints to the error stream.<br/>
 * 
 * @param {string} $message - Message to write to Sahi console error stream
 * 
 */
 function _debugToErr ($message){}
/**
 * 
 * Prints the message into a file for debugging purposes.<br/>
 * 
 * @param {string} $message - Message to write to file
 * @param {string} $filePath - Path to file. Relative path resolves relative to where Sahi's process is started from.
 * 
 */
 function _debugToFile ($message, $filePath){}
/**
 * 
 * Runs the script till that point and pauses execution. Acts like a debugger breakpoint.<br/>
 * Further playback can be controlled from the Controller Playback tab via Step or Play buttons.<br/>
 * <warning>DO NOT leave this in a production script, since it needs user input to proceed and will halt execution</warning>
 * 
 * <tr><td>None</td></tr>
 */
 function _pause (){}
/**
 * 
 * Alerts the message on the browser. This allows a very handy, interactive way of debugging scripts.<br/>
 * <br/>
 * Example:<br/>
 * <br/>
 * <pre><code>_alert("Current count is " + $i);</code></pre>
 * <warning>DO NOT leave this in a production script, since it needs user input to proceed and will halt execution</warning>
 * 
 * @param {string} $message - Message to be alerted on browser.
 * 
 */
 function _alert ($message){}
/**
 * 
 * Brings up a javascript confirm dialog with given message. Use only while debugging.<br/>
 * 
 * @param {string} $message - Message to confirm
 * 
 */
 function _confirm ($message){}
/**
 * 
 * Brings up a javascript prompt with given message. Use only while debugging.<br/>
 * 
 * @param {string} $message - Message to prompt
 * 
 */
 function _prompt ($message){}
/**
 * 
 * Highlights an element with a red border. Used for debugging purposes.<br/>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - Element to highlight
 * 
 */
 function _highlight ($element){}
/**
 * 
 * _startDocumentation starts the documentation. All steps after this line will be documented until a _stopDocumentation call is made.<br/>
 * <br/>
 * <info>
 * When to use $refFile:<br/>
 * Suppose you had already created a documentation using this API (say reference_doc.sah) and edited it.<br/>
 * You may have modified descriptions and deleted some unnecessary screenshots.<br/>
 * When your application screens change, you may want to just recapture the screenshots but leave the descriptions intact.<br/>
 * <br/>
 * To create an updated version of this document with updated screenshots, pass reference_doc.sah as the $refFile.<br/>
 * <code>_startDocumentation("doc2.sah", true, "reference_doc.sah");</code><br/>
 * <br/>
 * doc2.sah will be a copy of reference_doc.sah except for the updated screenshots.<br/>
 * </info>
 * <br/>
 * <pre><code>_focusWindow(); // This is needed since we need screenshots of the application window.
 * _startDocumentation("doc.sah", true, "reference_doc.sah"); // doc.sah is the desired output script that contains the documented Sahi steps with screenshots.
 * _navigateTo("http://sahi.co.in/demo/training/");
 * _setValue(_textbox("user"), "test");
 * _setValue(_password("password"), "secret");
 * _click(_submit("Login"));
 * _assertVisible(_textbox("total"));
 * _stopDocumentation(); // Documentation stopped
 * _click(_button("Logout"));</code></pre>
 * <danger>
 * When steps are executed and documented, the screenshots have to be taken for the main application window. Hence we need to call <code>_focusWindow</code> before <code>_startDocumentation</code> to bring the application window into focus.<br/>
 * </danger>
 * 
 * @param {string} $filepath - File path of the output Sahi script containing documentation with screenshots.
 * @param {boolean} $overwrite - If true, overwrites content. Default is false, which appends at the end of existing content.
 * @param {string} $refFile - File path of the reference sahi document script. This parameter will change the Sahi document's description and screenshots accordingly.<br/>The modification to this file will work as the reference to the next version of the document.<br/>To create the reference file, please do the following,<br/>1. If you have recorded the script in documentation mode, export this doc file and use as a reference file.<br/>Please refer to the "Export as HTML" content in the <a href='../using-sahi/sahi-as-a-documentation-tool.html#Viewing and Editing Document'>Viewing and Editing Document</a> for how to export the document.<br/>2. If you have not recorded the script in documentation mode, use the below statement in your script,<br/>_startDocumentation("sourceFile.sah", true);<br/>This will create sourceFile.sah (script with documentation and screenshots) on first playback. Use this as your reference file.
 * 
 */
 function _startDocumentation ($filepath, $overwrite, $refFile){}
/**
 * 
 * _stopDocumentation will stop the documentation.<br/>
 * <br/>
 * <pre><code>_startDocumentation("doc.sah"); //Documentation started
 * _navigateTo("http://sahi.co.in/demo/training/");
 * _setValue(_textbox("user"), "test");
 * _setValue(_password("password"), "secret");
 * _click(_submit("Login"));
 * _assertVisible(_textbox("total"));
 * _stopDocumentation(); // Documentation stopped
 * _click(_button("Logout"));</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 function _stopDocumentation (){}
/**
 * 
 * Reads the excel sheet and returns data as an associative array.<br/>
 * <br/>
 * Given an Excel Sheet like<br/>
 * <br/>
 * <table>
 * <tr><td></td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td>F</td><td>G</td></tr>
 * <tr><td>1</td><td>Name</td><td>Age</td><td></td><td></td><td></td><td></td><td></td></tr>
 * <tr><td>2</td><td>Ram</td><td>18</td><td></td><td></td><td></td><td></td><td></td></tr>
 * <tr><td>3</td><td>Amir</td><td>20</td><td></td><td></td><td></td><td></td><td></td></tr>
 * <tr><td>4</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>
 * </table>
 * <br/>
 * <pre><code>var $data = _readExcelFile("data.xls");</code></pre>
 * $data is now<br/>
 * <pre><code>[
 * {"Name":"Ram","Age":"18"}
 * {"Name":"Amir","Age":"20"}
 * ]</code></pre>
 * It can be accessed like this:<br/>
 * <pre><code>_log("Name of first user is: " + $data[0]["Name"]); // logs "Ram"
 * _log("Age of second user is: " + $data[1]["Age"]); // logs "20"</code></pre>
 * 
 * @param {string} $filePath -  path to Excel file. Can be of extension .xls or .xlsx
 * @param {string} $sheetName -  Sheet name. Defaults to sheetname of first sheet.
 * @param {boolean} $includeHeader -  If true, returns the header row also as the first row. Default false.
 * @param {boolean} $ignoreEmptyRows -  ignores the empty lines. Defaults to false.
 * 
 */
 function _readExcelFile ($filePath, $sheetName, $includeHeader, $ignoreEmptyRows){}
/**
 * 
 * The example below illustrates the usage of various APIs.<br/>
 * <pre><code>//Get a handle to the Excel sheet
 * var $excel = _getExcel("D:\\poiTest.xls","Sheet1");
 * 
 * //Set Data
 * var $excelData=[["ajay","babu","cheeran"],["david","elango","frank"],
 * ["gokul","hari","irfan"],["jo","kumar","latha"],["mani","naraen","ojha"],
 * ["peter","queen","richard"],["shalini","thomas","umesh"]];
 * $excel.setData($excelData);
 * 
 * //Get Data
 * var $getdata=$excel.getData();
 * _assertEqual("irfan",$getdata[2][2]);
 * 
 * //Insert New Row at end
 * var $insertRowData=["kathir","femina","jandir"];
 * $excel.insertRow($insertRowData);
 * 
 * //Insert New Row at given index
 * var $insertRowData=["kathir","femina","jandir"];
 * $excel.insertRow($insertRowData, 2); // will insert at index 2. Shifts other cells down
 * 
 * //Insert New Rows at end
 * var $insertRowsData=[["shoba","ravi","vasi"],["kajol","rani","sharuk"]];
 * $excel.insertRows($insertRowsData);
 * 
 * //Insert New Rows at given index
 * var $insertRowsData=[["shoba","ravi","vasi"],["kajol","rani","sharuk"]];
 * $excel.insertRow($insertsRowData, 2); // will insert at index 2. Shifts other cells down
 * 
 * //Delete Row at index 4
 * var $deleteRowIndex=4;
 * $excel.deleteRow($deleteRowIndex);
 * 
 * //Delete Rows indexed 1 and 4
 * var $deleteRowsIndexes=[1,4];
 * $excel.deleteRows($deleteRowsIndexes);
 * 
 * //Delete Rows from row 3 to end
 * $excel.deleteRows(3);
 * 
 * //Delete Rows from row 3 to row 8
 * $excel.deleteRows(3, 8);
 * 
 * //Get Cell Value at cell position 2,2
 * var $excelGet=$excel.get(2, 2);
 * _assertEqual("xezwanth", $excelGet);
 * 
 * //Set Cell Value at cell position 2,2
 * var $excelData=$excel.set(2,2,"444-444-4444");
 * 
 * //Get String array of all Sheet Names on that Excel.
 * var $arrayOfSheetNames = $excel.getSheetNames();
 * 
 * //Get ExcelPoi Workbook object
 * var $workbook = $excel.getRawWorkbook();</code></pre>
 * <info>
 * Since 6.0.0, the following changes have been done.<br/>
 * <ul>
 * <li>If a cell has a formula, <code>getData</code> and <code>get</code> functions return value instead of formula. Added a method <code>getCellFormula</code> that returns formula.</li></li>
 * <li>Added method <code>getSheetNames</code> that returns all the sheet names as a String array</li>
 * <li>Added method <code>getRawWorkbook</code> which returns a Workbook POI object. This gives the user the flexibility to deal with the Workbook object directly</li>
 * <li>Added <code>getCellObject</code> that returns a Cell POI object.</li>
 * <li>Added <code>getCellFont</code> that returns a Font POI object. </li>
 * </ul>
 * <br/>
 * Since 6.1.0, <code>$excel.getDataForDataDrive()</code> API has been added which returns data in a format appropriate for passing into _dataDrive.<br/>
 * See <a href="data-drive-apis.html#Excel Sheet">getDataForDataDrive sample usage</a>.<br/>
 * </info>
 * 
 * @param {string} $filePath -  path to Excel file. Can be of extension .xls or .xlsx
 * @param {string} $sheetName -  Sheet name. Defaults to sheetname of first sheet.
 * 
 */
 function _getExcel ($filePath, $sheetName){}
/**
 * 
 * _execute allows calling batch files, shell scripts or regular commands from Sahi script.<br/>
 * <pre><code>_execute("C:\\sendemail.bat"); // runs C:\sendemail.bat and returns immediately while sendmail runs in the background
 * 
 * _execute("C:\\sendemail.bat", true); // runs C:\sendemail.bat and waits till sendmail finishes
 * 
 * // runs C:\sendemail.bat and returns after 2 seconds if sendmail has not completed by then.
 * _execute("C:\\sendemail.bat", true, 2000);
 * 
 * // if _execute("C:\\sendemail.bat"); does not work, on Windows, try:
 * _execute("cmd /C C:\\sendemail.bat");
 * 
 * // On Linux and Mac use forward slashes as filepath separator
 * // Make sure that the shell script has necessary permissions
 * _execute("/home/user1/bin/sendemail.sh");
 * // or
 * _execute("sh /home/user1/bin/sendemail.sh");</code></pre>
 * <warning>
 * Since _execute delegates the command to the operating system's command shell,<br/>
 * make sure that you use the correct path separators (backslash \ for windows and / for Linux/Mac)<br/>
 * and have the correct permissions.<br/>
 * </warning>
 * <br/>
 * 
 * @param {string} $cmd - Command to be executed. Normally this will be a command that can be run on the system's commandline
 * @param {boolean} $isSync -  If true, returns only on completion of cmd. If false, returns immediately while cmd is run in background
 * @param {integer} $timeout -  If timeout is specified and if isSync is true,<br/>the function will return after timeout milliseconds if cmd has not finished till then.<br/>cmd will continue to run in background
 * 
 */
 function _execute ($cmd, $isSync, $timeout){}
/**
 * 
 * <info>
 * This API only works on elements which take user text input.<br/>
 * </info>
 * <br/>
 * <pre><code>// Using in an assertion
 * _assertEqual("Tyto", _getValue(_textbox("company")));
 * 
 * // Fetching and storing value
 * var $userId = _getValue(_textbox("userId"));</code></pre>
 * <br/>
 * For getting text out of div or span like elements, use _getText<br/>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - Form element whose value we need
 * 
 */
 function _getValue ($element){}
/**
 * 
 * The returned string is normalized for different browsers. Multiple continuous spaces are replaced with single space.<br/>
 * Multiple continuous newlines are replaced with single newline. Newlines are always returned as \n even on<br/>
 * Mac and Linux, so that scripts can work across browsers and OSes.<br/>
 * <br/>
 * This API uses the textContent or innerText attributes of elements.<br/>
 * <br/>
 * <pre><code>// Using in an assertion
 * _assertEqual("Tyto", _getText(_div("companyDiv")));
 * 
 * // Fetching and storing value
 * var $userId = _getText(_div("userIdDiv"));</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el -  Element whose text we need
 * 
 */
 function _getText ($el){}
/**
 * 
 * If we want the values of all the options of the selectbox:<br/>
 * <pre><code>var $list = _getOptions(_select("select_id"), "value");
 * _assertEqual("Value of First Option", $list[0]);
 * _assertEqual("Value of Second Option", $list[1]);
 * _assertEqual(2, $list.length);</code></pre>
 * For getting visible text of all options:<br/>
 * <pre><code>var $list = _getOptions(_select("select_id"));
 * _assertEqual("Visible Text of First Option", $list[0]);
 * _assertEqual("Visible Text of Second Option", $list[1]);
 * _assertEqual(2, $list.length);</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el -  Select element
 * @param {string} $type -  If "value" is passed, option values are returned. If anything else is passed, the visible texts of the options are returned. If type is not passed, the visible texts of the options are returned.
 * 
 */
 function _getOptions ($el, $type){}
/**
 * 
 * Returns the text content as a string<br/>
 * <danger>DEPRECATED:<br/>
 * Use <code>_getText(element)</code> instead.<br/>
 * </danger>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el -  Cell (TD) element whose text we need
 * 
 */
 function _getCellText ($el){}
/**
 * 
 * <pre><code>// Using in an assertion
 * _assertEqual("18", _getSelectedText(_select("legalAge")));
 * 
 * // Fetching and storing value
 * var $legalAge = _getSelectedText(_select("legalAge"));</code></pre>
 * <warning>
 * _getSelectedText returns the text of the selected option in a select dropdown box.<br/>
 * _getSelectionText returns the text that the user has selected on a page.<br/>
 * </warning>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el -  Select dropdown element whose selected text we need
 * 
 */
 function _getSelectedText ($el){}
/**
 * 
 * <pre><code>// Using in an assertion
 * _assertEqual("http://sahi.co.in/", _getAttribute(_link("Home"), "href"));
 * 
 * // Fetching and storing value
 * var $href = _getAttribute(_link("Home"), "href");</code></pre>
 * <warning>
 * Some attributes may have different names in javascript and HTML. Always use the javascript attribute name.<br/>
 * For example,<br/>
 * the <code>class</code> attribute in HTML is accessed as <code>className</code> in javascript<br/>
 * the <code>for</code> attribute of labels in HTML is accessed as <code>htmlFor</code> in javascript<br/>
 * Fortunately there are not many such differences.<br/>
 * </warning>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el -  Element whose attribute we need
 * @param {string} $attributeName -  The DOM attribute to be fetched
 * 
 */
 function _getAttribute ($el, $attributeName){}
/**
 * 
 * <pre><code>// Using in an assertion
 * _assertTrue(_exists(_link("Home")));
 * // same as
 * _assertExists(_link("Home")));
 * 
 * // Fetching and storing value
 * var $exists = _exists(_link("Home"));</code></pre>
 * <info>
 * _exists() checks for existence of the element in the DOM.<br/>
 * Elements may exist but not be visible to the end user.<br/>
 * For testing, _isVisible is a better check than _exists.<br/>
 * </info>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el -  Element to check
 * 
 */
 function _exists ($el){}
/**
 * 
 * Compares two Javascript data type or arrays.<br/>
 * <pre><code>// Compare string with regular expression.
 * var $compare1 = _areEqual("/^a.*c$/", "abc"); // $compare1 is true.
 * 
 * // Compare text of an element with regular expression.
 * var $compare2 = _areEqual("/created/", _getText(_div("result")));
 * 
 * // Compare arrays.
 * $exp = [/[a-z]+$/, "b"];
 * $act = ["ab", "b"];
 * var $compareArr = _areEqual($exp, $act)); // $compareArr is true.</code></pre>
 * <info>
 * _assertEqual allows a regular expression in the expected value. But it cannot be used in an if condition.<br/>
 * <br/>
 * Instead one could use _areEqual in the if condition to execute the desired code and _assert(false) can be used in the else block to indicate failure.<br/>
 * <br/>
 * The advantage of using _areEqual instead of a direct equal to (==) comparison is that _areEqual allows the use of regular expression in the expected value.<br/>
 * <br/>
 * </info>
 * 
 * @param {any} $expected - Expected value.<br/>This value can be any normal javascript data type or an array<br/>Regular expressions can also be used. (eg. "/del/")
 * @param {any} $actual - Actual value.<br/>This value can be any normal javascript data type or an array.<br/>It is mostly some attribute of a HTML DOM element.
 * 
 */
 function _areEqual ($expected, $actual){}
/**
 * 
 * <info>
 * In 6.0.0, $checkZIndex and $doScroll have been newly added. Scripts written before 6.0.0 do NOT need changes.<br/>
 * </info>
 * <pre><code>// Using in an assertion
 * _assertTrue(_isVisible(_link("Home"))); // doesn't check z-index
 * _assertTrue(_isVisible(_link("Home"), true)); //checks z-index
 * _assertTrue(_isVisible(_link("Home"), true, true)); //checks z-index after scrolling
 * 
 * // Fetching and storing value
 * var $visible = _isVisible(_link("Home"));</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el -  Element to check
 * @param {boolean} $checkZIndex -  If true, checks whether the element is on top or not(Checks whether some other element with a higher Z index is not hiding it). If false, omits this check. Default is false.
 * @param {boolean} $doScroll -  If true, checks whether element is the top element by scrolling to the element. If false, checks only for the current viewport. Default is false.<br/>Used only when checkZIndex is true.
 * 
 */
 function _isVisible ($el, $checkZIndex, $doScroll){}
/**
 * 
 * <pre><code>// Using in an assertion
 * _assertTrue(_isChecked(_radio("Male")));</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el -  Element to check
 * 
 */
 function _isChecked ($el){}
/**
 * 
 * <pre><code>&lt;div id="d1" style="background-color:yellow"&gt;&lt;i&gt;Formatted&lt;/i&gt; Text&lt;/div&gt;</code></pre>
 * <pre><code>_containsText(_div("d1"), "Formatted") //=true
 * _containsText(_div("d1"), "Text") //=true
 * _containsText(_div("d1"), "Formatted Text") //=true
 * _containsText(_div("d1"), "/Format.*Text/") //=true
 * _containsText(_div("d1"), "/mat.*Te/") //=true
 * _containsText(_div("d1"), "Non existent") //=false</code></pre>
 * 
 * @param { el} $element -  Element where we need to check if text is present
 * @param {string} $text -  Text to check for. Can also be a regular expression
 * 
 */
 function _containsText ($element, $text){}
/**
 * 
 * <pre><code>&lt;div id="d1" style="background-color:yellow"&gt;&lt;i&gt;Formatted&lt;/i&gt; Text&lt;/div&gt;</code></pre>
 * <pre><code>_containsHTML(_div("d1"), "&lt;i&gt;Formatted&lt;/i&gt;") //=true
 * _containsHTML(_div("d1"), "Text") //=true
 * _containsHTML(_div("d1"), "&lt;i&gt;Formatted&lt;/i&gt; Text") //=true
 * _containsText(_div("d1"), "/&lt;i&gt;.*&lt;/i&gt; Text/") //=true
 * _containsHTML(_div("d1"), "Formatted Text") //=false
 * _containsHTML(_div("d1"), "Non existent") //=false</code></pre>
 * 
 * @param { el} $element -  Element where we need to check if text is present
 * @param {string} $html -  HTML to check for. Can also be a regular expression
 * 
 */
 function _containsHTML ($element, $html){}
/**
 * 
 * <pre><code>&lt;div id="d1"&gt;
 *   &lt;span&gt;inside&lt;/span&gt;
 * &lt;/div&gt;</code></pre>
 * <pre><code>_contains(_div("d1"), _span("inside")) //=true</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $parent - Parent element
 * @param {HTML DOM/ Windows/ Java element} $child - Child element
 * 
 */
 function _contains ($parent, $child){}
/**
 * 
 * <pre><code>var $title = _title(); // returns "Sahi Pro - Fetch APIs" for this page.</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 function _title (){}
/**
 * 
 * <pre><code>// All table data
 * var $data = _getTableContents(_table("tableId"));
 * 
 * // All rows, but only specific columns from the table
 * var $data = _getTableContents(_table("tableId"), [1,3,7] );
 * // Returns all rows with columns 2, 4 and 8 since index is 0 based.
 * 
 * // All rows, but only specific columns from the table
 * var $data = _getTableContents(_table("tableId"), [1,"Price", "/Stock/"] );
 * // Returns all rows with column 2 (index is 0 based), column with header "Price" and column header matching regular expression /Stock/
 * 
 * // Rows containing specified keyword, but only specific columns from the table
 * var $data = _getTableContents(_table("tableId"), ["Price", "/Stock/"], "/pen/" );
 * // Returns all rows containing words matching regular expression /pen/, with columns having column header Price and column header matching
 * // regular expression /Stock/. Note that /pen/ is matched with all the columns of the row.
 * 
 * // First n rows containing specified keyword, but only specific columns from the table
 * var $data = _getTableContents(_table("tableId"), ["Price", "/Stock/"], "/pen/", 8);
 * // Returns first 8 rows contain words matching regular expression /pen/ having column header Price and column header matching
 * // regular expression /Stock/
 * 
 * // Rows having indexes specified in array, with specific columns from the table
 * var $data = _getTableContents(_table("tableId"), ["Price", "/Stock/"], [3,4,7]);
 * // Returns rows 4, 5 and 8 (index is 0 based) having all columns with header "Price" and column header matching regular expression /Stock/
 * 
 * // Rows from m to n, but only specific columns from the table
 * var $data = _getTableContents(_table("tableId"), ["Price", "/Stock/"], 3, 7 );
 * // Returns rows from 3 to 7 having all columns with header "Price" and column header matching regular expression /Stock/</code></pre>
 * <info>
 * Prefer using <strong>_getTableContents</strong> to <a href="#_collect">_collect</a> or <a href="#_collectAttributes">_collectAttributes</a>, if you specifically need the contents of an html table (as against other collections) and you need to get the content of many such tables in a script.<br/>
 * </info>
 * 
 * @param {HTML DOM/ Windows/ Java element} $tableEl - Table element
 * @param {array of objects} $columns - Array of column identifiers. The identifiers can be index, text or regular expression of text
 * @param {string|integer|array of integers} $rows - Can be a regular expression, an array of indexes or the starting index
 * @param {integer} $count - If rows is the starting index, count is the ending index, If rows is a regular expression, count is the total count. If rows is an array of indexes, count is ignored.
 * 
 */
 function _getTableContents ($tableEl, $columns, $rows, $count){}
/**
 * 
 * <info>
 * Styles in HTML elements are calculated by the browser based on various CSS rules.<br/>
 * _style returns the computed style that is finally applicable to the element.<br/>
 * Accessing style directly as an attribute will not give computed style. Always use _style instead.<br/>
 * </info>
 * <pre><code>// Using in assertion
 * _assertEqual("24px", _style(_heading1(0), "font-size"));
 * 
 * // Fetching and storing value
 * var $fontSize = _style(_heading1(0), "font-size");</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el - element whose style attribute we need
 * @param {string} $styleAttribute - style attribute to be fetched
 * 
 */
 function _style ($el, $styleAttribute){}
/**
 * 
 * This may be used to verify layouts by comparing positions of specific elements.<br/>
 * <pre><code>// Using in assertion
 * _assertEqual([10,20], _position(_image("logo")));
 * 
 * // Fetching and storing value
 * var $position = _position(_image("logo"));
 * _log($position[0]); //logs x coordinate (eg. 10)
 * _log($position[1]); //logs y coordinate (eg. 20)</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el - element whose position we need
 * @param {boolean} $relative -  If true, returns position relative to current viewport. Default is false.
 * 
 */
 function _position ($el, $relative){}
/**
 * 
 * This may be used inside native events to find the absolute positions of elements.<br/>
 * <pre><code>// Using in assertion
 * var $xy =  _positionNative(_link("Link Test"));
 * _assertEqual(222, $xy[1]);
 * 
 * // Fetching and storing value
 * var $xy =  _positionNative(_link("Link Test"));
 * _log("x coordinate "+ $xy[0] ); //logs x coordinate of the element
 * _log("y coordinate "+ $xy[1] ); //logs y coordinate of the element</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el - element whose position we need
 * 
 */
 function _positionNative ($el){}
/**
 * 
 * <pre><code>// Using in an assertion
 * _assertEqual("Search", _getSelectionText());
 * 
 * // Fetching and storing value
 * var $currentSelectedText = _getSelectionText();</code></pre>
 * <warning>
 * _getSelectionText returns the text that the user has selected on a page.<br/>
 * _getSelectedText returns the text of the selected option in a select dropdown box.<br/>
 * </warning>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el - Element in which to look for selection.<br/>Need not be specified as Sahi will automatically look in all frames and elements.
 * 
 */
 function _getSelectionText ($el){}
/**
 * 
 * <info>
 * Useful for testing a responsive website. Refer to <a href="#getScreenSize">_getScreenSize</a>
 * </info>
 * <br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _userAgent (){}
/**
 * 
 * <pre><code>// Using in an assertion
 * var $screensize=_getScreenSize();
 * _assertTrue(($screensize[0]&gt;=783)&&($screensize[0]&lt;=800));
 * _assertTrue(($screensize[1]&gt;=280)&&($screensize[1]&lt;=400));</code></pre>
 * <info>
 * When dealing with a responsive website, you may want to write a single script to test functionality on different devices along with the desktop.<br/>
 * Some parts of the website UI may be same across different devices but some parts may be different. To test the parts that are different, you would use the _getScreenSize and _userAgent APIs to identify a specific device and write specific code for that device.<br/>
 * </info>
 * <br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _getScreenSize (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _isIE (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _isIE9 (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _isIE10 (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _isEdge (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _isFF (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _isFF3 (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _isFF4 (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _isChrome (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _isSafari (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _isOpera (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _isPhantomJS (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _isHTMLUnit (){}
/**
 * 
 * <info>
 * _fetch API was introduced later than _set and may be a cleaner way.<br/>
 * For secondary (popup) windows, _fetch can be used only with _selectWindow and not with _popup prefix.<br/>
 * </info>
 * <pre><code>var $rowCount = _fetch(_table("tableId").rows.length);
 * 
 * // You can also use an expression as a string
 * var $userAgent = _fetch("navigator.userAgent");
 * // And fetch results of custom utility functions of your web app
 * var $value = _fetch("jQuery('#id').val()");
 * 
 * 
 * 
 * // While working with popup windows use _selectWindow first
 * _selectWindow("popupWin");
 * // Fetch table row count from popupWin window
 * var $rowCount = _fetch(_table("tableId").rows.length);</code></pre>
 * <warning>
 * _fetch is only required for fetching DOM attributes from the browser.<br/>
 * It is NOT required for assigning constants etc.<br/>
 * <code>$x = _fetch(10) // wrong</code>
 * </warning>
 * 
 * @param {string|DOM expression} $expression -  Expression which we wish to evaluate and fetch.
 * 
 */
 function _fetch ($expression){}
/**
 * 
 * Sets the value of expression into variable<br/>
 * <br/>
 * _set communicates with the browser to evaluate the expression and fetches the result.<br/>
 * <warning>
 * _fetch may be a better way than _set to fetch values from browser.<br/>
 * </warning>
 * <br/>
 * <pre><code>// Fetching href attribute
 * var $href = null; // initialize variable
 * _set($href, _link("Home").href); // set it
 * 
 * // Getting row count of table
 * var $rowCount = 0; // initialize variable
 * _set($rowCount, _table("tableId").rows.length); // set it
 * 
 * // Getting column count of table (first row)
 * var $colCount = 0; // initialize variable
 * _set($colCount, _table("tableId").rows[0].cells.length); // set it</code></pre>
 * <br/>
 * <pre><code>// Working with popup windows using _popup prefix
 * var $colCount = 0;
 * _popup("popupWin")._set($colCount, _table("tableId").rows[0].cells.length); // CORRECT
 * _set($colCount, _popup("popupWin")._table("tableId").rows[0].cells.length); // WRONG
 * 
 * // Better to use with _selectWindow
 * var $colCount = 0;
 * _selectWindow("popupWin"); // Select window first
 * _set($colCount, _table("tableId").rows[0].cells.length);</code></pre>
 * <warning>
 * _set is only required for fetching DOM attributes from the browser.<br/>
 * It is NOT required for assigning constants etc.<br/>
 * <code>_set($x, 10) // wrong</code>
 * </warning>
 * 
 * @param {variable} $variable -  Variable into which we wish to get the specific value.
 * @param {DOM Expression} $expression -  Expression which we wish to evaluate and set.
 * 
 */
 function _set ($variable, $expression){}
/**
 * 
 * <pre><code>if (_condition(_link(0).href == "http://sahi.co.in/")){
 *     _click(_link(0));
 * }
 * 
 * // Note that this is the same as
 * 
 * var $href = _fetch(_link(0).href);
 * if ($href == "http://sahi.co.in/"){
 *     _click(_link(0));
 * }
 * 
 * // or
 * 
 * var $href = null;
 * _set($href, _link(0).href);
 * if ($href == "http://sahi.co.in/"){
 *     _click(_link(0));
 * }</code></pre>
 * <br/>
 * <pre><code>// For popup windows use _selectWindow and then use _condition
 * 
 * _selectWindow("popupWin"); // select Window
 * // Check condition on popup window
 * if (_condition(_link(0).href == "http://sahi.co.in/")){
 *     _click(_link(0));
 * }</code></pre>
 * <warning>
 * _condition is only required for fetching DOM attributes from the browser.<br/>
 * It is NOT required for comparing constants etc. like <code>$x == 10</code>
 * </warning>
 * 
 * @param {DOM expression} $expression -  Expression which we wish to evaluate.
 * 
 */
 function _condition ($expression){}
/**
 * 
 * <pre><code>// Collect all textboxes matching any identifier, in table "listing".
 * // Note the use of match all regular expression "/.*&#47;"
 * var $textboxes = _collect("_textbox", "/.*&#47;", _in(_table("listing"));
 * // Iterate and set values on all textboxes
 * for (var $i=0; $i&lt;$textboxes.length; $i++) {
 *   _setValue($textboxes[$i], "value");
 * }</code></pre>
 * 
 * @param {string} $elementType -  type of elements to collect. Eg. <code>"_link"</code>, <code>"_button"</code>, <code>"/text/"</code> etc.
 * @param {string|integer} $identifier -  Sahi Identifier. Can also be just an index.
 * @param {relations} $relations -  Relations like _in, _near etc.
 * 
 */
 function _collect ($elementType, $identifier, $relations){}
/**
 * 
 * <pre><code>// Count all textboxes matching any identifier, in table "listing".
 * // Note the use of match all regular expression "/.*&#47;"
 * var $textboxCount = _count("_textbox", "/.*&#47;", _in(_table("listing")); // may return 5;</code></pre>
 * 
 * @param {string} $elementType -  type of elements to collect. Eg. <code>"_link"</code>, <code>"_button"</code>, <code>"/text/"</code> etc.
 * @param {string|integer} $identifier -  Sahi Identifier. Can also be just an index.
 * @param {relations} $relations -  Relations like _in, _near etc.
 * 
 */
 function _count ($elementType, $identifier, $relations){}
/**
 * 
 * <b>Fetching a simple attribute from multiple elements</b><br/>
 * <pre><code>// Collect the id attribute of all textboxes in table "listing".
 * // Note the use of match all regular expression "/.*&#47;"
 * var $textboxIds = _collectAttributes("_textbox", "/.*&#47;", "id", _in(_table("listing")));
 * 
 * // Collect text of divs whose className is menu-item
 * var $menuTexts = _collectAttributes("_div", "menu-item", "sahiText");
 * // or more explicitly
 * var $menuTexts = _collectAttributes("_div", {className:"menu-item"}, "sahiText");</code></pre>
 * <br/>
 * <b>Fetching one of few simple attributes from multiple elements</b><br/>
 * <pre><code>// Return name or id of textboxes. If name is found return name, else id.
 * // Note the use of single pipe |.
 * var $identifiers = _collectAttributes("_textbox", "/.*&#47;", "name|id");</code></pre>
 * <br/>
 * <b>Fetching some synthesized/processed values from multiple elements by executing an inline function for each element</b><br/>
 * <br/>
 * <pre><code>// For each div of className menu-item, function will be called and the current div will be passed as $el.
 * var $htmls = _collectAttributes("_div", "menu-item",  function ($el) {return $el.innerHTML;}, _in(_div("navbar")));</code></pre>
 * <br/>
 * <b>Fetching some synthesized/processed values from multiple elements by executing a defined function for each element</b><br/>
 * <br/>
 * <pre><code>// getInnerHTML will be called for each element whose attribute we are collecting.
 * function getInnerHTML($el) {
 *   return $el.innerHTML;
 * }
 * 
 * // For each div of className menu-item, getInnerHTML function will be called and the current div will be passed as $el.
 * var $htmls = _collectAttributes("_div", "menu-item",  getInnerHTML, _in(_div("navbar")));</code></pre>
 * <br/>
 * <b>Fetching some synthesized/processed values from multiple elements by executing nested functions</b><br/>
 * <br/>
 * <pre><code>// Notice the use of browser tag for the second level function called from getHTML.
 * &lt;browser&gt;
 * function getInnerHTMLOfParent(el){
 *   return el.parentNode.innerHTML;
 * }
 * &lt;/browser&gt;
 * 
 * // This is not inside a browser tag.
 * function getHTML(el) {
 *   // calls another function.
 *   // The called function should be inside a browser tag,
 *   // because of the way Sahi serializes content between proxy and browser.
 *   return getInnerHTMLOfParent(el);
 * }
 * var $htmls = _collectAttributes("_div", "menu-item",  getHTML, _in(_div("navbar")));</code></pre>
 * 
 * @param {string} $elementType -  type of elements to collect. Eg. <code>"_link"</code>, <code>"_button"</code>, <code>"/text/"</code> etc.
 * @param {string|integer} $identifier -  Sahi Identifier. Can also be just an index.
 * @param {string|function} $attribute -  attribute or function.
 * @param {relations} $relations -  Relations like _in, _near etc.
 * 
 */
 function _collectAttributes ($elementType, $identifier, $attribute, $relations){}
/**
 * 
 * <pre><code>var $accs1 = _collectElementsInfo("/text/"); // Collect all _textbox and _textarea accessor info.
 * // Collect all _radio accessor infos in div "modes".
 * var $accs = _collectElementsInfo("_radio", _in(_div("modes")));
 * /*
 * $accs = [
 * 		{"api":"_radio", "identifiers":{"id":"sahiradio", "index":0, "name":"mode", "value":"on"}, "tag":"INPUT"},
 * 		{"api":"_radio", "identifiers":{"id":"javaradio", "index":1, "name":"mode[1]", "value":"on[1]"}, "tag":"INPUT"},
 * 		{"api":"_radio", "identifiers":{"id":"rubyradio", "index":2, "name":"mode[2]", "value":"on[2]"}, "tag":"INPUT"}
 * 	]
 * *&#47;
 * for (var $i=0; $i&lt;$accs.length; $i++) {
 * 	var $obj = $accs[$i];
 * 	var $identifiers = $obj["identifiers"];
 * 	var $el = $obj["api"] + "(\"" + $identifiers["id"] + "\")";
 * 	_log($el);
 * }</code></pre>
 * 
 * @param {string} $elementType -  Type of elements to collect. Can be regular expression. Eg. <code>"_link"</code>, <code>"_button"</code>, <code>"/text/"</code> etc.
 * @param {relations} $relations -  Relations like _in, _near etc.
 * 
 */
 function _collectElementsInfo ($elementType, $relations){}
/**
 * 
 * Reads the file and returns a string. Assumes UTF-8 encoding of file.<br/>
 * <pre><code>var $contents = _readFile("users.txt");</code></pre>
 * 
 * @param {string} $filePath - File path of file ot be read as text
 * 
 */
 function _readFile ($filePath){}
/**
 * 
 * <pre><code>_writeFile("First Line", "out.txt", true); // over writes content in file
 * _writeFile("Second Line", "out.txt"); // appends second line in file</code></pre>
 * 
 * @param {string} $string - String to write to file.
 * @param {string} $filePath - File path of file to write into. File path is resolved relative to current script file.
 * @param {boolean} $overwrite - If true, overwrites content. Default is false, which appends at the end of existing content.
 * @param {string} $encoding - Encoding to be used while writing. Default is "UTF-8"
 * 
 */
 function _writeFile ($string, $filePath, $overwrite, $encoding){}
/**
 * 
 * This API is the same as _writeFile. Only the name is different.<br/>
 * 
 * @param {string} $string - String to write to file.
 * @param {string} $filePath - File path of file to write into. File path is resolved relative to current script file.
 * @param {boolean} $overwrite - If true, overwrites content. Default is false, which appends at the end of existing content.
 * @param {string} $encoding - Encoding to be used while writing. Default is "UTF-8"
 * 
 */
 function _writeToFile ($string, $filePath, $overwrite, $encoding){}
/**
 * 
 * <pre><code>_deleteFile("out.txt"); // deletes out.txt</code></pre>
 * 
 * @param {string} $filePath - File path of file to delete. File path is resolved relative to current script file.
 * 
 */
 function _deleteFile ($filePath){}
/**
 * 
 * <pre><code>_fileExists("out.txt"); // returns true if out.txt exists.</code></pre>
 * 
 * @param {string} $filePath - File path of file to check. File path is resolved relative to current script file.
 * 
 */
 function _fileExists ($filePath){}
/**
 * 
 * Renames or moves a file from oldFilePath to newFilePath<br/>
 * <pre><code>_renameFile("original.txt", "renamed.txt"); // renames original.txt to renamed.txt
 * _renameFile("original.txt", "newPath/renamed.txt"); // moves and renames original.txt to newPath/renamed.txt</code></pre>
 * 
 * @param {string} $oldFilePath - File path of file to rename. File path is resolved relative to current script file.
 * @param {string} $newFilePath - New path of file to write into. File path is resolved relative to current script file.
 * 
 */
 function _renameFile ($oldFilePath, $newFilePath){}
/**
 * 
 * copy a file from srcFilePath to destFilePath<br/>
 * <pre><code>_copyFile("source.txt", "dest.txt"); // copies the source.txt into dest.txt</code></pre>
 * 
 * @param {string} $srcFilePath - File path of an existing file to copy, must not be null
 * @param {string} $destFilePath - File path of the new file, must not be null
 * 
 */
 function _copyFile ($srcFilePath, $destFilePath){}
/**
 * 
 * <div class="danger">
 * _readCSVFile api expect only one char for Word separator.<br/>
 *  If $wordSeparator has more than one char, only first char will be taken as $wordSeparator.<br/>
 * </div>
 * Given a userinfo.csv file with data<br/>
 * <pre><code>1,Ram,18,Male
 * 2,Sam,20,Male</code></pre>
 * <br/>
 * <pre><code>var $userinfo = _readCSVFile("data/userinfo.csv");
 * var $userName = $userinfo[0][1]; // returns Ram</code></pre>
 * <br/>
 * Given a employee.csv file with data<br/>
 * <pre><code>1,Ram,18,Male
 * ,
 * 2,Sam,20,Male</code></pre>
 * <br/>
 * <pre><code>var $employee = _readCSVFile("data/employee.csv");
 * var $employee2 = _readCSVFile("data/employee.csv", "," , true);
 * var $csvLength = $employee.length // returns 3
 * var $csvLength2 = $employee2.length // returns 2</code></pre>
 * 
 * @param {string} $filePath - file path to csv file.
 * @param {character} $wordSeparator -  Word separator character. Defaults to comma.
 * @param {boolean} $ignoreEmptyRows -  ignores the empty lines. Defaults to false.
 * 
 */
 function _readCSVFile ($filePath, $wordSeparator, $ignoreEmptyRows){}
/**
 * 
 * <ul>
 * <info>NOTE: $forceQuotes was added Since Sahi Pro: 6.2.0. For old document <a href=http://sahipro.com/alldocs/v6.1.0/sahi-apis/file-apis.html#_writeCSVFile>Refer here</a>
 * <p>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp$padEmptyCells was added Since Sahi Pro: 7.0.0. For old document <a href=http://sahipro.com/alldocs/v6.3.2/sahi-apis/file-apis.html#_writeCSVFile>Refer here</a>
 * </p></info>
 * </ul>
 * <br/>
 * Writes the 2 dimensional array into the csv file.<br/>
 * <br/>
 * <pre><code>var $data = [];
 * $data[0] = ["1", "Ram", 18, "Male"];
 * $data[1] = ["2", "Sam", 20];
 * 
 * _writeCSVFile($data, "data/userinfo.csv", false, ",", true, true);
 * //forces data to be inside quotes with specified word separator and empty cells at the end of rows are not trimmed.
 * //appends data into userinfo.csv.
 * 
 * var $moreData = [["3", "Lak", 30, "Male","Married"]];
 * _writeCSVFile($moreData, "data/userinfo.csv", false, ",", true, true);</code></pre>
 * <br/>
 * The above code will create <code>data/userinfo.csv</code> with data<br/>
 * <br/>
 * <pre><code>"1","Ram","18","Male",""
 * "2","Sam","20","",""
 * "3","Lak","30","Male","Married"</code></pre>
 * <br/>
 * 
 * @param {2 dimensional array} $array2d -  Two dimensional array of data.
 * @param {string} $filePath -  File path of csv file to write to.
 * @param {boolean} $overwrite -  If true, overwrites data. Default is false, which appends data.
 * @param {string} $wordSeparator -  Word separator character. Defaults to comma.
 * @param {boolean} $forceQuotes -  Force strings to be inside quotes in the csv file. Defaults to true.
 * @param {boolean} $padEmptyCells -  Empty cells at the end of rows are not trimmed. Ensures an equal number of commas (separators) in each line. Defaults to false.
 * 
 */
 function _writeCSVFile ($array2d, $filePath, $overwrite, $wordSeparator, $forceQuotes, $padEmptyCells){}
/**
 * 
 * Returns a handle to the flex object. All child elements of the flex object are accessed from this handle.<br/>
 * <br/>
 * <pre><code>_setValue(_flex("mxComponents").textinput("txt1"), "English");</code></pre>
 * <br/>
 * <info>_flex is the same as _f</info>
 * Information on usage can be found <a href="../using-sahi/flex.html#Introduction">here</a>
 * 
 * @param {string} $identifier -  id of flex object
 * 
 */
 function _flex ($identifier){}
/**
 * 
 * <info>_f is the same as _flex</info>
 * Returns a handle to the flex object. All child elements of the flex object are accessed from this handle.<br/>
 * <br/>
 * <pre><code>_setValue(_f("mxComponents").textinput("txt1"), "English");</code></pre>
 * Information on usage can be found <a href="../using-sahi/flex.html#Introduction">here</a>
 * 
 * @param {string} $identifier -  id of flex object
 * 
 */
 function _f ($identifier){}
/**
 * 
 * This function should be used inside a browser tag. The $fn is called for each flex app on the browser, and the current flex app is passed as an argument to fn.<br/>
 * <br/>
 * In some flex apps with lots of dynamically loading parts, it may be customary to show a rotating icon with "Loading..."<br/>
 * or some such message. Sahi can be told to wait till this message disappears.<br/>
 * <br/>
 * At the start of your script add this:<br/>
 * <pre><code>&lt;browser&gt;
 * _setFlexReadyCondition(function(fl){
 *   return !_isVisible(fl.uitextfield("Loading..."));
 * });
 * &lt;/browser&gt;</code></pre>
 * 
 * @param {function} $fn -  Function which evaluates to true/false. Function denotes when the flex app is considered to be ready for Sahi.
 * 
 */
 function _setFlexReadyCondition ($fn){}
/**
 * 
 * Used to verify if the specific element is the one in focus.<br/>
 * Eg<br/>
 * <pre><code>_assertEqual(_texbox("user"), _activeElement());</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 function _activeElement (){}
/**
 * 
 * Used to find elements solely by id without using its tagName information.<br/>
 * <pre><code>&lt;div id="errormsg"&gt;Error&lt;/div&gt;</code></pre>
 * <pre><code>_byId("errormsg") // points to the above tag. Note that the tagName "div" is not used here.</code></pre>
 * 
 * @param {string} $id - id of element
 * 
 */
 function _byId ($id){}
/**
 * 
 * Used to find element by text and tagName<br/>
 * <pre><code>&lt;div id="errormsg"&gt;some text&lt;/div&gt;</code></pre>
 * <pre><code>_byText("some text", "DIV") // points to the above tag.</code></pre>
 * <danger>
 * DEPRECATED:<br/>
 * Use <code>_div("some text")</code> or more specifically <code>_div({sahiText:"some text"})</code> instead<br/>
 * </danger>
 * 
 * @param {string} $text - text of element
 * @param {string} $tagName - tagName of element which has this text. eg. "DIV"
 * 
 */
 function _byText ($text, $tagName){}
/**
 * 
 * Finds element by className with given tagName and constrained by given relations<br/>
 * <pre><code>&lt;div class="bigfont"&gt;Some text&lt;/div&gt;</code></pre>
 * <pre><code>_byClassName("bigfont", "DIV")</code></pre>
 * <br/>
 * <danger>
 * DEPRECATED:<br/>
 * Use <code>_div("bigfont")</code> or more specifically <code>_div({className:"bigfont"})</code> instead<br/>
 * </danger>
 * 
 * @param {string} $className - className of element
 * @param {string} $tagName - tagName of element which has this text. eg. "DIV"
 * @param {relation} $relations -  DOM or Positional Relations
 * 
 */
 function _byClassName ($className, $tagName, $relations){}
/**
 * 
 * Eg.<br/>
 * <pre><code>_byXPath("//table[3]//tr[1]/td[2]")
 * _byXPath("//tr[1]/td[2]")</code></pre>
 * This is a convenience method for people moving from Selenium or other tools to Sahi.<br/>
 * <info>
 * XPaths are natively enabled on Firefox.<br/>
 * For browsers like Internet Explorer which do not have support for XPath use Javascript-XPath.<br/>
 * <br/>
 * For browsers without XPath support, use Javascript-XPath: (http://coderepos.org/share/wiki/JavaScript-XPath)<br/>
 * Copy the contents from  <a href="http://svn.coderepos.org/share/lang/javascript/javascript-xpath/trunk/release/javascript-xpath-latest.js">http://svn.coderepos.org/share/lang/javascript/javascript-xpath/trunk/release/javascript-xpath-latest.js</a>
 * and save the file as <code>sahi/htdocs/spr/ext/javascript-xpath/javascript-xpath.js</code><br/>
 * <br/>
 * This file is under its own MIT license and is not part of Sahi's code base<br/>
 * </info>
 * 
 * @param {string} $xpath - XPath of element
 * 
 */
 function _byXPath ($xpath){}
/**
 * 
 * This API just evaluates the string and returns a dom object. Eg. <code>_accessor("document.formName.elementName")</code>.<br/>
 * This API is not very useful.<br/>
 * 
 * @param {string} $string - String to eval
 * 
 */
 function _accessor ($string){}
/**
 * 
 * Allows identification of elements using some Selenium locators. Use only while migrating from Selenium to Sahi.<br/>
 * 
 * @param {string} $locator -  selenium locator
 * 
 */
 function _bySeleniumLocator ($locator){}
/**
 * 
 * Sets the HTTP header for all further requests made in this browser session.<br/>
 * If a HTTP header of given key already exists, it will be replaced.<br/>
 * <pre><code>//Set the User-Agent to that sent by iPad2
 * var $userAgent = "Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X; en-us) " +
 *                   "AppleWebKit/534.46 (KHTML, like Gecko) " +
 *                   "Version/5.1 Mobile/9B176 Safari/7534.48.3";
 * _setHttpHeader("User-Agent", $userAgent);</code></pre>
 * 
 * @param {string} $key - HTTP header name
 * @param {string} $value - HTTP header value
 * 
 */
 function _setHttpHeader ($key, $value){}
/**
 * 
 * Adds the HTTP header for all further requests made in this browser session.<br/>
 * If a HTTP header of given key already exists, both old and new headers will be sent.<br/>
 * <warning>
 * Only specific HTTP headers can be sent in multiples. Read the HTTP specification and understand the behaviour<br/>
 * before you use this API.<br/>
 * </warning>
 * 
 * @param {string} $key - HTTP header name
 * @param {string} $value - HTTP header value
 * 
 */
 function _addHttpHeader ($key, $value){}
/**
 * 
 * Removes a particular HTTP header.<br/>
 * For example, can be used to check behaviour when user-agent is not sent<br/>
 * <pre><code>_removeHttpHeader("User-Agent");</code></pre>
 * 
 * @param {string} $key - HTTP header name
 * 
 */
 function _removeHttpHeader ($key){}
/**
 * 
 * If _addHttpHeader or _setHttpHeader or _removeHttpHeader had been called in this session before,<br/>
 * calling _resetHttpHeader will revert it to the original behaviour, before any of those APIs were called.<br/>
 * <pre><code>_removeHttpHeader("User-Agent"); // remove header
 * // do a few actions
 * // requests will not be sending user-agent
 * _resetHttpHeader("User-Agent"); // revert back
 * // will send user-agent header as the browser normally does.</code></pre>
 * 
 * @param {string} $key - HTTP header name
 * 
 */
 function _resetHttpHeader ($key){}
/**
 * 
 * Used to map a domain to a specific IP. For example while testing, a thirdparty service may be mocked out with a server on a local IP.<br/>
 * <br/>
 * If you add<br/>
 * <pre><code>_mapDomainToIP("http://www.google.com/", "127.0.0.1");</code></pre>
 * at the start of the script, all requests to http://www.google.com will be responded to by your localhost server.<br/>
 * <info>
 * NOTE: The port and protocols will not be changed, only the IP will be mapped to this domain.<br/>
 * </info>
 * <pre><code>_mapDomainToIP("http://www.google.com/"); // remove any previously set mapping.
 * // All requests to http://www.google.com will now go to http://www.google.com correctly.</code></pre>
 * 
 * @param {string} $urlBase - url with protocol, domain and port (if present). Ex. <code>http://dummy.domain.com/</code> or <code>https://dummy.domain.com:8080/</code>
 * @param {string|object} $ip - IP to map url's domain to. If $ip is not specified or is null, any existing mapping for that domain will be removed.
 * 
 */
 function _mapDomainToIP ($urlBase, $ip){}
/**
 * 
 * _disableKeepAlive() turns off Keep-Alive between browser and proxy.<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _disableKeepAlive (){}
/**
 * 
 * _enableKeepAlive() turns on Keep-Alive between browser and proxy.<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _enableKeepAlive (){}
/**
 * 
 * 
 * @param {string} $name - Cookie name
 * 
 */
 function _cookie ($name){}
/**
 * 
 * <warning>While possible to create a cookie, there is no real reason to create one during automation.</warning>
 * 
 * @param {string} $name - Cookie name
 * @param {string} $value - Cookie value
 * @param {integer} $days - Days to expiry
 * 
 */
 function _createCookie ($name, $value, $days){}
/**
 * 
 * Deletes the cookie with given name for the current page. This may or may not work. A better way may be to use the Cookie Manager<br/>
 * <br/>
 * <h3>Cookie Manager</h3>
 * Cookies are specific to domains. To see all cookies of a particular domain, you can navigate to<br/>
 * <code>http://yourdomain.com/_s_/dyn/Cookies_showAll</code><br/>
 * This page will show you all cookies associated with yourdomain.com.<br/>
 * You can choose and delete cookies from this page. This handles httpOnly cookies also.<br/>
 * <br/>
 * Note that if you want to delete a cookie from <code>www.yahoo.com</code>, you should navigate to both<br/>
 * <code>http://www.yahoo.com/_s_/dyn/Cookies_showAll</code><br/>
 * and<br/>
 * <code>http://yahoo.com/_s_/dyn/Cookies_showAll</code><br/>
 * and delete the relevant cookie.<br/>
 * <br/>
 * 
 * @param {string} $name - Cookie name
 * 
 */
 function _deleteCookie ($name){}
/**
 * 
 * Includes the script at scriptPath in the current script.<br/>
 * _include is dynamically evaluated since Sahi Pro V5.0.<br/>
 * <br/>
 * <pre><code>// Suppose the current script is in
 * // D:/sahi/userdata/scripts/demo/ folder
 * 
 * // include lib.sah located in the current script's directory
 * // D:/sahi/userdata/scripts/demo/lib.sah
 * _include("lib.sah"); // using relative path
 * 
 * // Include using full path
 * _include("D:/sahi/userdata/scripts/demo/lib.sah"); // using absolute path
 * 
 * // Use of back and front slashes
 * _include("D:\sahi\userdata\scripts\demo\lib.sah"); // WRONG
 * _include("D:/sahi/userdata/scripts/demo/lib.sah"); // CORRECT
 * _include("D:\\sahi\\userdata\\scripts\\demo\\lib.sah"); // CORRECT
 * 
 * // Include from a subfolder
 * // D:/sahi/userdata/scripts/demo/common/lib.sah
 * _include("common/lib.sah");
 * 
 * // Include from a parent's sub folder
 * // D:/sahi/userdata/scripts/common/lib.sah
 * _include("../common/lib.sah");
 * 
 * // Using a variable
 * var $includePath = "../common/lib.sah";
 * _include($includePath);</code></pre>
 * 
 * @param {string} $scriptPath - File path of sahi script.<br/>If scriptPath is a relative path, it is evaluated relative to including scripts's path
 * 
 */
 function _include ($scriptPath){}
/**
 * 
 * Similar to <a href="include-apis.html#_include">_include</a> but _includeOnce only includes the script once even when called multiple times.<br/>
 * <br/>
 * This is useful in a scenario where during development a single flow is broken<br/>
 * into multiple scripts and each is developed and tested independently and then<br/>
 * included all together into one script.<br/>
 * <br/>
 * <pre><code>_includeOnce("lib.sah"); // includes lib.sah
 * _includeOnce("lib.sah"); // second call. Will do nothing.
 * 
 * // For more details on usage, look at _include</code></pre>
 * 
 * @param {string} $scriptPath - File path of sahi script.<br/>If scriptPath is a relative path, it is evaluated relative to including scripts's path
 * 
 */
 function _includeOnce ($scriptPath){}
/**
 * 
 * <danger>Deprecated: Same as _include since V5.0. Use <a href="include-apis.html#_include">_include</a> instead.</danger>
 * 
 * @param {string} $scriptPath - File path of sahi script.<br/>If scriptPath is a relative path, it is evaluated relative to including scripts's path
 * 
 */
 function _dynamicInclude ($scriptPath){}
/**
 * 
 * <ul>
 * <info>NOTE: $resourcePath was added Since Sahi Pro: 6.1.1. For old document <a href=http://sahipro.com/alldocs/v6.1.0/sahi-apis/include-apis.html#_resource>Refer here</a>
 * </info>
 * </ul>
 * In a distributed run, only the participating scripts in the suite are zipped and sent over to the nodes.<br/>
 * Hence if your scripts refer to any resources like CSV files (through <a href="../sahi-apis/file-apis.html#CSV Files">CSV APIs</a>)<br/>
 * or Excel files (through <a href="../sahi-apis/excel-apis.html">Excel APIs</a>) or images etc, they have to be explicitly included in your<br/>
 * scripts using the _resource API.<br/>
 * <br/>
 * Please use relative path for resources so that they can work on all the nodes.<br/>
 * <br/>
 * In summary, any resource that your script uses (other than scripts themselves), needs to be included through _resource APIs.<br/>
 * <br/>
 * <info>
 * Distributed runs involve multiple nodes and Sahi installation folders could be at different locations on these nodes. Hence it is advisable to use relative paths for resources, so that they are resolved correctly on all nodes.<br/>
 * </info>
 * <br/>
 * Some examples:<br/>
 * <pre><code>_resource("../excel/users.xlsx"); // Include excel file as resource.
 * var $data = _readExcelFile("../excel/users.xlsx");</code></pre>
 * <pre><code>/* Folder structure:
 * 	|- a
 * 	    |- a1.xlsx
 * 	    |- a2.xls
 * 	    |- b
 * 	       |-b1.png
 * 	       |- c
 * 	      	  |- sample1.txt
 * 	       |- d
 * 	      	  |- sample2.txt
 * 	       |
 * 	    |
 * 	|
 * *&#47;
 * 
 * // To include all files and folder inside folder "a" as resource.
 * _resource("../a"); // Includes "../a/a1.xlsx", "../a/a2.xls", "../a/b/b1.png", "../a/b/c/sample1.txt" and "../a/b/d/sample2.txt"
 * 
 * // To include all files inside folder "a" as resource.
 * _resource("../a/*"); // Includes "../a/a1.xlsx" and "../a/a2.xls"
 * 
 * _resource("../a/*.xls"); // Includes "../a/a2.xls"
 * _resource("../a/*&#47;*&#47;sample1.txt"); // Includes "../a/b/c/sample1.txt"
 * _resource("../a/b/*&#47;sample*.txt"); // Includes "../a/b/c/sample1.txt" and "../a/b/d/sample2.txt"</code></pre>
 * 
 * @param {string} $resourcePath -  File path of the resource files such as image, excel, csv etc which are used inside script.<br/>If resourcePath is a relative path, it is evaluated relative to the script that includes it.<br/>Can be folder path. Wildcard * is also supported.
 * 
 */
 function _resource ($resourcePath){}
/**
 * 
 * Launched Java Web Start Application.<br/>
 * <br/>
 * <pre><code>_launchJavaWSApplication("C:\\Users\\sample.jnlp");</code></pre>
 * 
 * @param {string} $applicationPath -  absolute path of JNLP application
 * 
 */
 function _launchJavaWSApplication ($applicationPath){}
/**
 * 
 * <pre><code>//return array of all alerts in the browser.
 * var $allAlerts = _lastAlert(true);
 * //return only last alert.
 * var $lastAlert= _lastAlert();</code></pre>
 * <info>
 * At times, a UI action causes multiple alerts to appear. To handle such a scenario, one can use _lastAlert(true) and check the last few alerts.<br/>
 * </info>
 * <info>
 * $allalerts added in 6.0.0. Scripts written before 6.0.0 do NOT need changes.<br/>
 * </info>
 * 
 * @param {boolean} $allalerts -  If true, returns array of all alert messages.
 * 
 */
 function _lastAlert ($allalerts){}
/**
 * 
 * Removes the last alert from session so that further occurrence of alerts can be checked<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _clearLastAlert (){}
/**
 * 
 * <pre><code>//return array of all Confirms in the browser.
 * var $allConfirms = _lastConfirm(true);
 * //return only last Confirm.
 * var $lastConfirm= _lastConfirm();</code></pre>
 * <info>
 * At times, a UI action causes multiple confirmation dialogs to appear. To handle such a scenario, one can use _lastConfirm(true) and check the last few confirmation messages.<br/>
 * </info>
 * <info>
 * $allconfirms added in 6.0.0. Scripts written before 6.0.0 do NOT need changes.<br/>
 * </info>
 * 
 * @param {boolean} $allconfirms -  If true, returns array of all confirm dialog messages.
 * 
 */
 function _lastConfirm ($allconfirms){}
/**
 * 
 * _expectConfirm tells Sahi to react with OK or Cancel for a dialog with given message.<br/>
 * 
 * @param {string} $message - message to expect in dialog. This can also be a regular expression
 * @param {boolean} $value - if true will press OK when a confirm dialog with given message appears. If false, will click on Cancel.
 * @param {boolean} $persist - if true, will accept a single _expectConfirm statement for all confirms coming after the statement. If false, will accept only the next confirm box to work with the _expectConfirm statement. Default is false.
 * 
 */
 function _expectConfirm ($message, $value, $persist){}
/**
 * 
 * Removes the last confirm from session so that further occurrence of confirms can be checked<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _clearLastConfirm (){}
/**
 * 
 * <pre><code>//return array of all Prompts in the browser.
 * var $allPrompts = _lastPrompt(true);
 * //return only last Prompt.
 * var $lastPrompt= _lastPrompt();</code></pre>
 * 
 * @param {boolean} $allprompts -  If true, returns array of all prompt messages.
 * 
 */
 function _lastPrompt ($allprompts){}
/**
 * 
 * _expectPrompt tells Sahi to respond with given response for a prompt dialog with given promptMessage.<br/>
 * 
 * @param {string} $promptMessage - message to expect in dialog. This can also be a regular expression
 * @param {string} $response - Response to enter into the prompt.
 * 
 */
 function _expectPrompt ($promptMessage, $response){}
/**
 * 
 * Removes the last prompt from session so that further occurrence of prompts can be checked<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _clearLastPrompt (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _printCalled (){}
/**
 * 
 * Resets _printCalled to false, so that _printCalled can be checked once more in the script.<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _clearPrintCalled (){}
/**
 * 
 * Reads the layout text file and returns a 2 dimensional array of elements.<br/>
 * The layout file is a simple way of defining layout in a text file.<br/>
 * <br/>
 * Elements on a line are treated as horizontally aligned.<br/>
 * Elements higher up in the layout file are vertically above elements defined on a lower line.<br/>
 * <br/>
 * For example, in<br/>
 * <pre><code><span class='code-highlight'>_cell("Python Cookbook")</span>,_cell("7"),<span class='code-highlight'>_cell("Rs. 350")</span>,_textbox("q[2]")
 * <span class='code-highlight'>_button("Add")</span>,<span class='code-highlight'>_button("Clear")</span>,_button("Logout")</code></pre>
 * <br/>
 * <code>_cell("Python Cookbook")</code> is to the left of <code>_cell("Rs. 350")</code><br/>
 * and<br/>
 * <code>_button("Add")</code> is vertically below <code>_cell("Python Cookbook")</code> (not necessarily within <code>_cell("Python Cookbook")</code>'s boundaries though)<br/>
 * and<br/>
 * <code>_button("Clear")</code> is to the right of <code>_button("Add")</code><br/>
 * <br/>
 * This can be used to verify the layout of the following page:<br/>
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/webpage-layout.png">
 * <br/>
 * <info>
 * This api is used with <a href="../sahi-apis/layout-verigication.html#_verifyLayout">_verifyLayout</a>.<br/>
 * </info>
 * <br/>
 * <pre><code>//Read the layout text file and store it in the variable
 * var $data = _readLayoutFile("page_layout.txt");</code></pre>
 * 
 * @param {string} $filePath -  Text file path.
 * 
 */
 function _readLayoutFile ($filePath){}
/**
 * 
 * Validates the page layout based on $data.<br/>
 * Example:<br/>
 * <pre><code>var $data = _readLayoutFile("page_layout.txt");
 * _verifyLayout($data, 10);</code></pre>
 * 
 * @param {two dimensional array of element stubs} $data - Elements in same row are considered horizontal. Elements in subsequent rows are vertically below elements in previous row.
 * @param {integer} $threshold -  If the vertical distance between the top left of 2 elements is within threshold number of pixels, they are considered to be horizontally aligned.
 * 
 */
 function _verifyLayout ($data, $threshold){}
/**
 * 
 * <pre><code>_log("Current user is " + $user); // Will log as plain text
 * 
 * _log("Current user is " + $user, "CUSTOM1"); // Will log in a different color
 * 
 * _log("Current user is " + $user, "INFO", "tiger.png"); // Will also add tiger.png in logs.</code></pre>
 * 
 * @param {string} $message - Message to log
 * @param {string} $logType -  Changes the color in which log statement is displayed.<br/>Can be one of <code>"INFO"</code>, <code>"SUCCESS"</code>, <code>"FAILURE"</code>,<br/><code>"CUSTOM"</code>, <code>"CUSTOM1"</code>, <code>"CUSTOM2"</code>, <code>"CUSTOM3"</code>,<br/><code>"CUSTOM4"</code>, <code>"CUSTOM5"</code>, <code>"CUSTOM6"</code><br/>Defaults to <code>"INFO"</code>
 * @param {string} $imagePath -  Path to image file which will be logged along with the message. Relative paths will be resolved relative to current script. Introduced since Sahi Pro 6.0.0
 * 
 */
 function _log ($message, $logType, $imagePath){}
/**
 * 
 * _logException is used within a catch block to log the Exception in playback logs.<br/>
 * The logged line will be in plain text and the script status will not be affected by this.<br/>
 * <pre><code>try{
 *   _click(_link("does not exist"));
 * }catch($e){
 *   _logException($e); // Logs the exception, but does not fail
 * }</code></pre>
 * 
 * @param {Exception} $exception - Exception passed to catch block
 * 
 */
 function _logException ($exception){}
/**
 * 
 * _logExceptionAsFailure is used within a catch block to log the Exception in playback logs.<br/>
 * The logged line will be in red and the script will be marked failed because of this.<br/>
 * <pre><code>try{
 *   _click(_link("does not exist"));
 * }catch($e){
 *   _logExceptionAsFailure($e); // Logs the exception, and fails,
 *    // and in the logs, points to the original line as source of failure.
 * }</code></pre>
 * 
 * @param {Exception} $exception - Exception passed to catch block
 * 
 */
 function _logExceptionAsFailure ($exception){}
/**
 * 
 * <pre><code>_logImage("../tiger.png"); // Will add the image to logs
 * 
 * _logImage("C:/tiger.png", "This is a tiger"); // Will log image along with message
 * 
 * _logImage("C:/tiger.png", "This is a tiger in custom log message", "CUSTOM1"); // Will log image with message in a different color</code></pre>
 * 
 * @param {string} $imagePath -  Path to image file which will be logged along with the message. Relative paths will be resolved relative to current script.
 * @param {string} $message - Message to log
 * @param {string} $logType -  Changes the color in which log statement is displayed.<br/>Can be one of <code>"INFO"</code>, <code>"SUCCESS"</code>, <code>"FAILURE"</code>,<br/><code>"CUSTOM"</code>, <code>"CUSTOM1"</code>, <code>"CUSTOM2"</code>, <code>"CUSTOM3"</code>,<br/><code>"CUSTOM4"</code>, <code>"CUSTOM5"</code>, <code>"CUSTOM6"</code><br/>Defaults to <code>"INFO"</code>
 * 
 */
 function _logImage ($imagePath, $message, $logType){}
/**
 * 
 * _logOutput allows concatenating multiple output messages during a script execution,<br/>
 * and display the concatenated string in the script and suite reports.<br/>
 * <br/>
 * Sample Script:<br/>
 * <pre><code><span class='code-highlight'>_logOutput("Script started."); // Logging output: Script started. </span>
 * _setValue(_textbox("user"), "test");
 * _setValue(_password("password"), "secret");
 * _click(_submit("Login"));
 * <span class='code-highlight'>_logOutput("Login passed."); // Logging output: Login passed.</span>
 * _click(_button("Logout"));
 * <span class='code-highlight'>_logOutput("Script stopped."); // Logging output: Script stopped.</span></code></pre>
 * <br/>
 * For the above script, the following message will be displayed in script report:<br/>
 * <img src="http://sahipro.com/docs/assets/images/sahi-apis/log-output-script.png" title="_logOutput messages seen below script summary in script report"/>
 * <br/>
 * 
 * @param {string} $message - Message to log
 * 
 */
 function _logOutput ($message){}
/**
 * 
 * _artifact is used to save a file as part of the logs. For example, one may want to store a report from your application along with the script report.<br/>
 * Each artifact is uniquely named and associated with a script report, so that multiple runs do not over write the same artifact file.<br/>
 * <br/>
 * A link to the artifact will be visible on the script report.<br/>
 * All artifacts in a suite can be downloaded as a zip from the suite report page.<br/>
 * <br/>
 * <pre><code>_artifact("data.xls"); // Logging artifact: data.xls
 * 
 * _artifact("../myartifacts/*.txt", "all"); // Logging artifact: all</code></pre>
 * 
 * @param {string} $artifactPath -  File path of the artifact files.<br/>If artifactPath is a relative path, it is evaluated relative to the script that includes it.<br/>Can be folder path. Wildcard * is also supported.
 * @param {string} $label - Label to add to the artifacts.<br/>If the label is not specified its default value will be artifactPath.
 * 
 */
 function _artifact ($artifactPath, $label){}
/**
 * 
 * _maskLogs tells Sahi not to display further steps in the playback logs and in the Controller.<br/>
 * This is used when sensitive information like password may be entered via script, but we do not want it stored/displayed anywhere<br/>
 * Toggled by _unmaskLogs.<br/>
 * 
 * @param {string} $message - Message to print when logging this mask statement
 * 
 */
 function _maskLogs ($message){}
/**
 * 
 * _unmaskLogs tells Sahi to start displaying steps in the playback logs and in the Controller. Used after _maskLogs.<br/>
 * 
 * @param {string} $message - Message to print when logging this unmask statement
 * 
 */
 function _unmaskLogs ($message){}
/**
 * 
 * Disables logging of INFO (normal) steps in playback logs.<br/>
 * Only SUCCESS, FAILURE and CUSTOM steps are logged.<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _disableInfoLogging (){}
/**
 * 
 * Enables logging of INFO (normal) steps in playback logs<br/>
 * which was previously disabled using <code>_disableInfoLogging</code>.<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _enableInfoLogging (){}
/**
 * 
 * Disables automatic logging of errors.<br/>
 * Used in exception handling.<br/>
 * See<br/>
 * <a href="../scripting/exception-handling.html#Corrective Action and Log the Exception Message">Corrective Action and Log the Exception Message</a>
 * <br/>
 * <a href="../scripting/exception-handling.html#Corrective Action, Log and then Fail">Corrective Action, Log and then Fail</a>.<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _disableDefaultErrorLogging (){}
/**
 * 
 * Enables automatic logging of errors.<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _enableDefaultErrorLogging (){}
/**
 * 
 * Demarcates a testcase (a logical boundary of steps)<br/>
 * <pre><code>_navigateTo("/demo/training/");
 * 
 * <span class='code-highlight'>var $t = _testcase("TC_1", "Login");
 * $t.start();</span>
 * _setValue(_textbox("user"), "test");
 * _setValue(_password("password"), "secret");
 * _click(_submit("Login"));
 * <span class='code-highlight'>$t.end();</span>
 * 
 * <span class='code-highlight'>var $t2 = _testcase("TC_2", "Add books").start(); // can be in one line also</span>
 * _setValue(_textbox("q"), "2");
 * _setValue(_textbox("q[1]"), "1");
 * _setValue(_textbox("q[2]"), "1");
 * _click(_button("Add"));
 * <span class='code-highlight'>$t2.end();</span>
 * 
 * <span class='code-highlight'>var $t3 = _testcase("TC_8", "Verify total");
 * $t3.start();</span>
 * _assertExists(_textbox("total"));
 * _assert(_isVisible(_textbox("total")));
 * _assertEqual("1150", _textbox("total").value);
 * <span class='code-highlight'>$t3.end();</span></code></pre>
 * <br/>
 * The logs of the above script will look like this:<br/>
 * <img src="http://sahipro.com/docs/assets/images/common/testcase_logs.png" title="Playback logs with _testcase"/>
 * <br/>
 * <!-- TODO -->
 * Also refer to csv files as suites.<br/>
 * 
 * @param {string} $testcaseId -  Unique identifier for testcase
 * @param {string} $description -  Description to be shown in logs
 * 
 */
 function _testcase ($testcaseId, $description){}
/**
 * 
 * Tells Sahi to start logging HTTP request/response information for all network calls in this script.<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _startHarLogging (){}
/**
 * 
 * Tells Sahi to stop logging HTTP request/response information for all network calls in this script.<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _stopHarLogging (){}
/**
 * 
 * <ul>
 * <info>NOTE: $append was added Since Sahi Pro: 6.2.1. For old document <a href=http://sahipro.com/alldocs/v6.2.0/sahi-apis/multi-language.html#_setLanguage>Refer here</a>
 * </info>
 * </ul>
 * Sets the language in which the script will be executed.<br/>
 * <br/>
 * Example:<br/>
 * Assume a web application with a button which shows up as "Thank You" in English and "Danke" in German.<br/>
 * <br/>
 * If the script was recorded on the English version, it would look like:<br/>
 * <br/>
 * <pre><code>_click(_button("Thank You"));</code></pre>
 * <br/>
 * If the code was to be executed on the German site, it would fail because the button there says "Danke".<br/>
 * <br/>
 * If this application had been internationalized, it would have property files with the correct translations.<br/>
 * Eg.<br/>
 * <br/>
 * <pre><code># en.properties
 * ...
 * THANK_YOU=Thank You
 * ... other keys</code></pre>
 * <br/>
 * <pre><code># german.properties
 * ...
 * THANK_YOU=Danke
 * ... other keys</code></pre>
 * <br/>
 * Modify the Sahi script and provide these translation files:<br/>
 * <pre><code>_setLanguage("german.properties", "en.properties");
 * _click(_button("Thank You"));</code></pre>
 * <br/>
 * This will actually execute<br/>
 * <pre><code>_click(_button("Danke"));</code></pre>
 * on the browser.<br/>
 * 
 * @param {string} $translateTo -  Path to properties file for language to translate to (eg. for English to German, this may be <code>de.properties</code>). Paths are relative to script.
 * @param {string} $translateFrom -  Path to properties file for language to translate from (eg. for English to German, this may be <code>en.properties</code>). Paths are relative to script.
 * @param {boolean} $append - If true, appends the properties. Default is false.<br/>Sometimes translations may be split across multiple files. In such cases, multiple calls to _setLanguage may be needed.
 * 
 */
 function _setLanguage ($translateTo, $translateFrom, $append){}
/**
 * 
 * <ul>
 * <info>NOTE: $browserType was added Since Sahi Pro: 6.2.1. For old document <a href=http://sahipro.com/alldocs/v6.2.0/sahi-apis/multiple-browsers.html#_launchNewBrowser>Refer here</a>
 * </info>
 * </ul>
 * Returns the browserInstanceId<br/>
 * Launches a new browser instance. This instance does not share cookies with the base browser.<br/>
 * This allows testing functionality like chat where 2 simultaneous users need to be logged in into the system.<br/>
 * <br/>
 * <pre><code>// Suppose base window is chrome.
 * // launch a new chrome browser instance
 * var $id1 = _launchNewBrowser();
 * // launch a new chrome browser instance and navigate to "http://myapp/login.html"
 * var $id2 = _launchNewBrowser("http://myapp/login.html");
 * // launch a new firefox browser instance
 * var $id3 = _launchNewBrowser(null, "firefox");
 * // launch a new firefox browser instance and navigate to "http://myapp/login.html"
 * var $id4 = _launchNewBrowser("http://myapp/login.html", "firefox");</code></pre>
 * <br/>
 * Sahi tries to get a browser instance from a separate pool of instances (defined by browserType capacity in browser_types.xml).<br/>
 * If one is available it will return immediately. If not, Sahi will wait and retry x number of times.<br/>
 * x is defined by property <code>browser.max_wait_count_for_available_thread_from_dashboard</code> in <code>sahi.properties</code><br/>
 * If an instance is still not available, _launchNewBrowser will fail and throw an exception with appropriate message.<br/>
 * <br/>
 * Once launched, steps can be directed to different browser instances via <code>_selectBrowser</code><br/>
 * 
 * @param {string} $url -  URL to load on opening new browser instance. If URL is null, the Start URL of the script is launched.
 * @param {string} $browserType -  Browser type to launch. If null, a browser instance of the Default browser type is launched.
 * 
 */
 function _launchNewBrowser ($url, $browserType){}
/**
 * 
 * Selects the particular browser instance. Further steps in the script will be directed to the selected instance.<br/>
 * 
 * @param {string} $browserInstanceId -  browserInstanceId to forward further steps to. If not specified, steps are forwarded to the default browser that the script was started with.
 * 
 */
 function _selectBrowser ($browserInstanceId){}
/**
 * 
 * <info>
 * This is the recommended way of working with domains.<br/>
 * </info>
 * This API allows selecting a domain before performing further actions.<br/>
 * <pre><code>// switch to frame of domain www.domain1.com
 * _selectDomain("www.domain1.com");
 * // perform actions on frame
 * _assertEqual("Link Test", _getText(_link(0))); // no mention of domain needed
 * var $href;
 * _set($href, _link(0).href); // no mention of domain needed
 * // or
 * var $href = _fetch(_link(0).href); // no mention of domain needed
 * ...
 * // switch back to domain of top frame
 * _selectDomain();
 * // perform actions on domain of top frame
 * 
 * 
 * // To reference a domain along with its protocol, pass the protocol also. Eg.
 * _selectDomain("https://www.domain1.com");</code></pre>
 * 
 * @param {string} $domainIdentifier -  Can be the domain name or a regular expression of it.<br/>To reference the base domain, omit this parameter or use null.
 * 
 */
 function _selectDomain ($domainIdentifier){}
/**
 * 
 * Any step to be executed on a particular domain<br/>
 * would be prefixed by <code>_domain("domainIdentifier").</code>
 * <br/>
 * <warning>
 * _domain is ONLY used as a PREFIX to Sahi Action APIs<br/>
 * </warning>
 * <br/>
 * <pre><code>// clicks link in frame of domain "www.domain1.com"
 * _domain("www.domain1.com")._click(_link(0));
 * // domain by regular expression
 * _domain("/.*domain1.*&#47;")._click(_link(0));</code></pre>
 * <br/>
 * <warning>
 * This API may be confusing while fetching attribute values or using assertions.<br/>
 * </warning>
 * To fetch a value or asserting. this needs to be used  a particular way.<br/>
 * <pre><code>_domain("www.domain1.com")._assertEqual("Link Test", _getText(_link(0))); // CORRECT
 * _assertEqual("Link Test", _domain("www.domain1.com")._getText(_link(0))); // WRONG
 * 
 * var $href;
 * _domain("www.domain1.com")._set($href, _link(0).href); // CORRECT
 * _set($href, _domain("www.domain1.com")._link(0).href); // WRONG</code></pre>
 * It is better to use the _selectDomain API instead.<br/>
 * 
 * @param {string} $domainIdentifier -  Can be the domain name or a regular expression of it.<br/>To reference the base domain, omit this parameter or use null.
 * 
 */
 function _domain ($domainIdentifier){}
/**
 * 
 * Returns the browserInstanceId<br/>
 * Launches a new browser instance. This instance does not share cookies with the base browser.<br/>
 * <br/>
 * Once launched, steps can be directed to different browser instances via <code>_selectBrowser</code><br/>
 * <br/>
 * Mode has to be set to ANDROIDBROWSER, using _setMode before calling this API.<br/>
 * 
 * @param {string} $url -  URL to load on opening new browser instance. If URL is null, the Start URL of the script is launched.
 * @param {string} $deviceId -  Id of device on which to launch. If null, the browser is launched on the default device.
 * 
 */
 function _launchNewMobileBrowser ($url, $deviceId){}
/**
 * 
 * Selects the particular browser instance. Further steps in the script will be directed to the selected instance.<br/>
 * 
 * @param {string} $browserInstanceId -  browserInstanceId to forward further steps to. If not specified, steps are forwarded to the default browser that the script was started with.
 * 
 */
 function _selectBrowser ($browserInstanceId){}
/**
 * 
 * Returns the deviceInstanceId.<br/>
 * Connects to a device.<br/>
 * <br/>
 * Once connected, steps can be directed to different device instances via <code>_selectDevice</code><br/>
 * <br/>
 * Mode has to be set to ANDROID, using _setMode before calling this API.<br/>
 * 
 * @param {string} $deviceId -  Id of device to connect to. If null, the default device is connected to.
 * 
 */
 function _connectDevice ($deviceId){}
/**
 * 
 * Selects the particular device instance. Further steps in the script will be directed to the selected instance.<br/>
 * 
 * @param {string} $deviceInstanceId -  deviceInstanceId to forward further steps to. If not specified, steps are forwarded to the default device that the script was started with.
 * 
 */
 function _selectDevice ($deviceInstanceId){}
/**
 * 
 * <info>
 * This is the recommended way of working with secondary windows.<br/>
 * </info>
 * This API allows selecting a window before performing further actions.<br/>
 * <pre><code>// switch to popWin popup window
 * _selectWindow("popWin");
 * // perform actions on popWin
 * _assertEqual("Link Test", _getText(_link(0))); // no mention of popWin needed
 * var $href;
 * _set($href, _link(0).href); // no mention of popWin needed
 * ...
 * // switch back to base window
 * _selectWindow();
 * // perform actions on base window</code></pre>
 * <pre><code>_click(_link("Window Open Test"));
 * _wait(2000);
 * var $recentWindowId = _getRecentWindow().sahiWinId;
 * _selectWindow($recentWindowId);
 * // perform actions on popWin
 * _click(_link("Form Test"));
 * _click(_link("Close Self"));
 * // switch back to base window
 * _selectWindow();
 * // perform actions on base window</code></pre>
 * 
 * @param {string} $windowIdentifier -  the windowIdentifier can be the window name, the window title, or the window URL,<br/>or a regular expression of any of these. To reference the base window, omit this parameter or use null.<br/>The windowIdentifier can also be the sahiWinId.
 * 
 */
 function _selectWindow ($windowIdentifier){}
/**
 * 
 * This was the default way of accessing secondary windows. Any step to be executed on a particular secondary window<br/>
 * would be prefixed by <code>_popup("windowIdentifier").</code>
 * <br/>
 * <warning>
 * _popup is ONLY used as a PREFIX to Sahi Action APIs<br/>
 * </warning>
 * <br/>
 * <pre><code>// clicks link on popup of name popupWindow
 * _popup("popupWindow")._click(_link(0));
 * // popup by name regular expression
 * _popup("/pop.*Win/")._click(_link(0));
 * // popup by title
 * _popup("Popup Title")._click(_link(0));
 * // popup by title regular expression
 * _popup("/pup Tit/")._click(_link(0));
 * // popup by URL
 * _popup("http://sahi.co.in")._click(_link(0));
 * // poppu by URL regular expression
 * _popup("/sahi[.]co[.]in/")._click(_link(0));</code></pre>
 * <br/>
 * <warning>
 * This API is confusing while fetching attribute values or using assertions.<br/>
 * </warning>
 * To fetch a value or asserting. this needs to be used  a particular way.<br/>
 * <pre><code>_popup("popWin")._assertEqual("Link Test", _getText(_link(0))); // CORRECT
 * _assertEqual("Link Test", _popup("popWin")._getText(_link(0))); // WRONG
 * 
 * var $href;
 * _popup("popWin")._set($href, _link(0).href); // CORRECT
 * _set($href, _popup("popWin")._link(0).href); // WRONG</code></pre>
 * 
 * @param {string} $windowIdentifier -  the windowIdentifier can be the window name, the window title, or the window URL,<br/>or a regular expression of any of these. To reference the base window, omit this parameter or use null.<br/>The windowIdentifier can also be the sahiWinId.
 * 
 */
 function _popup ($windowIdentifier){}
/**
 * 
 * Returns an array of window-property objects.<br/>
 * A window-property is just an associative array with the following attributes:<br/>
 * <table>
 * <tr><td>windowName</td><td>window name</td></tr>
 * <tr><td>windowTitle</td><td>window title</td></tr>
 * <tr><td>windowURL</td><td>URL of top window</td></tr>
 * <tr><td>wasOpened</td><td>'0' or '1' as string. 0 means base window, 1 means popup window</td></tr>
 * <tr><td>domain</td><td>document.domain of window, if set</td></tr>
 * <tr><td>initialTime</td><td>Timestamp when window was opened</td></tr>
 * <tr><td>lastTime</td><td>Timestamp of last ping from that window</td></tr>
 * <tr><td>sahiWinId</td><td>sahiWinId for that window</td></tr>
 * </table>
 * <br/>
 * Example:<br/>
 * <pre><code>_navigateTo("http://sahi.co.in/demo/");
 * _click(_link("Window Open Test With Title"));
 * _wait(2000);
 * var $windows = _getWindows();
 * _assertEqual(2, $windows.length);
 * _assertEqual('With Title', $windows[1].windowTitle);
 * _assertEqual("1", $windows[1].wasOpened);</code></pre>
 * 
 * @param {integer} $activePeriod -  time in milliseconds to return windows within the time. Default is 0, which returns all windows.
 * 
 */
 function _getWindows ($activePeriod){}
/**
 * 
 * Returns true if the window exists.<br/>
 * <br/>
 * <info>
 * If you want to check that a window no longer exists after a particular step, do the following.<br/>
 * After the step, add a wait for 3000 milliseconds and then call _windowExists with activePeriod as 3000. _windowExists should return false for the window.<br/>
 * <br/>
 * NOTE that if you pass a larger activePeriod, _windowExists would return true, because the window was active at that past time.<br/>
 * <br/>
 * Please refer to the example below for usage.<br/>
 * </info>
 * <warning>
 * If activePeriod is not passed, _windowExists will return true if the window was ever opened during the session, even if the window is no longer open.<br/>
 * </warning>
 * <br/>
 * Example:<br/>
 * <pre><code>_navigateTo("/demo/");
 * _click(_link("Window Open Test"));
 * _wait(3000);
 * var $exists = _windowExists("/demo/");
 * var $exists2 = _windowExists("popWin");
 * _assertTrue($exists);
 * _assertTrue($exists2);
 * var $recentWindowId = _getRecentWindow().sahiWinId;
 * var $exists3 = _windowExists($recentWindowId);
 * _assertTrue($exists3);
 * _selectWindow("popWin");
 * _closeWindow(); // Closes the popup window
 * _selectWindow();
 * _wait(3000); // Wait for 3 seconds
 * var $exists3 = _windowExists("popWin", 3000); // Now _windowExists returns false.
 * _assertFalse($exists3);</code></pre>
 * 
 * @param {string} $windowIdentifier -  The windowIdentifier can be the window name, the window title, the window URL or the sahiWinId,<br/>or a regular expression of any of these.
 * @param {integer} $activePeriod -  Time interval in milliseconds within which the specified window is checked for activity. Default is -1, which means the specified window is checked amongst all windows opened during the session.
 * 
 */
 function _windowExists ($windowIdentifier, $activePeriod){}
/**
 * 
 * Returns the most recent (last opened) window. Refer to <a href="#_getWindows">_getWindows</a> for all properties of window object returned.<br/>
 * <br/>
 * <info>
 * NOTE: If you are checking for the recent window just after a step that opens the window, add an explicit wait of 2000 to 3000 milliseconds before the _getRecentWindow call.<br/>
 * </info>
 * <info>
 * This API is quite useful in the following scenario.<br/>
 * <br/>
 * Sometimes, an application opens multiple popup windows with dynamic identifiers but with the same regular expression pattern in the identifier. The requirement is to identify the recently opened popup.<br/>
 * Since the identifier is dynamic, one cannot use it as is. Since all windows have the same regular expression pattern, one cannot use the regular expression pattern either.<br/>
 * <br/>
 * In such a scenario, one can use _getRecentWindow to identify the most recently opened window.<br/>
 * </info>
 * <br/>
 * Example:<br/>
 * <pre><code>_navigateTo("/demo/");
 * _click(_link("Window Open Test"));
 * _click(_link("Window Open Test With Title"));
 * _wait(2000);
 * var $recentWindow = _getRecentWindow();
 * _assertEqual('With Title', $recentWindow.windowTitle); // This is the window opened by clicking the link "Window Open Test With Title".
 * _assertEqual("1", $recentWindow.wasOpened);</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 function _getRecentWindow (){}
/**
 * 
 * _near is a DOM relation marker which specifies that the element should be searched near another element.<br/>
 * <br/>
 * Example:<br/>
 * <pre><code>&lt;table style="width:300px"&gt;
 *     &lt;tr&gt;
 *         &lt;td&gt;Name&lt;/td&gt;
 *         &lt;td&gt;Action&lt;/td&gt;
 *         &lt;td&gt;ID&lt;/td&gt;
 *     &lt;/tr&gt;
 *     &lt;tr&gt;
 *         &lt;td&gt;User One&lt;/td&gt;
 *         &lt;td id="del1"&gt;&lt;a href="/deleteUser?id=1" onclick="return false"&gt;delete&lt;/a&gt;&lt;/td&gt;
 *         &lt;td&gt;ID 1&lt;/td&gt;
 *     &lt;/tr&gt;
 *     &lt;tr&gt;
 *         &lt;td&gt;User Two&lt;/td&gt;
 *         &lt;td id="del2"&gt;&lt;a href="/deleteUser?id=2" onclick="return false"&gt;delete&lt;/a&gt;&lt;/td&gt;
 *         &lt;td&gt;ID 2&lt;/td&gt;
 *     &lt;/tr&gt;
 * &lt;/table&gt;</code></pre>
 * <table style="width:300px">
 *     <tr>
 *         <td>Name</td>
 *         <td>Action</td>
 *         <td>ID</td>
 *     </tr>
 *     <tr>
 *         <td>User One</td>
 *         <td id="del1"><a href="/deleteUser?id=1" onclick="return false">delete</a></td>
 *         <td>ID 1</td>
 *     </tr>
 *     <tr>
 *         <td>User Two</td>
 *         <td id="del2"><a style="border:1px solid red" href="/deleteUser?id=2" onclick="return false">delete</a></td>
 *         <td>ID 2</td>
 *     </tr>
 * </table>
 * <br/>
 * <table>
 *   <tbody>
 *     <tr>
 *       <td style="width:380px"><code>_link(0, _near(_cell("User Two")))</code></td>
 *       <td>points to the 0th link near cell with text "User Two".<br> Note that the index is 0 here since it is the nearest link.<br/>
 *       </td>
 *     </tr>
 *     <tr>
 *       <td><code>_link("delete", _near(_cell("User Two")))</code></td>
 *       <td>points to the nearest link with text "delete" near cell with text "User Two".<br/>
 *       Note that we do not need to specify "delete[1]" since it is the delete link nearest to User Two.<br/>
 *       </td>
 *     </tr>
 *   </tbody>
 * </table>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element to which the other element is near
 * 
 */
 function _near ($element){}
/**
 * 
 * _in is a DOM relation marker which specifies that the element should be searched within another element.<br/>
 * <br/>
 * In the same example table as above:<br/>
 * <table>
 *     <tbody><tr>
 *       <td> _link(0, _in(_cell("del2"))) </td>
 *       <td> points to the 0th link in cell with id "del2" </td>
 *     </tr>
 *     <tr>
 *       <td> _link("delete", _in(_cell("del2"))) </td>
 *       <td> points to the link with text "delete" within cell with id "del2" </td>
 *     </tr>
 *   </tbody></table>
 * <br/>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - element in which the other element is located
 * 
 */
 function _in ($element){}
/**
 * 
 * _startLookInside is a DOM relation marker setter which specifies that the element should be searched within another element.<br/>
 * <br/>
 * Example:<br/>
 * <pre><code>_startLookInside(_cell("del2"));
 * _link(0); //points to the 0th link in cell with id "del2"
 * _link("delete"); //points to the link with text "delete" within cell with id "del2"
 * _stopLookInside();</code></pre>
 * 
 * @param {HTML DOM element} $element - element in which the other element is located
 * 
 */
 function _startLookInside ($element){}
/**
 * 
 * _stopLookInside is a DOM relation marker re-setter which re-sets the _startLookInside relation marker.<br/>
 * <br/>
 * Example:<br/>
 * <pre><code>_startLookInside(_cell("del2"));
 * _link(0);
 * _link("delete");
 * _stopLookInside(); //reset the _startLookInside relation marker.</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 function _stopLookInside (){}
/**
 * 
 * _rightOf specifies that the other element should be searched to the right of this element.<br/>
 * <br/>
 * Example<br/>
 * <pre><code>_link(0, _rightOf(_cell("User Two")))
 * _link("delete", _rightOf(_cell("User Two")))
 * _link("delete", _rightOf(_cell("User Two"), 25))
 * _link("delete", _rightOf(_cell("User Two"), [25,25]))</code></pre>
 * 
 * @param {HTML DOM element} $element - element to establish the _rightOf relation with
 * @param {pr_i_AB|integer} $offset - offset above and below within which to look for elements boundry<br/>within which to look for the other element.<br/>If offset is an integer, both above and below offsets are set to this offset<br/>element1 may be to the right but slightly above or below element2.<br/>Sahi normally matches only elements whose bases match.<br/>To force it to look a little above or below while looking to the right, use the offset.
 * 
 */
 function _rightOf ($element, $offset){}
/**
 * 
 * _leftOf specifies that the other element should be searched to the left of this element.<br/>
 * <br/>
 * Example<br/>
 * <pre><code>_link(0, _leftOf(_cell("ID 2")))
 * _link("delete", _leftOf(_cell("ID 2")))
 * _link("delete", _leftOf(_cell("ID 2"), 25))
 * _link("delete", _leftOf(_cell("ID 2"), [25,25]))</code></pre>
 * 
 * @param {HTML DOM element} $element - element to establish the _leftOf relation with
 * @param {pr_i_AB|integer} $offset - offset above and below within which to look for elements boundry<br/>If offset is an integer, both above and below offsets are set to this offset.<br/>element1 may be to the left but slightly above or below element2.<br/>Sahi normally matches only elements whose bases match.<br/>To force it to look a little above or below while looking to the left, use the offset.
 * 
 */
 function _leftOf ($element, $offset){}
/**
 * 
 * _leftOrRightOf specifies that the other element should be searched to the left or right of this element.<br/>
 * <br/>
 * Example<br/>
 * <pre><code>_link(0, _leftOrRightOf(_cell("ID 2")))
 * _link("delete", _leftOrRightOf(_cell("ID 2")))
 * _link("delete", _leftOrRightOf(_cell("ID 2"), 25))
 * _link("delete", _leftOrRightOf(_cell("ID 2"), [25,25]))</code></pre>
 * 
 * @param {HTML DOM element} $element - element to establish the _leftOrRightOf relation with
 * @param {pr_i_AB|integer} $offset - offset above and below within which to look for elements boundry<br/>If offset is an integer, both above and below offsets are set to this offset.<br/>element1 may be to the left but slightly above or below element2.<br/>Sahi normally matches only elements whose bases match.<br/>To force it to look a little above or below while looking to the left or right, use the offset.
 * 
 */
 function _leftOrRightOf ($element, $offset){}
/**
 * 
 * _under specifies that the other element should be searched under this element.<br/>
 * <br/>
 * Example<br/>
 * <pre><code>_link(0, _under(_cell("Action")))
 * _link("delete", _under(_cell("Action")))
 * _link("delete", _under(_cell("Action")), _rightOf(_cell("User Two")))
 * _link("delete", _under(_cell("Action"), 10))
 * _link("delete", _under(_cell("Action"), [10, 50]))
 * _link("delete", _under(_cell("Action"), 10, 100))</code></pre>
 * 
 * @param {HTML DOM element} $element - element to establish the _under relation with
 * @param {pr_i_LR|integer} $offset - offset specifies the left and right extension to element boundary<br/>within which to look for the other element.<br/>If offset is an integer, both left and right offsets are set to this offset
 * @param {integer} $limitUnder - For a large page, you may want to limit how far you look under. This value limits the<br/>search to limitUnder pixels below this element.
 * 
 */
 function _under ($element, $offset, $limitUnder){}
/**
 * 
 * _above specifies that the other element should be searched above this element.<br/>
 * <br/>
 * Example<br/>
 * <pre><code>_cell(0, _above(_cell("User Two"))) // gives User One
 * _link("delete", _above(_cell("Action")))
 * _link("delete", _above(_cell("Action")), _rightOf(_cell("User Two")))
 * _link("delete", _above(_cell("Action"), 10))
 * _link("delete", _above(_cell("Action"), [10, 50]))
 * _link("delete", _above(_cell("Action"), 10, 100))</code></pre>
 * 
 * @param {HTML DOM element} $element - element to establish the _above relation with
 * @param {pr_i_LR|integer} $offset - offset specifies the left and right extension to element boundary<br/>within which to look for the other element.<br/>If offset is an integer, both left and right offsets are set to this offset
 * @param {integer} $limitTop - For a large page, you may want to limit how far you look above. This value limits the<br/>search to limitTop pixels above this element.
 * 
 */
 function _above ($element, $offset, $limitTop){}
/**
 * 
 * _aboveOrUnder specifies that the other element should be searched above or below this element.<br/>
 * <br/>
 * Example<br/>
 * <pre><code>_cell(0, _aboveOrUnder(_cell("User Two"))) // gives User One
 * _link(0, _aboveOrUnder(_cell("ID 2")))
 * _link("delete", _aboveOrUnder(_cell("ID 2")))
 * _link("delete", _aboveOrUnder(_cell("ID 2"), 25))
 * _link("delete", _aboveOrUnder(_cell("ID 2"), [25,25]))</code></pre>
 * 
 * @param {HTML DOM element} $element - element to establish the _aboveOrUnder relation with
 * @param {pr_i_LR|integer} $offset - offset specifies the left and right extension to element boundary<br/>within which to look for the other element.<br/>If offset is an integer, both left and right offsets are set to this offset
 * 
 */
 function _aboveOrUnder ($element, $offset){}
/**
 * 
 * Eg. in<br/>
 * <pre><code>&lt;div id="div2"&gt;
 *   &lt;span&gt;&lt;div id="div1"&gt;
 *       &lt;a href=""&gt;aLink&lt;/a&gt;
 *     &lt;/div&gt;&lt;/span&gt;
 * &lt;/div&gt;</code></pre>
 * <br/>
 * <pre><code>_parentNode(_link("aLink"), "DIV", 1) // points to div1
 * _parentNode(_link("aLink"), "DIV", 2) // points to div2</code></pre>
 * 
 * @param {HTML DOM element} $element - element whose parent we wish to access
 * @param {string} $tagName - Tag name of parent. eg. "TD" or "DIV"
 * @param {integer} $occurrence - The nth parent. 1 is the immediate parent.
 * 
 */
 function _parentNode ($element, $tagName, $occurrence){}
/**
 * 
 * Eg. in<br/>
 * <pre><code>&lt;td id="id"&gt;&lt;a href=""&gt;aElement&lt;/a&gt;&lt;/td&gt;</code></pre>
 * <br/>
 * <pre><code>_parentCell(_link("aElement")) // points to parent cell</code></pre>
 * 
 * @param {HTML DOM element} $element - element whose parent cell we wish to access
 * @param {integer} $occurrence - The nth parent. 1 is the immediate parent.
 * 
 */
 function _parentCell ($element, $occurrence){}
/**
 * 
 * Eg. in<br/>
 * <pre><code>&lt;tr&gt;
 *   &lt;td id="id"&gt;&lt;a href=""&gt;aElement&lt;/a&gt;&lt;/td&gt;
 * &lt;/tr&gt;</code></pre>
 * <br/>
 * <pre><code>_parentRow(_link("aElement")) // points to parent row</code></pre>
 * 
 * @param {HTML DOM element} $element - element whose parent row we wish to access
 * @param {integer} $occurrence - The nth parent. 1 is the immediate parent row.
 * 
 */
 function _parentRow ($element, $occurrence){}
/**
 * 
 * Eg. in<br/>
 * <pre><code>&lt;table&gt;
 *   &lt;tr&gt;
 *     &lt;td id="id"&gt;&lt;a href=""&gt;aElement&lt;/a&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 * &lt;/table&gt;</code></pre>
 * <br/>
 * <pre><code>_parentTable(_link("aElement")) // points to parent table</code></pre>
 * 
 * @param {HTML DOM element} $element - element whose parent table we wish to access
 * @param {integer} $occurrence - The nth parent. 1 is the immediate parent table.
 * 
 */
 function _parentTable ($element, $occurrence){}
/**
 * 
 * RESTRequest object is used to REST requests<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function RESTRequest (){}
/**
 * 
 * Adds a query parameter to the request URL<br/>
 * <pre><code>$request = new RESTRequest();
 * $request.addToQueryString("Place", "Bangalore");</code></pre>
 * Single argument can also be passed to this api. This can be a string which is queryString or Parameter object. Parameter object is explained below.<br/>
 * <ol>
 * <li>As query string<br/>
 * <pre><code>$request = new RESTRequest();
 * $request.addToQueryString("Place=Bangalore");</code></pre>
 * </li>
 * <li>As Parameter object<br/>
 * <pre><code>$request = new RESTRequest();
 * var $p = new Parameter();
 * $p.add("Name", "Jane");
 * $p.add("Age", "25");
 * $request.addToQueryString($p);</code></pre>
 * </li>
 * </ol>
 * 
 * @param {string} $key - query parameter key
 * @param {string} $value - query parameter value
 * 
 */
 RESTRequest.addToQueryString = function($key, $value){}
/**
 * 
 * Adds a query parameter to the request Body<br/>
 * <pre><code>$request = new RESTRequest();
 * $request.addToBody("Place", "Bangalore");</code></pre>
 * Single argument can also be passed to this api. This can be a string which is queryString or Parameter object. Parameter object is explained below.<br/>
 * <ol>
 * <li>As query string<br/>
 * <pre><code>$request = new RESTRequest();
 * $request.addToBody("Place=Bangalore");</code></pre></li>
 * <li>As Parameter object<br/>
 * <pre><code>$request = new RESTRequest();
 * var $p = new Parameter();
 * $p.add("Name", "Jane");
 * $p.add("Age", "25");
 * $request.addToBody($p);</code></pre>
 * </li>
 * </ol>
 * 
 * @param {string} $key - query parameter key
 * @param {string} $value - query parameter value
 * 
 */
 RESTRequest.addToBody = function($key, $value){}
/**
 * 
 * Sets request header<br/>
 * <pre><code>$request = new RESTRequest();
 * $request.setHeader("Accept-Encoding", "deflate,sdch");</code></pre>
 * 
 * @param {string} $key - Header name
 * @param {string} $value - Header value
 * 
 */
 RESTRequest.setHeader = function($key, $value){}
/**
 * 
 * Sets url to be navigated<br/>
 * <pre><code>$request = new RESTRequest();
 * $request.setURL("http://sahi.co.in");</code></pre>
 * 
 * @param {string} $url - url to be navigated
 * 
 */
 RESTRequest.setURL = function($url){}
/**
 * 
 * Sets body of the request. Pass a JSON string.<br/>
 * <pre><code>var $json = {
 *     "firstName": "John",
 *     "lastName": "Smith",
 *     "age": 25,
 *     "address": {
 *         "streetAddress": "21 2nd Street",
 *         "city": "Mumbai"
 *     }
 * };
 * var $jsonString = JSON.stringify($json);
 * 
 * $request = new RESTRequest();
 * $request.setBody($jsonString);</code></pre>
 * <info>
 * SOAP requests can be made by setting the Soap request xml in the body of the request through setBody.<br/>
 * </info>
 * 
 * @param {string} $body - the body of the request.
 * 
 */
 RESTRequest.setBody = function($body){}
/**
 * 
 * Sets authentication parameters when trying to access an authorized page. Uses the credentials provided for 401 Authentication.<br/>
 * <pre><code>$request = new RESTRequest();
 * $request.setCredentials("testuser", "password");</code></pre>
 * 
 * @param {string} $username - Username for authentication
 * @param {string} $password - Password for authentication
 * 
 */
 RESTRequest.setCredentials = function($username, $password){}
/**
 * 
 * Sets authentication parameters when trying to access an authorized page. Uses the credentials provided for Basic/oAuth1.0 Authentication.<br/>
 * <pre><code>// For Basic auth
 * $request = new RESTRequest();
 * $request.setAuthCredentials("authType", "Basic Auth");
 * $request.setAuthCredentials("userName", "testuser");
 * $request.setAuthCredentials("passWord", "password");
 * // For oAuth1.0
 * $request = new RESTRequest();
 * $request.setAuthCredentials("authType", "OAuth 1.0");
 * $request.setAuthCredentials("oauth_consumer_key", "consumer key");
 * $request.setAuthCredentials("oauth_consumer_secret", "consumer secret");
 * $request.setAuthCredentials("oauth_token", "token");
 * $request.setAuthCredentials("oauth_token_secret", "token secret");
 * $request.setAuthCredentials("oauth_signature_method", "HMAC-SHA1");
 * $request.setAuthCredentials("oauth_version", "1.0");</code></pre>
 * 
 * @param {string} $oauthtype - oauthtype for authentication
 * @param {string} $oauthvalue - oauthvalue for authentication
 * 
 */
 RESTRequest.setAuthCredentials = function($oauthtype, $oauthvalue){}
/**
 * 
 * Submits the request, reads response and returns a RESTResponse object<br/>
 * <pre><code>$request = new RESTRequest();
 * $request.setURL("http://sahi.co.in");
 * $response = $request.submit("get");</code></pre>
 * If this api is called before setURL it will return a null object<br/>
 * 
 * @param {string} $method - request method, values can be "get", "post" or "delete"
 * 
 */
 RESTRequest.submit = function($method){}
/**
 * 
 * RESTResponse object is used to read REST responses<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function RESTResponse (){}
/**
 * 
 * <pre><code>var $s = $response.getResponseCode(); //returns response code e.g. 200, 404 etc.</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 RESTResponse.getResponseCode = function(){}
/**
 * 
 * <pre><code>var $s = $response.getHeader("Content-Length"); //returns value of content-length header</code></pre>
 * 
 * @param {string} $key - Header name
 * 
 */
 RESTResponse.getHeader = function($key){}
/**
 * 
 * <ul>
 * <info>NOTE: $charSet was added Since Sahi Pro: 6.2.1. For old document <a href=http://sahipro.com/alldocs/v6.2.0/sahi-apis/rest-apis.html#RESTResponse.getBodyAsString>Refer here</a>
 * </info>
 * </ul>
 * <pre><code>var $s = $response.getBodyAsString(); //returns the content of the body using UTF-8 encoding
 * var $s = $response.getBodyAsString("ISO-8859-1"); //returns the content of the body using ISO-8859-1 encoding</code></pre>
 * 
 * @param {string} $charSet -  Character set. Default is "UTF-8".
 * 
 */
 RESTResponse.getBodyAsString = function($charSet){}
/**
 * 
 * <pre><code>var $s = $response.getBody(); //returns the content of the body</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 RESTResponse.getBody = function(){}
/**
 * 
 * Parameter object is used to add parameters to query string and body<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function Parameter (){}
/**
 * 
 * Adds a key-value pair to Parameter object<br/>
 * <pre><code>var $p = new Parameter();
 * $p.add("Name", "Jane");</code></pre>
 * 
 * @param {string} $key -  parameter key
 * @param {string} $value -  parameter value
 * 
 */
 Parameter.add = function($key, $value){}
/**
 * 
 * Removes a key-value pair(if exists) from Parameter object, specified by the key<br/>
 * <pre><code>var $p = new Parameter();
 * $p.add("Name", "Jane");
 * $p.add("Age", "25");
 * $p.remove("Name");</code></pre>
 * 
 * @param {string} $key -  parameter key
 * 
 */
 Parameter.remove = function($key){}
/**
 * 
 * Creates a query string using all the key-value pairs in the Parameter object<br/>
 * <pre><code>var $p = new Parameter();
 * $p.add("Name", "Jane");
 * $p.add("Age", "25");
 * var $qs = $p.getQueryString();</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 Parameter.getQueryString = function(){}
/**
 * 
 * <pre><code>_rte("editor") // using id
 * _rte(0, _in(_div("editorDiv"))) // using index and _in</code></pre>
 * <info>
 * _rte is the same as <a href="accessor-apis.html#_iframe">_iframe</a>.<br/>
 * </info>
 * 
 * @param {string} $identifier -  Can be name, id or index of iframe which houses the RTE.
 * @param {relation} $relation -  Relation APIs
 * 
 */
 function _rte ($identifier, $relation){}
/**
 * 
 * <pre><code>// get the rich text editor's text content
 * var $rteText = _rteText(_rte("rteId"));
 * // $rteText may look like "Hi there"</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el - Element which is content editable (eg. _rte(0))
 * 
 */
 function _rteText ($el){}
/**
 * 
 * <pre><code>// get the rich text editor's HTML content
 * var $rteHTML = _rteHTML(_rte("rteId"));
 * // $rteHTML may look like "Hi &lt;b&gt;there&lt;/b&gt;"</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $el - Element which is content editable (eg. _rte(0))
 * 
 */
 function _rteHTML ($el){}
/**
 * 
 * Replaces the content of the RTE with given HTML.<br/>
 * Note that this does not simulate all events like other Sahi APIs.<br/>
 * _rteWrite only replaces the content of the iframe.<br/>
 * <pre><code>_rteWrite(_rte("editor"), "Hi &lt;b&gt;user&lt;/b&gt;");</code></pre>
 * 
 * @param {HTML DOM/ Windows/ Java element} $rte - RTE to write into
 * @param {string} $html - html to write
 * 
 */
 function _rteWrite ($rte, $html){}
/**
 * 
 * Takes a screen shot and embeds the image in the playback log<br/>
 * Since Sahi works without bringing the window into focus,<br/>
 * we first need to call <code>_focusWindow</code> to bring the window into focus.<br/>
 * <info>
 * Sahi currently takes the full window (desktop) screenshot, not just the browser window<br/>
 * </info>
 * <warning>
 * If _sahi.SKIP_SCREENSHOTS is specified as true, this API will be skipped.<br/>
 * </warning>
 * <danger>
 * In 6.0.0, $format and $resizePercentage have been moved into the $props parameter. Scripts written before 6.0.0 will need changes.<br/>
 * </danger>
 * <br/>
 * <pre><code>_focusWindow(); // bring window into focus
 * _takeScreenShot();
 * // captures screenshot in D:\dev\capture.jpg(compresses file size to 75% of the full size with jpg format)
 * // without embedding image in the playback log
 * _takeScreenShot("D:\\dev\\capture.jpg", true, {format:'jpg', resizePercentage:75});</code></pre>
 * 
 * @param {string} $fileSysPath - file path to copy screenshot in file system
 * @param {boolean} $noLog - true to prevent embedding the image in the playback log<br/>Default is false
 * @param {object} $props - properties for image format(format) and image compression in precentage(resizePercentage)<br/>1. format, string, optional, can be GIf, JPG or PNG<br/>Default is "sahi.takeScreenShot_image.format" property defines in config/sahi.properties, this can be overridden in userdata/config/userdata.properties<br/>2. resizePercentage, integer, optional<br/>Default is "sahi.takeScreenShot_image.resize_percentage" property defines in config/sahi.properties, this can be override in userdata/config/userdata.properties<br/>100 means no compression
 * 
 */
 function _takeScreenShot ($fileSysPath, $noLog, $props){}
/**
 * 
 * Takes a screen shot after every step and embeds the image in the playback log.<br/>
 * <pre><code>_focusWindow(); // bring window into focus
 * // Enable screenshots
 * _takeScreenShots(true);
 * // perform actions
 * // screenshot will be taken after each step
 * // disable screenshots
 * _takeScreenShots(false);
 * // screenshots will not be taken now.</code></pre>
 * <warning>
 * If _sahi.SKIP_SCREENSHOTS is specified as true, this API will be skipped.<br/>
 * </warning>
 * 
 * @param {boolean} $enable - true for enabling screenshots, false to disable
 * @param {string} $directory - file path directory to copy screenshot in file system
 * 
 */
 function _takeScreenShots ($enable, $directory){}
/**
 * 
 * <ul>
 * <info>NOTE: Point number '6' in $props was added Since Sahi Pro: 6.2.1. For old document <a href=http://sahipro.com/alldocs/v6.2.0/sahi-apis/screenshot-apis.html#_takePageScreenShot>Refer here</a>
 * </info>
 * </ul>
 * Takes a full page screenshot of a web page by scrolling to the end of the page and embeds the image in the playback log.<br/>
 * If the element attribute is specified, a full page screenshot of the browser element is taken, instead of the web page.<br/>
 * Since Sahi works without bringing the window into focus, we first need to call <code>_focusWindow</code> to bring the window into focus.<br/>
 * <br/>
 * <pre><code>_focusWindow(); // Brings window into focus
 * _takePageScreenShot(); // Captures the full browser page screenshot
 * _takePageScreenShot(_table("t4")); // Captures the table screenshot
 * 
 * // Captures table screenshot with jpg format, compresses file size to 75% of the full size, saves it to D:\dev\capture.jpg
 * // without embedding image in the playback log
 * _takePageScreenShot(_table("t4"), "D:\\dev\\capture.jpg", true, {format:'jpg', resizePercentage:75});
 * 
 * // Captures full div screenshot by scrolling to the end of the div.
 * // Use it in cases where a div has its own scrollbar.
 * _call(_div("myDIV").scrollIntoView()); // scroll the div into view first
 * _takePageScreenShot(_div("myDIV"), null, null, {mode:2}); // the div itself will be scrolled and screen shots taken</code></pre>
 * <warning>
 * If _sahi.SKIP_SCREENSHOTS is specified as true, this API will be skipped.<br/>
 * </warning>
 * 
 * @param {HTML DOM/ Windows/ Java element} $element - If specified, a full page screenshot of the element would be taken
 * @param {string} $fileSysPath - File system path to save a copy of the screenshot, additionally to. Relative paths will be resolved relative to current executing script. Default is null.
 * @param {boolean} $noLog - Pass true to prevent embedding the image in the playback log. Default is false
 * @param {object} $props - Properties to specify for image delay, scrollLimit, trim, format and image compression in percentage(resizePercentage).<br/>1. delay, integer, optional, time delay between scroll and screenshot in milliseconds.<br/>For long pages, the page is scrolled, individual screenshots are taken and then stitched.<br/>Sometimes images on the page may load slowly on scroll and a wait may be needed between scroll and screenshot.<br/>Default is 100 ms.<br/>2. scrollLimit, integer, optional, height in pixels. Maximum scroll size in pixels for a page/element. Default is 200000.<br/>3. trim, boolean, optional, Trim the image for blank space. Default is true. This works only if Graphics Magick is installed and configured correctly. Fails silently if not installed.<br/>4. format, string, optional, can be GIF, JPG or PNG<br/>Default is "sahi.takeScreenShot_image.format" property defined in config/sahi.properties. This can be overridden in userdata/config/userdata.properties<br/>5. resizePercentage, integer, optional<br/>Default is "sahi.takeScreenShot_image.resize_percentage" property defined in config/sahi.properties. This can be overridden in userdata/config/userdata.properties. 100 means no compression.<br/>6. mode, integer, optional<br/>Default is 1. Set to 2 only if element attribute is specified and element has scrollbar.
 * 
 */
 function _takePageScreenShot ($element, $fileSysPath, $noLog, $props){}
/**
 * 
 * <ul>
 * <info>NOTE: Point number '6' in $props was added Since Sahi Pro: 7.0.0. For old document <a href=http://sahipro.com/alldocs/v6.3.2/sahi-apis/screenshot-apis.html#_assertSnapShot>Refer here</a>
 * </info>
 * </ul>
 * Takes the full page screen shot of the webpage or the browser element if specified, and compares with the reference image.<br/>
 * If the difference between the page screenshot and the reference image is lesser than or equal to the differenceThreshold, the images will be treated as same and the assertion is successful. Else the assertion is treated as a failure.<br/>
 * If the assertion is successful and displayOnSuccess is true, the page screenshot, reference image and the differential image will be embedded in the playback log.<br/>
 * If the assertion is a failure, _assertSnapShot will log failures to the playback log. The page screenshot, reference image and the differential image will be embedded in the playback log.<br/>
 * <br/>
 * <pre><code>_navigateTo("http://sahi.co.in/demo/training");
 * _assertSnapShot("snapshot_login_page.png", _div(0), 20, true); // only _div(0) content would be compared with reference image.
 * // OR
 * _assertSnapShot("snapshot_login_page.png", null, 20, true); // passing null to compare with entire window screenshot
 * // OR
 * _assertSnapShot("snapshot_login_page.png",_div("myDIV"), 20, true, {mode:2}); // the div itself will be scrolled and screen shots taken</code></pre>
 * <danger>
 * DO NOT USE THIS IN AN IF CONDITION as it does not return any value, and throws an exception if the assertion fails<br/>
 * Use <a href='screenshot-apis.html#_compareImages'>_compareImages</a> instead.<br/>
 * </danger>
 * <info>This api is dependent on GraphicsMagick software.<br/>
 * To configure the GraphicsMagick on the system, please refer <a href='../sahi-apis/screenshot-apis.html#Configuring GraphicsMagick'>Configuring GraphicsMagick</a>
 * </info>
 * <warning>
 * If _sahi.SKIP_ASSERT_SNAPSHOTS is specified as true, this API will be skipped.<br/>
 * </warning>
 * 
 * @param {string} $refPath - File path of the reference image to compare the page screenshot with. Relative paths will be resolved relative to current executing script.
 * @param {HTML DOM/ Windows/ Java element} $element - If specified, a full page screenshot of the element would be compared with the reference image. If not, a full page screenshot of the webpage would be compared with the reference image.
 * @param {float} $differenceThreshold - If the difference between the reference image and the page screenshot is lesser than or equal to the differenceThreshold number, they are considered same.<br/>If not specified, a value of 20 is assumed.
 * @param {boolean} $displayOnSuccess - When true, the page screenshot, reference image and the differential image will be embedded in the playback log, if the assertion succeeds. Default is false. Note that these images will always be embedded in case of assertion failure.
 * @param {object} $props - Properties to specify for image delay, scrollLimit, trim, format and image compression in percentage(resizePercentage).<br/>1. delay, integer, optional, time delay between scroll and screenshot in milliseconds.<br/>For long pages, the page is scrolled, individual screenshots are taken and then stitched.<br/>Sometimes images on the page may load slowly on scroll and a wait may be needed between scroll and screenshot.<br/>Default is 100 ms.<br/>2. scrollLimit, integer, optional, height in pixels. Maximum scroll size in pixels for a page/element. Default is 200000.<br/>3. trim, boolean, optional, Trim the image for blank space. Default is true. This works only if Graphics Magick is installed and configured correctly. Fails silently if not installed.<br/>4. format, string, optional, can be GIF, JPG or PNG<br/>Default is "sahi.takeScreenShot_image.format" property defined in config/sahi.properties. This can be overridden in userdata/config/userdata.properties<br/>5. resizePercentage, integer, optional<br/>Default is "sahi.takeScreenShot_image.resize_percentage" property defined in config/sahi.properties. This can be overridden in userdata/config/userdata.properties. 100 means no compression.<br/>6. mode, integer, optional<br/>Default is 1. Set to 2 only if element attribute is specified and element has scrollbar.
 * 
 */
 function _assertSnapShot ($refPath, $element, $differenceThreshold, $displayOnSuccess, $props){}
/**
 * 
 * Takes the path of the 2 images and checks if both images are same or not.<br/>
 * <br/>
 * <pre><code>_navigateTo("http://sahi.co.in/demo/training");
 * _takePageScreenShot(null, "D:\\dev\\images\\login.png")
 * var $same = _compareImages("snapshot_login_page.png", "D:\\dev\\images\\login.png");
 * _assert($same);</code></pre>
 * <info>This api is dependent on GraphicsMagick software.<br/>
 * To configure the GraphicsMagick on the system, please refer <a href='../sahi-apis/screenshot-apis.html#Configuring GraphicsMagick'>Configuring GraphicsMagick</a>
 * </info>
 * <warning>
 * If _sahi.SKIP_ASSERT_SNAPSHOTS is specified as true, this API will be skipped.<br/>
 * </warning>
 * 
 * @param {string} $f1 - File path of the first image. Relative paths will be resolved relative to current executing script.
 * @param {string} $f2 - File path of the second image. Relative paths will be resolved relative to current executing script.
 * @param {float} $differenceThreshold - If the difference between first and second image is lesser than or equal to the differenceThreshold number, they are considered to be same images.
 * 
 */
 function _compareImages ($f1, $f2, $differenceThreshold){}
/**
 * 
 * _setMode tells the script to start executing further steps on a different mode (application type).<br/>
 * Look at <a href="../using-sahi/multiple-modes.html">Sahi Pro multiple modes</a> for available modes.<br/>
 * <pre><code>_setMode("BROWSER"); // Further steps in script will be sent to browser.
 * _setMode("WINDOWS"); // Further steps in script will be sent to Windows applications.</code></pre>
 * 
 * @param {string} $applicationType -  Mode or Application Type to set.<br/>If not specified, application type BROWSER is assumed.
 * 
 */
 function _setMode ($applicationType){}
/**
 * 
 * Forces script to wait for given time or given condition to  be true, which ever comes first<br/>
 * <pre><code>_wait(1000); // Will stop execution for a second
 * 
 * // Wait till div by id "ajaxConfirm" is populated for max 5 seconds.
 * _wait(5000, _getText(_div("ajaxConfirm"))!="");
 * 
 * // Wait till button becomes visible
 * _wait(5000, _isVisible(_button("Confirm")));
 * 
 * // Wait till "Loading ..." message disappears
 * _wait(1000); // may take a second before that message appears.
 * _wait(5000, !_isVisible(_div("Loading ..."))); // wait max 5 seconds for it to disappear.</code></pre>
 * 
 * @param {integer} $timeout -  time in milliseconds to wait for
 * @param {Sahi expression} $condition -  condition to wait for.<br/>If specified, _wait will return if either the condition is met<br/>or if the time elapsed has exceeded timeout, whichever comes first.
 * 
 */
 function _wait ($timeout, $condition){}
/**
 * 
 * Sets what readyStates of an XMLHttpRequest (XHR) Sahi should wait for.<br/>
 * Sahi normally monitors all AJAX requests and proceeds only if the XHR readyState is 4.<br/>
 * In some applications which use long polling or comet requests, there may be XHRs in readyState 1.<br/>
 * Sahi would wait for a long time and then timeout in such cases.<br/>
 * Setting _setXHRReadyStatesToWaitFor to "2,3" will allow Sahi to proceed if the readyStates are either 1 or 4.<br/>
 * <pre><code>_setXHRReadyStatesToWaitFor("2,3");</code></pre>
 * <info>
 * The default XHR ready states to wait for is specified by the property<br/>
 * <pre><code>xhr.wait_ready_states=1,2,3</code></pre>
 * in sahi.properties. It can be overridden in <code>sahi/userdata/config/userdata.properties</code> file.<br/>
 * </info>
 * 
 * @param {string} $readyStates - A string with some of 1,2,3 in a string; like "1,2,3"
 * 
 */
 function _setXHRReadyStatesToWaitFor ($readyStates){}
/**
 * 
 * When set to true, it will not use the Sahi wait mechanism.<br/>
 * To stop bypassing the wait mechanism, set it to false again.<br/>
 * <pre><code>//start bypassing wait mechanism
 * _byPassWaitMechanism(true);
 * 
 * _setValue(_textbox("user"), "test");
 * _setValue(_password("pass"), "secret");
 * _click(_button("Login"));
 * 
 * //stop bypassing wait mechanism
 * _byPassWaitMechanism(false);</code></pre>
 * <info>
 * This API should be used carefully as it will bypass the inbuilt wait mechanism of Sahi. When required, set it to true and as soon as the need is over, set it to false.<br/>
 * </info>
 * 
 * @param {boolean} $b - true or false
 * 
 */
 function _byPassWaitMechanism ($b){}
/**
 * 
 * Modify the Windows, AJAX and Flex wait times. Sahi will wait for the specified time after start of every step, following which it will move on to execute the next step,<br/>
 * even if the activity(page/ajax/flex) is under execution. Pass the value as null to keep the last defined wait time.<br/>
 * <pre><code>_setWaitTimes(5000, 0, 0);
 * _navigateTo("http://sahi.co.in/demo/training/");//Sahi will wait for 5000ms following this step to load the page.
 * //If the page is not loaded within 5000ms, the execution will go to next step.
 * _click(_submit("Login"));
 * _setWaitTimes(null, 7000, 0);//Sahi will not wait for flex loads if any. It will wait for 7000ms for any AJAX activity and 5000ms for page load
 * //following this step before moving to next step.</code></pre>
 * 
 * @param {integer} $windowLoadTime - time in milliseconds. Default is 60000ms.
 * @param {integer} $ajaxLoadTime - time in milliseconds. Default is 60000ms.
 * @param {integer} $flexLoadTime - time in milliseconds. Default is 0ms.
 * 
 */
 function _setWaitTimes ($windowLoadTime, $ajaxLoadTime, $flexLoadTime){}
/**
 * 
 * <ul>
 * <info>NOTE: $checkZIndex and $doScroll were added Since Sahi Pro: 7.0.0. For old document <a href=http://sahipro.com/alldocs/v6.3.2/sahi-apis/script-execution-control-apis.html#_setStrictVisibilityCheck>Refer here</a>
 * </info>
 * </ul>
 * If $doCheck is true, forces Sahi to strictly look for only visible elements and ignore elements which are not visible.<br/>
 * <pre><code>// make Sahi ignore elements which are not visible.
 * // do operations on visible elements ...
 * _setStrictVisibilityCheck(true); //doesn't check z-index
 * 
 * _setStrictVisibilityCheck(true, true);   //checks z-index
 * _assertExists(_textbox("textbox_id"));
 * 
 * _setStrictVisibilityCheck(true, true,true); //checks z-index after scrolling
 * _assertExists(_textbox("textbox_id"));
 * 
 * 
 * // make sahi revert to original behavior of considering all elements in the DOM.
 * _setStrictVisibilityCheck(false);</code></pre>
 * <br/>
 * This API is useful in cases where widgets are dynamically created at multiple locations but only one of them is visible at any given time.<br/>
 * <br/>
 * During recording Sahi can be forced into either mode by choosing "Strict Visibility On" or "Strict Visibility Off" from the<br/>
 * "Other Actions:" dropdown. Make sure you "Append to Script" to add it to the recorded script<br/>
 * <br/>
 * <warning>
 * Setting _setStrictVisibilityCheck(true) can be slightly expensive as each probable element needs to be checked for visibility.<br/>
 * However, some applications may be automatable only if _setStrictVisibilityCheck is true. Use judiciously.<br/>
 * </warning>
 * 
 * @param {boolean} $doCheck - set to true to enable strict visibility check.
 * @param {boolean} $checkZIndex -  If true, checks whether the element is on top or not(Checks whether some other element with a higher Z index is not hiding it). If false, omits this check. Default is false.
 * @param {boolean} $doScroll -  If true, checks whether element is the top element by scrolling to the element. If false, checks only for the current viewport. Default is false.<br/>Used only when checkZIndex is true.
 * 
 */
 function _setStrictVisibilityCheck ($doCheck, $checkZIndex, $doScroll){}
/**
 * 
 * Sets the speed of execution of steps.<br/>
 * <pre><code>_setSpeed(2000);
 * //Each step will execute with a gap of 2000 milliseconds (2 seconds).
 * //Default execution speed is 100ms;</code></pre>
 * <info>From 6.1.0 onwards, this API works at a script level. Calling _setSpeed in one script does not affect other scripts.</info>
 * <warning>In earlier versions, DO NOT modify this unless absolutely necessary. Use _wait if and where needed.</warning>
 * 
 * @param {integer} $speed - speed in milliseconds
 * 
 */
 function _setSpeed ($speed){}
/**
 * 
 * Sahi Pro continuously pings the proxy server to await commands. In some very rare cases, it may be required to<br/>
 * silence all ping activity after execution of a step (For example, if you are monitoring CPU or browser usage statistics after a step).<br/>
 * In such case, calling _setPingDelayAfterStep will disable pinging for the given delay time.<br/>
 * <pre><code>_setPingDelayAfterStep(5000);
 * _click(_link("Link Test")); // pinging will stop for 5000 ms after this step
 * _click(_link("Back")); // pinging will stop for 5000 ms after this step
 * _setPingDelayAfterStep(0);
 * _click(_link("Abc"));  // Normal pinging will resume.</code></pre>
 * 
 * @param {integer} $delay - delay in milliseconds
 * 
 */
 function _setPingDelayAfterStep ($delay){}
/**
 * 
 * Forces script to fail and abort on any error. Further steps will not be executed.<br/>
 * This is the default behaviour of Sahi.<br/>
 * <pre><code>_stopOnError();</code></pre>
 * <info>
 * We differentiate between errors and failures.<br/>
 * Error: Occurs when an element on which an action is to be performed is missing.<br/>
 * Eg. In <code>_click(_link("Link Test"))</code>, if <code>_link("Link test")</code> does not exist, it will be an error<br/>
 * Failure: Assertion failures are considered failures. Sahi does not stop execution on failures.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _stopOnError (){}
/**
 * 
 * Forces script to continue inspite of error. Further steps will be executed.<br/>
 * <pre><code>_continueOnError();</code></pre>
 * <danger>
 * Using this can be a waste of time. If button or link is missing, it is quite likely that all<br/>
 * further steps will also fail. We do not recommend this.<br/>
 * </danger>
 * <info>
 * It may be better to use the Script Callback Function onScriptError instead.<br/>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _continueOnError (){}
/**
 * 
 * Executes all functions whose name starts with "test".<br/>
 * If testsArray is specified, runs only tests in that array.<br/>
 * If functions setUp() and tearDown() are defined,<br/>
 * they are executed before and after each test, irrespective of errors in the test functions.<br/>
 * <pre><code>function setUp(){
 *   _log("In setUp");
 * }
 * function tearDown(){
 *   _log("In tearDown");
 * }
 * function testAddition() {
 *   _assertEqual(3, 1+2);
 * }
 * function testSubtraction() {
 *   _assertEqual(3, 5-2);
 * }
 * function testMultiplication() {
 *   _assertEqual(8, 2*4);
 * }
 * // Invoke all tests:
 * _runUnitTests();
 * 
 * // Invoke only testAddition and testMultiplication
 * // Use this for debugging when you are fixing just one test
 * // and don't want to run all the tests.
 * _runUnitTests(["testAddition", "testMultiplication"]);</code></pre>
 * 
 * @param {array of strings} $testsArray -  Array of test function names which should be executed
 * 
 */
 function _runUnitTests ($testsArray){}
/**
 * 
 * Causes a script to stop as a failure and log the given message. Can be used in the middle of a script.<br/>
 * <info>
 * <ol>
 * <li>When called from inside a testcase, only that testcase will fail and other testcases will not be impacted.</li>
 * <li>When called from inside try block, execution will proceed to catch block.</li>
 * <li>onScriptFailure and onScriptError callback functions will NOT be called.</li>
 * </ol>
 * </info>
 * 
 * @param {string} $message -  Message to be logged in playback logs
 * 
 */
 function _fail ($message){}
/**
 * 
 * Causes a script to stop execution.<br/>
 * <info>
 * <ol>
 * <li>When called from inside a _testcase, the whole script execution will be stopped. Execution will not proceed to next testcase</li>
 * <li>When called from inside try block, execution will terminate without entering the catch block.</li>
 * <li>onScriptFailure and onScriptError callback functions will NOT be called.</li>
 * </ol>
 * </info>
 * 
 * <tr><td>None</td></tr>
 */
 function _stop (){}
/**
 * 
 * Causes a scenario file to stop execution of a testcase.<br/>
 * When called from inside a testcase in a scenario file, that particular testcase execution will be stopped. Execution will proceed to the next testcase.<br/>
 * 
 * @param {string} $message -  Message to be logged in playback logs
 * 
 */
 function _stopTestCase ($message){}
/**
 * 
 * Acquires a lock with given name. If another script calls _lock with the same name, that script will wait till<br/>
 * this lock is unlocked or till timeout happens.<br/>
 * If timeout is not specified, the default timeout defined by <code>sahi.lock.timeout</code> property in <code>sahi.properties</code> is used.<br/>
 * (Default is 60 seconds. Can be overridden in userdata.properties)<br/>
 * <br/>
 * <strong>
 * If you wish to lock a portion of code that deals with browser windows, example: focusing a window and taking a screenshot or focusing a window and doing file uploads, use <a href="#_lockWindow">_lockWindow</a> instead of _lock.<br/>
 * </strong><br/>
 * For example usage, refer to the <a href="#_lockWindow">_lockWindow</a> example below. Use _lock and _unlock for functionality other than dealing with windows.<br/>
 * 
 * @param {string} $name - Lock name
 * @param {integer} $timeout -  timeout
 * 
 */
 function _lock ($name, $timeout){}
/**
 * 
 * Unlocks or releases the lock (acquired through the _lock API) that matches the given key.<br/>
 * <danger>
 * key is NOT the name of the lock but the value returned from the _lock method.<br/>
 * </danger>
 * 
 * @param {string} $key - Lock key returned from _lock
 * 
 */
 function _unlock ($key){}
/**
 * 
 * <br/>
 * This is a more specific version of the _lock API.<br/>
 * <br/>
 * Acquires a lock with a name internal to Sahi. The same lock is used by Sahi when launching new browser windows.<br/>
 * <br/>
 * If another script calls _lockWindow, that script will wait till this _lockWindow is unlocked or till timeout happens.<br/>
 * If timeout is not specified, the default timeout defined by <code>sahi.lock.timeout</code> property in <code>sahi.properties</code> is used.<br/>
 * (Default is 60 seconds. Can be overridden in userdata.properties)<br/>
 * <br/>
 * <info>
 * In 5.1.0, _lock API was introduced.<br/>
 * <br/>
 * As part of taking screenshots, one would first need to call _focusWindow. The user could use _lock to lock a portion of code that called _focusWindow and then a Screenshot API. This is to ensure that while one script takes the screenshot of its browser, other scripts will wait before taking screenshots.<br/>
 * <br/>
 * However, Sahi itself launches browser windows to run scripts of a suite. Since this is not controlled through _lock, a Sahi browser window may get opened while a script is attempting to take a screenshot. This would end up affecting the screenshot.<br/>
 * <br/>
 * To avoid this problem, we have introduced the _lockWindow API. Whenever Sahi internally opens/manages browser windows, it calls _lockWindow to lock the window related code.<br/>
 * <br/>
 * <strong>Users should always use _lockWindow when managing any code related to windows, example: focusing the window and taking screenshots, focusing the window and do a native file upload, etc.</strong><br/>
 * </info>
 * 
 * @param {long} $timeout -  timeout
 * 
 */
 function _lockWindow ($timeout){}
/**
 * 
 * Unlocks or releases the lock acquired by calling _lockWindow.<br/>
 * <br/>
 * Used in conjunction with _lockWindow.<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function _unlockWindow (){}
/**
 * 
 * This is a callback function. It needs to be implemented by the tester.<br/>
 * It is called whenever an assertion failure occurs in the script. $exception is the actual exception that Sahi threw.<br/>
 * Can be used with _logException and _logExceptionAsFailure. $exception added since Sahi Pro V4.3<br/>
 * 
 * @param {exception} $exception -  Javascript Exception object
 * 
 */
 function onScriptFailure ($exception){}
/**
 * 
 * This is a callback function. It needs to be implemented by the tester.<br/>
 * It is called whenever an error occurs in the script.<br/>
 * $exception is the actual exception that Sahi threw. Can be used with _logException and _logExceptionAsFailure.<br/>
 * If the function returns true, the script will continue to execute. Default is false.<br/>
 * 
 * @param {exception} $exception -  Javascript Exception object
 * 
 */
 function onScriptError ($exception){}
/**
 * 
 * This is a callback function. It needs to be implemented by the tester.<br/>
 * It is called at the end of a script (even if there are errors in the script and the script stops in the middle).<br/>
 * 
 * <tr><td>None</td></tr>
 */
 function onScriptEnd (){}
/**
 * 
 * This is a callback function. It needs to be implemented by the tester.<br/>
 * It is called before every step in the script.<br/>
 * <danger>
 * Use this sparingly since it will be executed for every step in the script<br/>
 * </danger>
 * 
 * @param {String} $step -  which step is about to execute.
 * @param {String} $debugInfo -  debug information of the step(example : file name, lineNumber)
 * 
 */
 function onBeforeStep ($step, $debugInfo){}
/**
 * 
 * This is a callback function. It needs to be implemented by the tester.<br/>
 * It is called after every step in the script.<br/>
 * <danger>
 * Use this sparingly since it will be executed for every step in the script<br/>
 * </danger>
 * 
 * @param {String} $step -  which step is about to execute.
 * @param {String} $debugInfo -  debug information of the step(example : file name, lineNumber)
 * @param { String} $status -  status of function which got executed.(example : SUCCESS, FAILURE, ERROR, WAIT, UNRESPONSIVE_EXCEPTION)
 * 
 */
 function onAfterStep ($step, $debugInfo, $status){}
/**
 * 
 * Sets a recovery function which will be called on failure or error.<br/>
 * <danger>DEPRECATED: Do not use. Use callback functions as specified above</danger>
 * 
 * @param {function} $fn - Function that will get called on failure or error
 * 
 */
 function _setRecovery ($fn){}
/**
 * 
 * Removes previously set recovery function.<br/>
 * <danger>DEPRECATED: Do not use. Use callback functions as specified above</danger>
 * 
 * <tr><td>None</td></tr>
 */
 function _removeRecovery (){}
/**
 * 
 * <pre><code>// In script D:/sahi/userdata/scripts/demo/check.sah
 * var $scriptName = _scriptName(); // returns "check.sah"</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 function _scriptName (){}
/**
 * 
 * <ul>
 * <info>NOTE: $fileSeparator was added Since Sahi Pro: 6.1.1. For old document <a href=http://sahipro.com/alldocs/v6.1.0/sahi-apis/script-suite-info-apis.html#_scriptPath>Refer here</a>
 * </info>
 * </ul>
 * <pre><code>// In script D:/sahi/userdata/scripts/demo/check.sah
 * var $_scriptPath = _scriptPath(); // returns "D:/sahi/userdata/scripts/demo/check.sah"
 * var $_scriptPath = _scriptPath("\\"); // returns "D:\\sahi\\userdata\\scripts\\demo\\check.sah"</code></pre>
 * 
 * @param {string} $fileSeparator -  To get full script file path with specified file separator.<br/>Can be one of <code>"\\"</code> or <code>"/"</code><br/>Defaults to <code>"/"</code>
 * 
 */
 function _scriptPath ($fileSeparator){}
/**
 * 
 * <danger>
 * In versions prior to 6.0.0, it returned a String. Scripts written before 6.0.0 will need changes.<br/>
 * </danger>
 * <pre><code>var $dateObj = _scriptStartTime();
 * # Detailed usage:
 * var $date = $dateObj.toString();
 * var $year = $dateObj.getFullYear();
 * var $month = $dateObj.getMonth(); // Month range 0-11
 * var $month = $dateObj.getMonth2(); // Month range 1-12
 * var $day = $dateObj.getDay();
 * var $hours = $dateObj.getHours();
 * var $minutes = $dateObj.getMinutes();
 * var $seconds = $dateObj.getSeconds();</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 function _scriptStartTime (){}
/**
 * 
 * 
 * <tr><td>None</td></tr>
 */
 function _scriptStatus (){}
/**
 * 
 * <ul>
 * <info>NOTE: $fileSeparator was added Since Sahi Pro: 6.1.1. For old document <a href=http://sahipro.com/alldocs/v6.1.0/sahi-apis/script-suite-info-apis.html#_userDataDir>Refer here</a>
 * </info>
 * </ul>
 * <pre><code>$userDataPath = _userDataDir(); // returns "D:/sahi/userdata"
 * $userDataPath = _userDataDir("\\"); // returns "D:\\sahi\\userdata"</code></pre>
 * 
 * @param {string} $fileSeparator -  To get path with specified file separator.<br/>Can be one of <code>"\\"</code> or <code>"/"</code><br/>Defaults to <code>"/"</code>
 * 
 */
 function _userDataDir ($fileSeparator){}
/**
 * 
 * <ul>
 * <info>NOTE: $fileSeparator was added Since Sahi Pro: 6.1.1. For old document <a href=http://sahipro.com/alldocs/v6.1.0/sahi-apis/script-suite-info-apis.html#_userDataDir>Refer here</a>
 * </info>
 * </ul>
 * <pre><code>// If you have a data/excelsheets folder in sahi/userdata folder,
 * // you can access it using
 * $excelDataPath = _userDataPath("data/excelsheets"); // returns "D:/sahi/userdata/data/excelsheets"
 * $excelDataPath = _userDataPath("data/excelsheets", "\\"); // returns "D:\\sahi\\userdata\\data\\excelsheets"</code></pre>
 * 
 * @param {string} $relPath - Path to resolve relative to userdata path
 * @param {string} $fileSeparator -  To get path with specified file separator.<br/>Can be one of <code>"\\"</code> or <code>"/"</code><br/>Defaults to <code>"/"</code>
 * 
 */
 function _userDataPath ($relPath, $fileSeparator){}
/**
 * 
 * <ul>
 * <info>NOTE: $fileSeparator was added Since Sahi Pro: 6.1.1. For old document <a href=http://sahipro.com/alldocs/v6.1.0/sahi-apis/script-suite-info-apis.html#_resolvePath>Refer here</a>
 * </info>
 * </ul>
 * <pre><code>/*
 * If the current script is
 * D:/sahi/userdata/scripts/user/login.sah
 * If you have common csv file in
 * D:/sahi/userdata/scripts/common/user.csv
 * *&#47;
 * // using
 * $csvPath = _resolvePath("../common/user.csv"); // returns "D:/sahi/userdata/scripts/common/user.csv"
 * $csvPath = _resolvePath("../common/user.csv", "\\"); // returns "D:\\sahi\\userdata\\scripts\\common\\user.csv"</code></pre>
 * 
 * @param {string} $relPath - Path to resolve relative to current script path
 * @param {string} $fileSeparator -  To get path with specified file separator.<br/>Can be one of <code>"\\"</code> or <code>"/"</code><br/>Defaults to <code>"/"</code>
 * 
 */
 function _resolvePath ($relPath, $fileSeparator){}
/**
 * 
 * Returns information about the current session as an associative array.<br/>
 * The object has attributes:<br/>
 * <br/>
 * <ul>
 * <li>isRecording: returns true if recording</li>
 * <li>isPlaying: returns true if playingback</li>
 * <li>isPaused: returns true if playback is paused</li>
 * <li>sessionId: returns Sahi's sessionId</li>
 * <li>threadNumber: returns the threadNumber of browser instance running</li>
 * <li>scriptPath: returns script path of current script. Same as _scriptPath()</li>
 * </ul>
 * <br/>
 * <pre><code>var $sessionInfo = _sessionInfo();
 * var $sessionId = $sessionInfo["sessionId"];
 * // or
 * var $sessionId = $sessionInfo.sessionId;</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 function _sessionInfo (){}
/**
 * 
 * Returns suite information as an associative array.<br/>
 * Some of the properties in the array are:<br/>
 * <ul>
 * <li>suiteReportId: The suite report id for the suite/script run</li>
 * <li>suiteName: Name of suite/script</li>
 * <li>suitePath: Path of suite/script</li>
 * <li>baseURL: Base url for suite/script run</li>
 * <li>browserType: Browser that the suite/script was run on</li>
 * </ul>
 * <br/>
 * <pre><code>var $suiteInfo = _suiteInfo();
 * var $name = $suiteInfo["suiteName"];
 * // or
 * var $name = $suiteInfo.suiteName;</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 function _suiteInfo (){}
/**
 * 
 * Appends the customFieldName and customFieldValue in Suite Info.<br/>
 * <br/>
 * <pre><code>_addToSuiteInfo("VersionNo", "6.1.1");</code></pre>
 * 
 * @param {string} $customFieldName - Name of the Custom Field.
 * @param {string} $customFieldValue - Value of the Custom Field.
 * 
 */
 function _addToSuiteInfo ($customFieldName, $customFieldValue){}
/**
 * 
 * A testcase-property is an associative array with the following attributes:<br/>
 * <ul>
 * <li>id: testcase Id, Unique identifier for testcase</li>
 * <li>description: Description for testcase</li>
 * <li>status: Execution status of the testcase</li>
 * </ul>
 * <br/>
 * <pre><code>var $tcs = _testcasesInfo();
 * for(var $i=0; $i&lt;$tcs.length; $i++){
 *   var $tc = $tcs[$i];
 *   _log("id = " + $tc.id + "; description = " + $tc.description + "; status = " + $tc.status + ";");
 * }</code></pre>
 * 
 * <tr><td>None</td></tr>
 */
 function _testcasesInfo (){}
/**
 * 
 * More details <a href="../using-sahi/data-driven-suites.html#Variable $isDataPassed and _isDataPassed()">here</a>
 * 
 * <tr><td>None</td></tr>
 */
 function _isDataPassed (){}
/**
 * 
 * Sends a GET request to the URL and returns response body as a string.<br/>
 * <pre><code>var $contents = _readURL("http://sahi.co.in/demo/index.htm"); // returns contents of the page</code></pre>
 * 
 * @param {string} $url - URL to read content from
 * 
 */
 function _readURL ($url){}
/**
 * 
 * Forces the proxy to process certain patterns of urls differently.<br/>
 * If class_method is not specified, sends back a simple HTML blank page.<br/>
 * 
 * @param {string} $pattern - URL regex pattern as a string.
 * @param {string} $class_method -  Combination of class and method names which will process this URL pattern.
 * 
 */
 function _addMock ($pattern, $class_method){}
/**
 * 
 * Similar to _addMock, but by default sends back an image.<br/>
 * 
 * @param {string} $pattern - URL regex pattern as a string.
 * @param {string} $class_method -  Combination of class and method names which will process this URL pattern.
 * 
 */
 function _mockImage ($pattern, $class_method){}
/**
 * 
 * @param {string} $pattern - URL regex pattern as a string.<br/>Removes the mock behavior added via _addMock or _mockImage for that pattern.
 * 
 */
 function _removeMock ($pattern){}
/**
 * 
 * <warning>
 * Two calls to _random() may return the same number. DO NOT use it for uniqueness.<br/>
 * </warning>
 * 
 * @param {integer} $maxNumber - maximum number
 * 
 */
 function _random ($maxNumber){}
/**
 * 
 * This API helps extract specific content from strings.<br/>
 * <br/>
 * Example<br/>
 * <pre><code>// To get value "250" from "Rs. 250"
 * _extract("Rs. 250", "/Rs. (.*)/", true); // returns "250"
 * _extract("Rs. 250", "/Rs. (.*)/"); // returns an array ["Rs. 250", "250"]
 * 
 * 
 * // Multiple groups with and without onlyGroups
 * var $str = "The traffic light changed from red to green";
 * var $pattern = "/from (.*) to (.*)/";
 * 
 * var $extracted = _extract($str, $pattern);
 * // $extracted now has the overall match "from red to green" and the individual groups "red" and "green"
 * _assertEqual(["from red to green", "red", "green"], $extracted);
 * 
 * // Setting onlyGroups=true, we do not get back the overall match.
 * var $extracted = _extract($str, $pattern, true);
 * // $extracted now has only the individual groups "red" and "green"
 * _assertEqual(["red", "green"], $extracted);</code></pre>
 * 
 * @param {string} $str -  String to find pattern in
 * @param {string} $pattern -  Regular expression as native regex (/a/) or as a string ("/a/")
 * @param {boolean} $onlyGroups -  if true, returns only the groups matched.
 * 
 */
 function _extract ($str, $pattern, $onlyGroups){}
/**
 * 
 * <pre><code>var $s = " sahi pro  ";
 * $s = _trim($s);
 * _assertEqual("sahi pro", $s);
 * 
 * var $arr = ["",,,"sahi", "pro",,,"",,];
 * $arr = _trim($arr);
 * _assertEqual("sahi", $arr[0]);
 * _assertEqual("pro", $arr[1]);
 * _assertEqual(2, $arr.length);
 * 
 * var $array2D = [[],[],[],["","",""],["abc", "xyz", "c"], ["1", "2", "3"], ["1", "2", "3"], ["1", "2", "3"], ["1", "2", "3"],[],[""],[]];
 * $array2D = _trim($array2D);
 * _assertEqual("xyz", $array2D[0][1]);
 * _assertEqual(5, $array2D.length);</code></pre>
 * 
 * @param {string|array of strings|two dimensional array of strings} $arg -  String or 1-d or 2-d array.
 * 
 */
 function _trim ($arg){}
/**
 * 
 * It converts a JSON object to String.<br/>
 * <br/>
 * Example<br/>
 * <pre><code>var $libObj = {
 *   "name":"John Johnson",
 *   "street":"Oslo West 16",
 *   "age":33,
 *   "phone":"555 1234567"};
 * // Gives string corresponding to json object.
 * var $jsonString = _toJSON($libObj);</code></pre>
 * 
 * @param { JSON Object} $object -  JSON to convert to string.
 * 
 */
 function _toJSON ($object){}
/**
 * 
 * Select the specified sheet in Excel<br/>
 * <pre><code>_setSelectedExcelTab(&lt;&lt;sheet&gt;&gt;);
 * 
 * Example:
 * 
 * _selectWindow("Book1 - Excel");
 * _setSelectedExcelTab("Sheet2");   // selects "Sheet2" tab in Book1 - Excel.</code></pre>
 * 
 * @param {string} $element - Excel Sheet.
 * 
 */
 function _setSelectedExcelTab ($element){}
/**
 * 
 * Value entered into the specified cell of the currently selected sheet<br/>
 * Supports only cells within MS Excel framework<br/>
 * <pre><code>_setCell(&lt;&lt;cell identifier&gt;&gt;, &lt;&lt;value&gt;&gt;);
 * 
 * Example:
 * 
 * _setCell("A22","test");</code></pre>
 * 
 * @param {Windows element} $element - cell whose value is to be set
 * @param {string} $value - Value to be set
 * 
 */
 function _setCell ($element, $value){}
/**
 * 
 * Value appended to the specific cell of the currently selected sheet<br/>
 * Supports only cells within MS Excel framework<br/>
 * <pre><code>_typeCell(&lt;&lt;cell identifier&gt;&gt;, &lt;&lt;value&gt;&gt;);
 * 
 * Example:
 * 
 * _typeCell("A22","test");</code></pre>
 * 
 * @param {Windows element} $element -  cell element in which the text is to be typed
 * @param {string} $value - Value to be set
 * 
 */
 function _typeCell ($element, $value){}
/**
 * 
 * Expand tree element<br/>
 * <pre><code>_expand(&lt;&lt;element identifier&gt;&gt;);
 * 
 * Example:
 * 
 * _expand(_treeviewitem("First"));</code></pre>
 * 
 * @param {Windows element} $element - tree element to be expand.
 * 
 */
 function _expand ($element){}
/**
 * 
 * Expand tree element<br/>
 * <pre><code>_collapse(&lt;&lt;element identifier&gt;&gt;);
 * 
 * Example:
 * 
 * _collapse(_treeviewitem("First"));</code></pre>
 * 
 * @param {Windows element} $element - tree element to be collapsed
 * 
 */
 function _collapse ($element){}
